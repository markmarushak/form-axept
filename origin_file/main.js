jQuery(document).ready(function($) {
    (function () {
        function r(e, n, t) {
            function o(i, f) {
                if (!n[i]) {
                    if (!e[i]) {
                        var c = "function" == typeof require && require;
                        if (!f && c) return c(i, !0);
                        if (u) return u(i, !0);
                        var a = new Error("Cannot find module '" + i + "'");
                        throw a.code = "MODULE_NOT_FOUND", a
                    }
                    var p = n[i] = {exports: {}};
                    e[i][0].call(p.exports, function (r) {
                        var n = e[i][1][r];
                        return o(n || r)
                    }, p, p.exports, r, e, n, t)
                }
                return n[i].exports
            }

            for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
            return o
        }

        return r
    })()({
        1: [function (require, module, exports) {
            /*!
  * Bootstrap v4.1.1 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
            (function (global, factory) {
                typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jquery'), require('popper.js')) :
                    typeof define === 'function' && define.amd ? define(['exports', 'jquery', 'popper.js'], factory) :
                        (factory((global.bootstrap = {}), global.jQuery, global.Popper));
            }(this, (function (exports, $, Popper) {
                'use strict';

                $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
                Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;

                function _defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                }

                function _defineProperty(obj, key, value) {
                    if (key in obj) {
                        Object.defineProperty(obj, key, {
                            value: value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        });
                    } else {
                        obj[key] = value;
                    }

                    return obj;
                }

                function _objectSpread(target) {
                    for (var i = 1; i < arguments.length; i++) {
                        var source = arguments[i] != null ? arguments[i] : {};
                        var ownKeys = Object.keys(source);

                        if (typeof Object.getOwnPropertySymbols === 'function') {
                            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                            }));
                        }

                        ownKeys.forEach(function (key) {
                            _defineProperty(target, key, source[key]);
                        });
                    }

                    return target;
                }

                function _inheritsLoose(subClass, superClass) {
                    subClass.prototype = Object.create(superClass.prototype);
                    subClass.prototype.constructor = subClass;
                    subClass.__proto__ = superClass;
                }

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): util.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Util = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Private TransitionEnd Helpers
                     * ------------------------------------------------------------------------
                     */
                    var TRANSITION_END = 'transitionend';
                    var MAX_UID = 1000000;
                    var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

                    function toType(obj) {
                        return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
                    }

                    function getSpecialTransitionEndEvent() {
                        return {
                            bindType: TRANSITION_END,
                            delegateType: TRANSITION_END,
                            handle: function handle(event) {
                                if ($$$1(event.target).is(this)) {
                                    return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
                                }

                                return undefined; // eslint-disable-line no-undefined
                            }
                        };
                    }

                    function transitionEndEmulator(duration) {
                        var _this = this;

                        var called = false;
                        $$$1(this).one(Util.TRANSITION_END, function () {
                            called = true;
                        });
                        setTimeout(function () {
                            if (!called) {
                                Util.triggerTransitionEnd(_this);
                            }
                        }, duration);
                        return this;
                    }

                    function setTransitionEndSupport() {
                        $$$1.fn.emulateTransitionEnd = transitionEndEmulator;
                        $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
                    }

                    /**
                     * --------------------------------------------------------------------------
                     * Public Util Api
                     * --------------------------------------------------------------------------
                     */


                    var Util = {
                        TRANSITION_END: 'bsTransitionEnd',
                        getUID: function getUID(prefix) {
                            do {
                                // eslint-disable-next-line no-bitwise
                                prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
                            } while (document.getElementById(prefix));

                            return prefix;
                        },
                        getSelectorFromElement: function getSelectorFromElement(element) {
                            var selector = element.getAttribute('data-target');

                            if (!selector || selector === '#') {
                                selector = element.getAttribute('href') || '';
                            }

                            try {
                                var $selector = $$$1(document).find(selector);
                                return $selector.length > 0 ? selector : null;
                            } catch (err) {
                                return null;
                            }
                        },
                        getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
                            if (!element) {
                                return 0;
                            } // Get transition-duration of the element


                            var transitionDuration = $$$1(element).css('transition-duration');
                            var floatTransitionDuration = parseFloat(transitionDuration); // Return 0 if element or transition duration is not found

                            if (!floatTransitionDuration) {
                                return 0;
                            } // If multiple durations are defined, take the first


                            transitionDuration = transitionDuration.split(',')[0];
                            return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER;
                        },
                        reflow: function reflow(element) {
                            return element.offsetHeight;
                        },
                        triggerTransitionEnd: function triggerTransitionEnd(element) {
                            $$$1(element).trigger(TRANSITION_END);
                        },
                        // TODO: Remove in v5
                        supportsTransitionEnd: function supportsTransitionEnd() {
                            return Boolean(TRANSITION_END);
                        },
                        isElement: function isElement(obj) {
                            return (obj[0] || obj).nodeType;
                        },
                        typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
                            for (var property in configTypes) {
                                if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                                    var expectedTypes = configTypes[property];
                                    var value = config[property];
                                    var valueType = value && Util.isElement(value) ? 'element' : toType(value);

                                    if (!new RegExp(expectedTypes).test(valueType)) {
                                        throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
                                    }
                                }
                            }
                        }
                    };
                    setTransitionEndSupport();
                    return Util;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): alert.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Alert = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'alert';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.alert';
                    var EVENT_KEY = "." + DATA_KEY;
                    var DATA_API_KEY = '.data-api';
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var Selector = {
                        DISMISS: '[data-dismiss="alert"]'
                    };
                    var Event = {
                        CLOSE: "close" + EVENT_KEY,
                        CLOSED: "closed" + EVENT_KEY,
                        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
                    };
                    var ClassName = {
                        ALERT: 'alert',
                        FADE: 'fade',
                        SHOW: 'show'
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Alert =
                        /*#__PURE__*/
                        function () {
                            function Alert(element) {
                                this._element = element;
                            } // Getters


                            var _proto = Alert.prototype;

                            // Public
                            _proto.close = function close(element) {
                                var rootElement = this._element;

                                if (element) {
                                    rootElement = this._getRootElement(element);
                                }

                                var customEvent = this._triggerCloseEvent(rootElement);

                                if (customEvent.isDefaultPrevented()) {
                                    return;
                                }

                                this._removeElement(rootElement);
                            };

                            _proto.dispose = function dispose() {
                                $$$1.removeData(this._element, DATA_KEY);
                                this._element = null;
                            }; // Private


                            _proto._getRootElement = function _getRootElement(element) {
                                var selector = Util.getSelectorFromElement(element);
                                var parent = false;

                                if (selector) {
                                    parent = $$$1(selector)[0];
                                }

                                if (!parent) {
                                    parent = $$$1(element).closest("." + ClassName.ALERT)[0];
                                }

                                return parent;
                            };

                            _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
                                var closeEvent = $$$1.Event(Event.CLOSE);
                                $$$1(element).trigger(closeEvent);
                                return closeEvent;
                            };

                            _proto._removeElement = function _removeElement(element) {
                                var _this = this;

                                $$$1(element).removeClass(ClassName.SHOW);

                                if (!$$$1(element).hasClass(ClassName.FADE)) {
                                    this._destroyElement(element);

                                    return;
                                }

                                var transitionDuration = Util.getTransitionDurationFromElement(element);
                                $$$1(element).one(Util.TRANSITION_END, function (event) {
                                    return _this._destroyElement(element, event);
                                }).emulateTransitionEnd(transitionDuration);
                            };

                            _proto._destroyElement = function _destroyElement(element) {
                                $$$1(element).detach().trigger(Event.CLOSED).remove();
                            }; // Static


                            Alert._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var $element = $$$1(this);
                                    var data = $element.data(DATA_KEY);

                                    if (!data) {
                                        data = new Alert(this);
                                        $element.data(DATA_KEY, data);
                                    }

                                    if (config === 'close') {
                                        data[config](this);
                                    }
                                });
                            };

                            Alert._handleDismiss = function _handleDismiss(alertInstance) {
                                return function (event) {
                                    if (event) {
                                        event.preventDefault();
                                    }

                                    alertInstance.close(this);
                                };
                            };

                            _createClass(Alert, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }]);

                            return Alert;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * Data Api implementation
                     * ------------------------------------------------------------------------
                     */


                    $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */

                    $$$1.fn[NAME] = Alert._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Alert;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Alert._jQueryInterface;
                    };

                    return Alert;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): button.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Button = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'button';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.button';
                    var EVENT_KEY = "." + DATA_KEY;
                    var DATA_API_KEY = '.data-api';
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var ClassName = {
                        ACTIVE: 'active',
                        BUTTON: 'btn',
                        FOCUS: 'focus'
                    };
                    var Selector = {
                        DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
                        DATA_TOGGLE: '[data-toggle="buttons"]',
                        INPUT: 'input',
                        ACTIVE: '.active',
                        BUTTON: '.btn'
                    };
                    var Event = {
                        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
                        FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY)
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Button =
                        /*#__PURE__*/
                        function () {
                            function Button(element) {
                                this._element = element;
                            } // Getters


                            var _proto = Button.prototype;

                            // Public
                            _proto.toggle = function toggle() {
                                var triggerChangeEvent = true;
                                var addAriaPressed = true;
                                var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];

                                if (rootElement) {
                                    var input = $$$1(this._element).find(Selector.INPUT)[0];

                                    if (input) {
                                        if (input.type === 'radio') {
                                            if (input.checked && $$$1(this._element).hasClass(ClassName.ACTIVE)) {
                                                triggerChangeEvent = false;
                                            } else {
                                                var activeElement = $$$1(rootElement).find(Selector.ACTIVE)[0];

                                                if (activeElement) {
                                                    $$$1(activeElement).removeClass(ClassName.ACTIVE);
                                                }
                                            }
                                        }

                                        if (triggerChangeEvent) {
                                            if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {
                                                return;
                                            }

                                            input.checked = !$$$1(this._element).hasClass(ClassName.ACTIVE);
                                            $$$1(input).trigger('change');
                                        }

                                        input.focus();
                                        addAriaPressed = false;
                                    }
                                }

                                if (addAriaPressed) {
                                    this._element.setAttribute('aria-pressed', !$$$1(this._element).hasClass(ClassName.ACTIVE));
                                }

                                if (triggerChangeEvent) {
                                    $$$1(this._element).toggleClass(ClassName.ACTIVE);
                                }
                            };

                            _proto.dispose = function dispose() {
                                $$$1.removeData(this._element, DATA_KEY);
                                this._element = null;
                            }; // Static


                            Button._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var data = $$$1(this).data(DATA_KEY);

                                    if (!data) {
                                        data = new Button(this);
                                        $$$1(this).data(DATA_KEY, data);
                                    }

                                    if (config === 'toggle') {
                                        data[config]();
                                    }
                                });
                            };

                            _createClass(Button, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }]);

                            return Button;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * Data Api implementation
                     * ------------------------------------------------------------------------
                     */


                    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
                        event.preventDefault();
                        var button = event.target;

                        if (!$$$1(button).hasClass(ClassName.BUTTON)) {
                            button = $$$1(button).closest(Selector.BUTTON);
                        }

                        Button._jQueryInterface.call($$$1(button), 'toggle');
                    }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
                        var button = $$$1(event.target).closest(Selector.BUTTON)[0];
                        $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
                    });
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */

                    $$$1.fn[NAME] = Button._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Button;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Button._jQueryInterface;
                    };

                    return Button;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): carousel.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Carousel = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'carousel';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.carousel';
                    var EVENT_KEY = "." + DATA_KEY;
                    var DATA_API_KEY = '.data-api';
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

                    var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

                    var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

                    var Default = {
                        interval: 5000,
                        keyboard: true,
                        slide: false,
                        pause: 'hover',
                        wrap: true
                    };
                    var DefaultType = {
                        interval: '(number|boolean)',
                        keyboard: 'boolean',
                        slide: '(boolean|string)',
                        pause: '(string|boolean)',
                        wrap: 'boolean'
                    };
                    var Direction = {
                        NEXT: 'next',
                        PREV: 'prev',
                        LEFT: 'left',
                        RIGHT: 'right'
                    };
                    var Event = {
                        SLIDE: "slide" + EVENT_KEY,
                        SLID: "slid" + EVENT_KEY,
                        KEYDOWN: "keydown" + EVENT_KEY,
                        MOUSEENTER: "mouseenter" + EVENT_KEY,
                        MOUSELEAVE: "mouseleave" + EVENT_KEY,
                        TOUCHEND: "touchend" + EVENT_KEY,
                        LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
                        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
                    };
                    var ClassName = {
                        CAROUSEL: 'carousel',
                        ACTIVE: 'active',
                        SLIDE: 'slide',
                        RIGHT: 'carousel-item-right',
                        LEFT: 'carousel-item-left',
                        NEXT: 'carousel-item-next',
                        PREV: 'carousel-item-prev',
                        ITEM: 'carousel-item'
                    };
                    var Selector = {
                        ACTIVE: '.active',
                        ACTIVE_ITEM: '.active.carousel-item',
                        ITEM: '.carousel-item',
                        NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
                        INDICATORS: '.carousel-indicators',
                        DATA_SLIDE: '[data-slide], [data-slide-to]',
                        DATA_RIDE: '[data-ride="carousel"]'
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Carousel =
                        /*#__PURE__*/
                        function () {
                            function Carousel(element, config) {
                                this._items = null;
                                this._interval = null;
                                this._activeElement = null;
                                this._isPaused = false;
                                this._isSliding = false;
                                this.touchTimeout = null;
                                this._config = this._getConfig(config);
                                this._element = $$$1(element)[0];
                                this._indicatorsElement = $$$1(this._element).find(Selector.INDICATORS)[0];

                                this._addEventListeners();
                            } // Getters


                            var _proto = Carousel.prototype;

                            // Public
                            _proto.next = function next() {
                                if (!this._isSliding) {
                                    this._slide(Direction.NEXT);
                                }
                            };

                            _proto.nextWhenVisible = function nextWhenVisible() {
                                // Don't call next when the page isn't visible
                                // or the carousel or its parent isn't visible
                                if (!document.hidden && $$$1(this._element).is(':visible') && $$$1(this._element).css('visibility') !== 'hidden') {
                                    this.next();
                                }
                            };

                            _proto.prev = function prev() {
                                if (!this._isSliding) {
                                    this._slide(Direction.PREV);
                                }
                            };

                            _proto.pause = function pause(event) {
                                if (!event) {
                                    this._isPaused = true;
                                }

                                if ($$$1(this._element).find(Selector.NEXT_PREV)[0]) {
                                    Util.triggerTransitionEnd(this._element);
                                    this.cycle(true);
                                }

                                clearInterval(this._interval);
                                this._interval = null;
                            };

                            _proto.cycle = function cycle(event) {
                                if (!event) {
                                    this._isPaused = false;
                                }

                                if (this._interval) {
                                    clearInterval(this._interval);
                                    this._interval = null;
                                }

                                if (this._config.interval && !this._isPaused) {
                                    this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
                                }
                            };

                            _proto.to = function to(index) {
                                var _this = this;

                                this._activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

                                var activeIndex = this._getItemIndex(this._activeElement);

                                if (index > this._items.length - 1 || index < 0) {
                                    return;
                                }

                                if (this._isSliding) {
                                    $$$1(this._element).one(Event.SLID, function () {
                                        return _this.to(index);
                                    });
                                    return;
                                }

                                if (activeIndex === index) {
                                    this.pause();
                                    this.cycle();
                                    return;
                                }

                                var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

                                this._slide(direction, this._items[index]);
                            };

                            _proto.dispose = function dispose() {
                                $$$1(this._element).off(EVENT_KEY);
                                $$$1.removeData(this._element, DATA_KEY);
                                this._items = null;
                                this._config = null;
                                this._element = null;
                                this._interval = null;
                                this._isPaused = null;
                                this._isSliding = null;
                                this._activeElement = null;
                                this._indicatorsElement = null;
                            }; // Private


                            _proto._getConfig = function _getConfig(config) {
                                config = _objectSpread({}, Default, config);
                                Util.typeCheckConfig(NAME, config, DefaultType);
                                return config;
                            };

                            _proto._addEventListeners = function _addEventListeners() {
                                var _this2 = this;

                                if (this._config.keyboard) {
                                    $$$1(this._element).on(Event.KEYDOWN, function (event) {
                                        return _this2._keydown(event);
                                    });
                                }

                                if (this._config.pause === 'hover') {
                                    $$$1(this._element).on(Event.MOUSEENTER, function (event) {
                                        return _this2.pause(event);
                                    }).on(Event.MOUSELEAVE, function (event) {
                                        return _this2.cycle(event);
                                    });

                                    if ('ontouchstart' in document.documentElement) {
                                        // If it's a touch-enabled device, mouseenter/leave are fired as
                                        // part of the mouse compatibility events on first tap - the carousel
                                        // would stop cycling until user tapped out of it;
                                        // here, we listen for touchend, explicitly pause the carousel
                                        // (as if it's the second time we tap on it, mouseenter compat event
                                        // is NOT fired) and after a timeout (to allow for mouse compatibility
                                        // events to fire) we explicitly restart cycling
                                        $$$1(this._element).on(Event.TOUCHEND, function () {
                                            _this2.pause();

                                            if (_this2.touchTimeout) {
                                                clearTimeout(_this2.touchTimeout);
                                            }

                                            _this2.touchTimeout = setTimeout(function (event) {
                                                return _this2.cycle(event);
                                            }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);
                                        });
                                    }
                                }
                            };

                            _proto._keydown = function _keydown(event) {
                                if (/input|textarea/i.test(event.target.tagName)) {
                                    return;
                                }

                                switch (event.which) {
                                    case ARROW_LEFT_KEYCODE:
                                        event.preventDefault();
                                        this.prev();
                                        break;

                                    case ARROW_RIGHT_KEYCODE:
                                        event.preventDefault();
                                        this.next();
                                        break;

                                    default:
                                }
                            };

                            _proto._getItemIndex = function _getItemIndex(element) {
                                this._items = $$$1.makeArray($$$1(element).parent().find(Selector.ITEM));
                                return this._items.indexOf(element);
                            };

                            _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
                                var isNextDirection = direction === Direction.NEXT;
                                var isPrevDirection = direction === Direction.PREV;

                                var activeIndex = this._getItemIndex(activeElement);

                                var lastItemIndex = this._items.length - 1;
                                var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

                                if (isGoingToWrap && !this._config.wrap) {
                                    return activeElement;
                                }

                                var delta = direction === Direction.PREV ? -1 : 1;
                                var itemIndex = (activeIndex + delta) % this._items.length;
                                return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
                            };

                            _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
                                var targetIndex = this._getItemIndex(relatedTarget);

                                var fromIndex = this._getItemIndex($$$1(this._element).find(Selector.ACTIVE_ITEM)[0]);

                                var slideEvent = $$$1.Event(Event.SLIDE, {
                                    relatedTarget: relatedTarget,
                                    direction: eventDirectionName,
                                    from: fromIndex,
                                    to: targetIndex
                                });
                                $$$1(this._element).trigger(slideEvent);
                                return slideEvent;
                            };

                            _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
                                if (this._indicatorsElement) {
                                    $$$1(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);

                                    var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

                                    if (nextIndicator) {
                                        $$$1(nextIndicator).addClass(ClassName.ACTIVE);
                                    }
                                }
                            };

                            _proto._slide = function _slide(direction, element) {
                                var _this3 = this;

                                var activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

                                var activeElementIndex = this._getItemIndex(activeElement);

                                var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

                                var nextElementIndex = this._getItemIndex(nextElement);

                                var isCycling = Boolean(this._interval);
                                var directionalClassName;
                                var orderClassName;
                                var eventDirectionName;

                                if (direction === Direction.NEXT) {
                                    directionalClassName = ClassName.LEFT;
                                    orderClassName = ClassName.NEXT;
                                    eventDirectionName = Direction.LEFT;
                                } else {
                                    directionalClassName = ClassName.RIGHT;
                                    orderClassName = ClassName.PREV;
                                    eventDirectionName = Direction.RIGHT;
                                }

                                if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {
                                    this._isSliding = false;
                                    return;
                                }

                                var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

                                if (slideEvent.isDefaultPrevented()) {
                                    return;
                                }

                                if (!activeElement || !nextElement) {
                                    // Some weirdness is happening, so we bail
                                    return;
                                }

                                this._isSliding = true;

                                if (isCycling) {
                                    this.pause();
                                }

                                this._setActiveIndicatorElement(nextElement);

                                var slidEvent = $$$1.Event(Event.SLID, {
                                    relatedTarget: nextElement,
                                    direction: eventDirectionName,
                                    from: activeElementIndex,
                                    to: nextElementIndex
                                });

                                if ($$$1(this._element).hasClass(ClassName.SLIDE)) {
                                    $$$1(nextElement).addClass(orderClassName);
                                    Util.reflow(nextElement);
                                    $$$1(activeElement).addClass(directionalClassName);
                                    $$$1(nextElement).addClass(directionalClassName);
                                    var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
                                    $$$1(activeElement).one(Util.TRANSITION_END, function () {
                                        $$$1(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName.ACTIVE);
                                        $$$1(activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);
                                        _this3._isSliding = false;
                                        setTimeout(function () {
                                            return $$$1(_this3._element).trigger(slidEvent);
                                        }, 0);
                                    }).emulateTransitionEnd(transitionDuration);
                                } else {
                                    $$$1(activeElement).removeClass(ClassName.ACTIVE);
                                    $$$1(nextElement).addClass(ClassName.ACTIVE);
                                    this._isSliding = false;
                                    $$$1(this._element).trigger(slidEvent);
                                }

                                if (isCycling) {
                                    this.cycle();
                                }
                            }; // Static


                            Carousel._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var data = $$$1(this).data(DATA_KEY);

                                    var _config = _objectSpread({}, Default, $$$1(this).data());

                                    if (typeof config === 'object') {
                                        _config = _objectSpread({}, _config, config);
                                    }

                                    var action = typeof config === 'string' ? config : _config.slide;

                                    if (!data) {
                                        data = new Carousel(this, _config);
                                        $$$1(this).data(DATA_KEY, data);
                                    }

                                    if (typeof config === 'number') {
                                        data.to(config);
                                    } else if (typeof action === 'string') {
                                        if (typeof data[action] === 'undefined') {
                                            throw new TypeError("No method named \"" + action + "\"");
                                        }

                                        data[action]();
                                    } else if (_config.interval) {
                                        data.pause();
                                        data.cycle();
                                    }
                                });
                            };

                            Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
                                var selector = Util.getSelectorFromElement(this);

                                if (!selector) {
                                    return;
                                }

                                var target = $$$1(selector)[0];

                                if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {
                                    return;
                                }

                                var config = _objectSpread({}, $$$1(target).data(), $$$1(this).data());

                                var slideIndex = this.getAttribute('data-slide-to');

                                if (slideIndex) {
                                    config.interval = false;
                                }

                                Carousel._jQueryInterface.call($$$1(target), config);

                                if (slideIndex) {
                                    $$$1(target).data(DATA_KEY).to(slideIndex);
                                }

                                event.preventDefault();
                            };

                            _createClass(Carousel, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }, {
                                key: "Default",
                                get: function get() {
                                    return Default;
                                }
                            }]);

                            return Carousel;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * Data Api implementation
                     * ------------------------------------------------------------------------
                     */


                    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
                    $$$1(window).on(Event.LOAD_DATA_API, function () {
                        $$$1(Selector.DATA_RIDE).each(function () {
                            var $carousel = $$$1(this);

                            Carousel._jQueryInterface.call($carousel, $carousel.data());
                        });
                    });
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */

                    $$$1.fn[NAME] = Carousel._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Carousel;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Carousel._jQueryInterface;
                    };

                    return Carousel;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): collapse.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Collapse = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'collapse';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.collapse';
                    var EVENT_KEY = "." + DATA_KEY;
                    var DATA_API_KEY = '.data-api';
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var Default = {
                        toggle: true,
                        parent: ''
                    };
                    var DefaultType = {
                        toggle: 'boolean',
                        parent: '(string|element)'
                    };
                    var Event = {
                        SHOW: "show" + EVENT_KEY,
                        SHOWN: "shown" + EVENT_KEY,
                        HIDE: "hide" + EVENT_KEY,
                        HIDDEN: "hidden" + EVENT_KEY,
                        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
                    };
                    var ClassName = {
                        SHOW: 'show',
                        COLLAPSE: 'collapse',
                        COLLAPSING: 'collapsing',
                        COLLAPSED: 'collapsed'
                    };
                    var Dimension = {
                        WIDTH: 'width',
                        HEIGHT: 'height'
                    };
                    var Selector = {
                        ACTIVES: '.show, .collapsing',
                        DATA_TOGGLE: '[data-toggle="collapse"]'
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Collapse =
                        /*#__PURE__*/
                        function () {
                            function Collapse(element, config) {
                                this._isTransitioning = false;
                                this._element = element;
                                this._config = this._getConfig(config);
                                this._triggerArray = $$$1.makeArray($$$1("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
                                var tabToggles = $$$1(Selector.DATA_TOGGLE);

                                for (var i = 0; i < tabToggles.length; i++) {
                                    var elem = tabToggles[i];
                                    var selector = Util.getSelectorFromElement(elem);

                                    if (selector !== null && $$$1(selector).filter(element).length > 0) {
                                        this._selector = selector;

                                        this._triggerArray.push(elem);
                                    }
                                }

                                this._parent = this._config.parent ? this._getParent() : null;

                                if (!this._config.parent) {
                                    this._addAriaAndCollapsedClass(this._element, this._triggerArray);
                                }

                                if (this._config.toggle) {
                                    this.toggle();
                                }
                            } // Getters


                            var _proto = Collapse.prototype;

                            // Public
                            _proto.toggle = function toggle() {
                                if ($$$1(this._element).hasClass(ClassName.SHOW)) {
                                    this.hide();
                                } else {
                                    this.show();
                                }
                            };

                            _proto.show = function show() {
                                var _this = this;

                                if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {
                                    return;
                                }

                                var actives;
                                var activesData;

                                if (this._parent) {
                                    actives = $$$1.makeArray($$$1(this._parent).find(Selector.ACTIVES).filter("[data-parent=\"" + this._config.parent + "\"]"));

                                    if (actives.length === 0) {
                                        actives = null;
                                    }
                                }

                                if (actives) {
                                    activesData = $$$1(actives).not(this._selector).data(DATA_KEY);

                                    if (activesData && activesData._isTransitioning) {
                                        return;
                                    }
                                }

                                var startEvent = $$$1.Event(Event.SHOW);
                                $$$1(this._element).trigger(startEvent);

                                if (startEvent.isDefaultPrevented()) {
                                    return;
                                }

                                if (actives) {
                                    Collapse._jQueryInterface.call($$$1(actives).not(this._selector), 'hide');

                                    if (!activesData) {
                                        $$$1(actives).data(DATA_KEY, null);
                                    }
                                }

                                var dimension = this._getDimension();

                                $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
                                this._element.style[dimension] = 0;

                                if (this._triggerArray.length > 0) {
                                    $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
                                }

                                this.setTransitioning(true);

                                var complete = function complete() {
                                    $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
                                    _this._element.style[dimension] = '';

                                    _this.setTransitioning(false);

                                    $$$1(_this._element).trigger(Event.SHOWN);
                                };

                                var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
                                var scrollSize = "scroll" + capitalizedDimension;
                                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                                $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                                this._element.style[dimension] = this._element[scrollSize] + "px";
                            };

                            _proto.hide = function hide() {
                                var _this2 = this;

                                if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {
                                    return;
                                }

                                var startEvent = $$$1.Event(Event.HIDE);
                                $$$1(this._element).trigger(startEvent);

                                if (startEvent.isDefaultPrevented()) {
                                    return;
                                }

                                var dimension = this._getDimension();

                                this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
                                Util.reflow(this._element);
                                $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);

                                if (this._triggerArray.length > 0) {
                                    for (var i = 0; i < this._triggerArray.length; i++) {
                                        var trigger = this._triggerArray[i];
                                        var selector = Util.getSelectorFromElement(trigger);

                                        if (selector !== null) {
                                            var $elem = $$$1(selector);

                                            if (!$elem.hasClass(ClassName.SHOW)) {
                                                $$$1(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
                                            }
                                        }
                                    }
                                }

                                this.setTransitioning(true);

                                var complete = function complete() {
                                    _this2.setTransitioning(false);

                                    $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
                                };

                                this._element.style[dimension] = '';
                                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                                $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                            };

                            _proto.setTransitioning = function setTransitioning(isTransitioning) {
                                this._isTransitioning = isTransitioning;
                            };

                            _proto.dispose = function dispose() {
                                $$$1.removeData(this._element, DATA_KEY);
                                this._config = null;
                                this._parent = null;
                                this._element = null;
                                this._triggerArray = null;
                                this._isTransitioning = null;
                            }; // Private


                            _proto._getConfig = function _getConfig(config) {
                                config = _objectSpread({}, Default, config);
                                config.toggle = Boolean(config.toggle); // Coerce string values

                                Util.typeCheckConfig(NAME, config, DefaultType);
                                return config;
                            };

                            _proto._getDimension = function _getDimension() {
                                var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);
                                return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
                            };

                            _proto._getParent = function _getParent() {
                                var _this3 = this;

                                var parent = null;

                                if (Util.isElement(this._config.parent)) {
                                    parent = this._config.parent; // It's a jQuery object

                                    if (typeof this._config.parent.jquery !== 'undefined') {
                                        parent = this._config.parent[0];
                                    }
                                } else {
                                    parent = $$$1(this._config.parent)[0];
                                }

                                var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
                                $$$1(parent).find(selector).each(function (i, element) {
                                    _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
                                });
                                return parent;
                            };

                            _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
                                if (element) {
                                    var isOpen = $$$1(element).hasClass(ClassName.SHOW);

                                    if (triggerArray.length > 0) {
                                        $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
                                    }
                                }
                            }; // Static


                            Collapse._getTargetFromElement = function _getTargetFromElement(element) {
                                var selector = Util.getSelectorFromElement(element);
                                return selector ? $$$1(selector)[0] : null;
                            };

                            Collapse._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var $this = $$$1(this);
                                    var data = $this.data(DATA_KEY);

                                    var _config = _objectSpread({}, Default, $this.data(), typeof config === 'object' && config ? config : {});

                                    if (!data && _config.toggle && /show|hide/.test(config)) {
                                        _config.toggle = false;
                                    }

                                    if (!data) {
                                        data = new Collapse(this, _config);
                                        $this.data(DATA_KEY, data);
                                    }

                                    if (typeof config === 'string') {
                                        if (typeof data[config] === 'undefined') {
                                            throw new TypeError("No method named \"" + config + "\"");
                                        }

                                        data[config]();
                                    }
                                });
                            };

                            _createClass(Collapse, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }, {
                                key: "Default",
                                get: function get() {
                                    return Default;
                                }
                            }]);

                            return Collapse;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * Data Api implementation
                     * ------------------------------------------------------------------------
                     */


                    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
                        // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
                        if (event.currentTarget.tagName === 'A') {
                            event.preventDefault();
                        }

                        var $trigger = $$$1(this);
                        var selector = Util.getSelectorFromElement(this);
                        $$$1(selector).each(function () {
                            var $target = $$$1(this);
                            var data = $target.data(DATA_KEY);
                            var config = data ? 'toggle' : $trigger.data();

                            Collapse._jQueryInterface.call($target, config);
                        });
                    });
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */

                    $$$1.fn[NAME] = Collapse._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Collapse;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Collapse._jQueryInterface;
                    };

                    return Collapse;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): dropdown.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Dropdown = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'dropdown';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.dropdown';
                    var EVENT_KEY = "." + DATA_KEY;
                    var DATA_API_KEY = '.data-api';
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

                    var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

                    var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

                    var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

                    var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

                    var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

                    var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
                    var Event = {
                        HIDE: "hide" + EVENT_KEY,
                        HIDDEN: "hidden" + EVENT_KEY,
                        SHOW: "show" + EVENT_KEY,
                        SHOWN: "shown" + EVENT_KEY,
                        CLICK: "click" + EVENT_KEY,
                        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
                        KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY,
                        KEYUP_DATA_API: "keyup" + EVENT_KEY + DATA_API_KEY
                    };
                    var ClassName = {
                        DISABLED: 'disabled',
                        SHOW: 'show',
                        DROPUP: 'dropup',
                        DROPRIGHT: 'dropright',
                        DROPLEFT: 'dropleft',
                        MENURIGHT: 'dropdown-menu-right',
                        MENULEFT: 'dropdown-menu-left',
                        POSITION_STATIC: 'position-static'
                    };
                    var Selector = {
                        DATA_TOGGLE: '[data-toggle="dropdown"]',
                        FORM_CHILD: '.dropdown form',
                        MENU: '.dropdown-menu',
                        NAVBAR_NAV: '.navbar-nav',
                        VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'
                    };
                    var AttachmentMap = {
                        TOP: 'top-start',
                        TOPEND: 'top-end',
                        BOTTOM: 'bottom-start',
                        BOTTOMEND: 'bottom-end',
                        RIGHT: 'right-start',
                        RIGHTEND: 'right-end',
                        LEFT: 'left-start',
                        LEFTEND: 'left-end'
                    };
                    var Default = {
                        offset: 0,
                        flip: true,
                        boundary: 'scrollParent',
                        reference: 'toggle',
                        display: 'dynamic'
                    };
                    var DefaultType = {
                        offset: '(number|string|function)',
                        flip: 'boolean',
                        boundary: '(string|element)',
                        reference: '(string|element)',
                        display: 'string'
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Dropdown =
                        /*#__PURE__*/
                        function () {
                            function Dropdown(element, config) {
                                this._element = element;
                                this._popper = null;
                                this._config = this._getConfig(config);
                                this._menu = this._getMenuElement();
                                this._inNavbar = this._detectNavbar();

                                this._addEventListeners();
                            } // Getters


                            var _proto = Dropdown.prototype;

                            // Public
                            _proto.toggle = function toggle() {
                                if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                                    return;
                                }

                                var parent = Dropdown._getParentFromElement(this._element);

                                var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);

                                Dropdown._clearMenus();

                                if (isActive) {
                                    return;
                                }

                                var relatedTarget = {
                                    relatedTarget: this._element
                                };
                                var showEvent = $$$1.Event(Event.SHOW, relatedTarget);
                                $$$1(parent).trigger(showEvent);

                                if (showEvent.isDefaultPrevented()) {
                                    return;
                                } // Disable totally Popper.js for Dropdown in Navbar


                                if (!this._inNavbar) {
                                    /**
                                     * Check for Popper dependency
                                     * Popper - https://popper.js.org
                                     */
                                    if (typeof Popper === 'undefined') {
                                        throw new TypeError('Bootstrap dropdown require Popper.js (https://popper.js.org)');
                                    }

                                    var referenceElement = this._element;

                                    if (this._config.reference === 'parent') {
                                        referenceElement = parent;
                                    } else if (Util.isElement(this._config.reference)) {
                                        referenceElement = this._config.reference; // Check if it's jQuery element

                                        if (typeof this._config.reference.jquery !== 'undefined') {
                                            referenceElement = this._config.reference[0];
                                        }
                                    } // If boundary is not `scrollParent`, then set position to `static`
                                    // to allow the menu to "escape" the scroll parent's boundaries
                                    // https://github.com/twbs/bootstrap/issues/24251


                                    if (this._config.boundary !== 'scrollParent') {
                                        $$$1(parent).addClass(ClassName.POSITION_STATIC);
                                    }

                                    this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());
                                } // If this is a touch-enabled device we add extra
                                // empty mouseover listeners to the body's immediate children;
                                // only needed because of broken event delegation on iOS
                                // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


                                if ('ontouchstart' in document.documentElement && $$$1(parent).closest(Selector.NAVBAR_NAV).length === 0) {
                                    $$$1(document.body).children().on('mouseover', null, $$$1.noop);
                                }

                                this._element.focus();

                                this._element.setAttribute('aria-expanded', true);

                                $$$1(this._menu).toggleClass(ClassName.SHOW);
                                $$$1(parent).toggleClass(ClassName.SHOW).trigger($$$1.Event(Event.SHOWN, relatedTarget));
                            };

                            _proto.dispose = function dispose() {
                                $$$1.removeData(this._element, DATA_KEY);
                                $$$1(this._element).off(EVENT_KEY);
                                this._element = null;
                                this._menu = null;

                                if (this._popper !== null) {
                                    this._popper.destroy();

                                    this._popper = null;
                                }
                            };

                            _proto.update = function update() {
                                this._inNavbar = this._detectNavbar();

                                if (this._popper !== null) {
                                    this._popper.scheduleUpdate();
                                }
                            }; // Private


                            _proto._addEventListeners = function _addEventListeners() {
                                var _this = this;

                                $$$1(this._element).on(Event.CLICK, function (event) {
                                    event.preventDefault();
                                    event.stopPropagation();

                                    _this.toggle();
                                });
                            };

                            _proto._getConfig = function _getConfig(config) {
                                config = _objectSpread({}, this.constructor.Default, $$$1(this._element).data(), config);
                                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                                return config;
                            };

                            _proto._getMenuElement = function _getMenuElement() {
                                if (!this._menu) {
                                    var parent = Dropdown._getParentFromElement(this._element);

                                    this._menu = $$$1(parent).find(Selector.MENU)[0];
                                }

                                return this._menu;
                            };

                            _proto._getPlacement = function _getPlacement() {
                                var $parentDropdown = $$$1(this._element).parent();
                                var placement = AttachmentMap.BOTTOM; // Handle dropup

                                if ($parentDropdown.hasClass(ClassName.DROPUP)) {
                                    placement = AttachmentMap.TOP;

                                    if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                                        placement = AttachmentMap.TOPEND;
                                    }
                                } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {
                                    placement = AttachmentMap.RIGHT;
                                } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {
                                    placement = AttachmentMap.LEFT;
                                } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                                    placement = AttachmentMap.BOTTOMEND;
                                }

                                return placement;
                            };

                            _proto._detectNavbar = function _detectNavbar() {
                                return $$$1(this._element).closest('.navbar').length > 0;
                            };

                            _proto._getPopperConfig = function _getPopperConfig() {
                                var _this2 = this;

                                var offsetConf = {};

                                if (typeof this._config.offset === 'function') {
                                    offsetConf.fn = function (data) {
                                        data.offsets = _objectSpread({}, data.offsets, _this2._config.offset(data.offsets) || {});
                                        return data;
                                    };
                                } else {
                                    offsetConf.offset = this._config.offset;
                                }

                                var popperConfig = {
                                    placement: this._getPlacement(),
                                    modifiers: {
                                        offset: offsetConf,
                                        flip: {
                                            enabled: this._config.flip
                                        },
                                        preventOverflow: {
                                            boundariesElement: this._config.boundary
                                        }
                                    } // Disable Popper.js if we have a static display

                                };

                                if (this._config.display === 'static') {
                                    popperConfig.modifiers.applyStyle = {
                                        enabled: false
                                    };
                                }

                                return popperConfig;
                            }; // Static


                            Dropdown._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var data = $$$1(this).data(DATA_KEY);

                                    var _config = typeof config === 'object' ? config : null;

                                    if (!data) {
                                        data = new Dropdown(this, _config);
                                        $$$1(this).data(DATA_KEY, data);
                                    }

                                    if (typeof config === 'string') {
                                        if (typeof data[config] === 'undefined') {
                                            throw new TypeError("No method named \"" + config + "\"");
                                        }

                                        data[config]();
                                    }
                                });
                            };

                            Dropdown._clearMenus = function _clearMenus(event) {
                                if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
                                    return;
                                }

                                var toggles = $$$1.makeArray($$$1(Selector.DATA_TOGGLE));

                                for (var i = 0; i < toggles.length; i++) {
                                    var parent = Dropdown._getParentFromElement(toggles[i]);

                                    var context = $$$1(toggles[i]).data(DATA_KEY);
                                    var relatedTarget = {
                                        relatedTarget: toggles[i]
                                    };

                                    if (!context) {
                                        continue;
                                    }

                                    var dropdownMenu = context._menu;

                                    if (!$$$1(parent).hasClass(ClassName.SHOW)) {
                                        continue;
                                    }

                                    if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {
                                        continue;
                                    }

                                    var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);
                                    $$$1(parent).trigger(hideEvent);

                                    if (hideEvent.isDefaultPrevented()) {
                                        continue;
                                    } // If this is a touch-enabled device we remove the extra
                                    // empty mouseover listeners we added for iOS support


                                    if ('ontouchstart' in document.documentElement) {
                                        $$$1(document.body).children().off('mouseover', null, $$$1.noop);
                                    }

                                    toggles[i].setAttribute('aria-expanded', 'false');
                                    $$$1(dropdownMenu).removeClass(ClassName.SHOW);
                                    $$$1(parent).removeClass(ClassName.SHOW).trigger($$$1.Event(Event.HIDDEN, relatedTarget));
                                }
                            };

                            Dropdown._getParentFromElement = function _getParentFromElement(element) {
                                var parent;
                                var selector = Util.getSelectorFromElement(element);

                                if (selector) {
                                    parent = $$$1(selector)[0];
                                }

                                return parent || element.parentNode;
                            }; // eslint-disable-next-line complexity


                            Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
                                // If not input/textarea:
                                //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
                                // If input/textarea:
                                //  - If space key => not a dropdown command
                                //  - If key is other than escape
                                //    - If key is not up or down => not a dropdown command
                                //    - If trigger inside the menu => not a dropdown command
                                if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $$$1(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
                                    return;
                                }

                                event.preventDefault();
                                event.stopPropagation();

                                if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {
                                    return;
                                }

                                var parent = Dropdown._getParentFromElement(this);

                                var isActive = $$$1(parent).hasClass(ClassName.SHOW);

                                if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
                                    if (event.which === ESCAPE_KEYCODE) {
                                        var toggle = $$$1(parent).find(Selector.DATA_TOGGLE)[0];
                                        $$$1(toggle).trigger('focus');
                                    }

                                    $$$1(this).trigger('click');
                                    return;
                                }

                                var items = $$$1(parent).find(Selector.VISIBLE_ITEMS).get();

                                if (items.length === 0) {
                                    return;
                                }

                                var index = items.indexOf(event.target);

                                if (event.which === ARROW_UP_KEYCODE && index > 0) {
                                    // Up
                                    index--;
                                }

                                if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
                                    // Down
                                    index++;
                                }

                                if (index < 0) {
                                    index = 0;
                                }

                                items[index].focus();
                            };

                            _createClass(Dropdown, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }, {
                                key: "Default",
                                get: function get() {
                                    return Default;
                                }
                            }, {
                                key: "DefaultType",
                                get: function get() {
                                    return DefaultType;
                                }
                            }]);

                            return Dropdown;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * Data Api implementation
                     * ------------------------------------------------------------------------
                     */


                    $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
                        event.preventDefault();
                        event.stopPropagation();

                        Dropdown._jQueryInterface.call($$$1(this), 'toggle');
                    }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
                        e.stopPropagation();
                    });
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */

                    $$$1.fn[NAME] = Dropdown._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Dropdown;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Dropdown._jQueryInterface;
                    };

                    return Dropdown;
                }($, Popper);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): modal.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Modal = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'modal';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.modal';
                    var EVENT_KEY = "." + DATA_KEY;
                    var DATA_API_KEY = '.data-api';
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

                    var Default = {
                        backdrop: true,
                        keyboard: true,
                        focus: true,
                        show: true
                    };
                    var DefaultType = {
                        backdrop: '(boolean|string)',
                        keyboard: 'boolean',
                        focus: 'boolean',
                        show: 'boolean'
                    };
                    var Event = {
                        HIDE: "hide" + EVENT_KEY,
                        HIDDEN: "hidden" + EVENT_KEY,
                        SHOW: "show" + EVENT_KEY,
                        SHOWN: "shown" + EVENT_KEY,
                        FOCUSIN: "focusin" + EVENT_KEY,
                        RESIZE: "resize" + EVENT_KEY,
                        CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
                        KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
                        MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
                        MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
                        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
                    };
                    var ClassName = {
                        SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
                        BACKDROP: 'modal-backdrop',
                        OPEN: 'modal-open',
                        FADE: 'fade',
                        SHOW: 'show'
                    };
                    var Selector = {
                        DIALOG: '.modal-dialog',
                        DATA_TOGGLE: '[data-toggle="modal"]',
                        DATA_DISMISS: '[data-dismiss="modal"]',
                        FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
                        STICKY_CONTENT: '.sticky-top',
                        NAVBAR_TOGGLER: '.navbar-toggler'
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Modal =
                        /*#__PURE__*/
                        function () {
                            function Modal(element, config) {
                                this._config = this._getConfig(config);
                                this._element = element;
                                this._dialog = $$$1(element).find(Selector.DIALOG)[0];
                                this._backdrop = null;
                                this._isShown = false;
                                this._isBodyOverflowing = false;
                                this._ignoreBackdropClick = false;
                                this._scrollbarWidth = 0;
                            } // Getters


                            var _proto = Modal.prototype;

                            // Public
                            _proto.toggle = function toggle(relatedTarget) {
                                return this._isShown ? this.hide() : this.show(relatedTarget);
                            };

                            _proto.show = function show(relatedTarget) {
                                var _this = this;

                                if (this._isTransitioning || this._isShown) {
                                    return;
                                }

                                if ($$$1(this._element).hasClass(ClassName.FADE)) {
                                    this._isTransitioning = true;
                                }

                                var showEvent = $$$1.Event(Event.SHOW, {
                                    relatedTarget: relatedTarget
                                });
                                $$$1(this._element).trigger(showEvent);

                                if (this._isShown || showEvent.isDefaultPrevented()) {
                                    return;
                                }

                                this._isShown = true;

                                this._checkScrollbar();

                                this._setScrollbar();

                                this._adjustDialog();

                                $$$1(document.body).addClass(ClassName.OPEN);

                                this._setEscapeEvent();

                                this._setResizeEvent();

                                $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {
                                    return _this.hide(event);
                                });
                                $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
                                    $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function (event) {
                                        if ($$$1(event.target).is(_this._element)) {
                                            _this._ignoreBackdropClick = true;
                                        }
                                    });
                                });

                                this._showBackdrop(function () {
                                    return _this._showElement(relatedTarget);
                                });
                            };

                            _proto.hide = function hide(event) {
                                var _this2 = this;

                                if (event) {
                                    event.preventDefault();
                                }

                                if (this._isTransitioning || !this._isShown) {
                                    return;
                                }

                                var hideEvent = $$$1.Event(Event.HIDE);
                                $$$1(this._element).trigger(hideEvent);

                                if (!this._isShown || hideEvent.isDefaultPrevented()) {
                                    return;
                                }

                                this._isShown = false;
                                var transition = $$$1(this._element).hasClass(ClassName.FADE);

                                if (transition) {
                                    this._isTransitioning = true;
                                }

                                this._setEscapeEvent();

                                this._setResizeEvent();

                                $$$1(document).off(Event.FOCUSIN);
                                $$$1(this._element).removeClass(ClassName.SHOW);
                                $$$1(this._element).off(Event.CLICK_DISMISS);
                                $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);

                                if (transition) {
                                    var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                                    $$$1(this._element).one(Util.TRANSITION_END, function (event) {
                                        return _this2._hideModal(event);
                                    }).emulateTransitionEnd(transitionDuration);
                                } else {
                                    this._hideModal();
                                }
                            };

                            _proto.dispose = function dispose() {
                                $$$1.removeData(this._element, DATA_KEY);
                                $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);
                                this._config = null;
                                this._element = null;
                                this._dialog = null;
                                this._backdrop = null;
                                this._isShown = null;
                                this._isBodyOverflowing = null;
                                this._ignoreBackdropClick = null;
                                this._scrollbarWidth = null;
                            };

                            _proto.handleUpdate = function handleUpdate() {
                                this._adjustDialog();
                            }; // Private


                            _proto._getConfig = function _getConfig(config) {
                                config = _objectSpread({}, Default, config);
                                Util.typeCheckConfig(NAME, config, DefaultType);
                                return config;
                            };

                            _proto._showElement = function _showElement(relatedTarget) {
                                var _this3 = this;

                                var transition = $$$1(this._element).hasClass(ClassName.FADE);

                                if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                                    // Don't move modal's DOM position
                                    document.body.appendChild(this._element);
                                }

                                this._element.style.display = 'block';

                                this._element.removeAttribute('aria-hidden');

                                this._element.scrollTop = 0;

                                if (transition) {
                                    Util.reflow(this._element);
                                }

                                $$$1(this._element).addClass(ClassName.SHOW);

                                if (this._config.focus) {
                                    this._enforceFocus();
                                }

                                var shownEvent = $$$1.Event(Event.SHOWN, {
                                    relatedTarget: relatedTarget
                                });

                                var transitionComplete = function transitionComplete() {
                                    if (_this3._config.focus) {
                                        _this3._element.focus();
                                    }

                                    _this3._isTransitioning = false;
                                    $$$1(_this3._element).trigger(shownEvent);
                                };

                                if (transition) {
                                    var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                                    $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
                                } else {
                                    transitionComplete();
                                }
                            };

                            _proto._enforceFocus = function _enforceFocus() {
                                var _this4 = this;

                                $$$1(document).off(Event.FOCUSIN) // Guard against infinite focus loop
                                    .on(Event.FOCUSIN, function (event) {
                                        if (document !== event.target && _this4._element !== event.target && $$$1(_this4._element).has(event.target).length === 0) {
                                            _this4._element.focus();
                                        }
                                    });
                            };

                            _proto._setEscapeEvent = function _setEscapeEvent() {
                                var _this5 = this;

                                if (this._isShown && this._config.keyboard) {
                                    $$$1(this._element).on(Event.KEYDOWN_DISMISS, function (event) {
                                        if (event.which === ESCAPE_KEYCODE) {
                                            event.preventDefault();

                                            _this5.hide();
                                        }
                                    });
                                } else if (!this._isShown) {
                                    $$$1(this._element).off(Event.KEYDOWN_DISMISS);
                                }
                            };

                            _proto._setResizeEvent = function _setResizeEvent() {
                                var _this6 = this;

                                if (this._isShown) {
                                    $$$1(window).on(Event.RESIZE, function (event) {
                                        return _this6.handleUpdate(event);
                                    });
                                } else {
                                    $$$1(window).off(Event.RESIZE);
                                }
                            };

                            _proto._hideModal = function _hideModal() {
                                var _this7 = this;

                                this._element.style.display = 'none';

                                this._element.setAttribute('aria-hidden', true);

                                this._isTransitioning = false;

                                this._showBackdrop(function () {
                                    $$$1(document.body).removeClass(ClassName.OPEN);

                                    _this7._resetAdjustments();

                                    _this7._resetScrollbar();

                                    $$$1(_this7._element).trigger(Event.HIDDEN);
                                });
                            };

                            _proto._removeBackdrop = function _removeBackdrop() {
                                if (this._backdrop) {
                                    $$$1(this._backdrop).remove();
                                    this._backdrop = null;
                                }
                            };

                            _proto._showBackdrop = function _showBackdrop(callback) {
                                var _this8 = this;

                                var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';

                                if (this._isShown && this._config.backdrop) {
                                    this._backdrop = document.createElement('div');
                                    this._backdrop.className = ClassName.BACKDROP;

                                    if (animate) {
                                        $$$1(this._backdrop).addClass(animate);
                                    }

                                    $$$1(this._backdrop).appendTo(document.body);
                                    $$$1(this._element).on(Event.CLICK_DISMISS, function (event) {
                                        if (_this8._ignoreBackdropClick) {
                                            _this8._ignoreBackdropClick = false;
                                            return;
                                        }

                                        if (event.target !== event.currentTarget) {
                                            return;
                                        }

                                        if (_this8._config.backdrop === 'static') {
                                            _this8._element.focus();
                                        } else {
                                            _this8.hide();
                                        }
                                    });

                                    if (animate) {
                                        Util.reflow(this._backdrop);
                                    }

                                    $$$1(this._backdrop).addClass(ClassName.SHOW);

                                    if (!callback) {
                                        return;
                                    }

                                    if (!animate) {
                                        callback();
                                        return;
                                    }

                                    var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                                    $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
                                } else if (!this._isShown && this._backdrop) {
                                    $$$1(this._backdrop).removeClass(ClassName.SHOW);

                                    var callbackRemove = function callbackRemove() {
                                        _this8._removeBackdrop();

                                        if (callback) {
                                            callback();
                                        }
                                    };

                                    if ($$$1(this._element).hasClass(ClassName.FADE)) {
                                        var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);

                                        $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
                                    } else {
                                        callbackRemove();
                                    }
                                } else if (callback) {
                                    callback();
                                }
                            }; // ----------------------------------------------------------------------
                            // the following methods are used to handle overflowing modals
                            // todo (fat): these should probably be refactored out of modal.js
                            // ----------------------------------------------------------------------


                            _proto._adjustDialog = function _adjustDialog() {
                                var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

                                if (!this._isBodyOverflowing && isModalOverflowing) {
                                    this._element.style.paddingLeft = this._scrollbarWidth + "px";
                                }

                                if (this._isBodyOverflowing && !isModalOverflowing) {
                                    this._element.style.paddingRight = this._scrollbarWidth + "px";
                                }
                            };

                            _proto._resetAdjustments = function _resetAdjustments() {
                                this._element.style.paddingLeft = '';
                                this._element.style.paddingRight = '';
                            };

                            _proto._checkScrollbar = function _checkScrollbar() {
                                var rect = document.body.getBoundingClientRect();
                                this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
                                this._scrollbarWidth = this._getScrollbarWidth();
                            };

                            _proto._setScrollbar = function _setScrollbar() {
                                var _this9 = this;

                                if (this._isBodyOverflowing) {
                                    // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
                                    //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
                                    // Adjust fixed content padding
                                    $$$1(Selector.FIXED_CONTENT).each(function (index, element) {
                                        var actualPadding = $$$1(element)[0].style.paddingRight;
                                        var calculatedPadding = $$$1(element).css('padding-right');
                                        $$$1(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + "px");
                                    }); // Adjust sticky content margin

                                    $$$1(Selector.STICKY_CONTENT).each(function (index, element) {
                                        var actualMargin = $$$1(element)[0].style.marginRight;
                                        var calculatedMargin = $$$1(element).css('margin-right');
                                        $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + "px");
                                    }); // Adjust navbar-toggler margin

                                    $$$1(Selector.NAVBAR_TOGGLER).each(function (index, element) {
                                        var actualMargin = $$$1(element)[0].style.marginRight;
                                        var calculatedMargin = $$$1(element).css('margin-right');
                                        $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) + _this9._scrollbarWidth + "px");
                                    }); // Adjust body padding

                                    var actualPadding = document.body.style.paddingRight;
                                    var calculatedPadding = $$$1(document.body).css('padding-right');
                                    $$$1(document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
                                }
                            };

                            _proto._resetScrollbar = function _resetScrollbar() {
                                // Restore fixed content padding
                                $$$1(Selector.FIXED_CONTENT).each(function (index, element) {
                                    var padding = $$$1(element).data('padding-right');

                                    if (typeof padding !== 'undefined') {
                                        $$$1(element).css('padding-right', padding).removeData('padding-right');
                                    }
                                }); // Restore sticky content and navbar-toggler margin

                                $$$1(Selector.STICKY_CONTENT + ", " + Selector.NAVBAR_TOGGLER).each(function (index, element) {
                                    var margin = $$$1(element).data('margin-right');

                                    if (typeof margin !== 'undefined') {
                                        $$$1(element).css('margin-right', margin).removeData('margin-right');
                                    }
                                }); // Restore body padding

                                var padding = $$$1(document.body).data('padding-right');

                                if (typeof padding !== 'undefined') {
                                    $$$1(document.body).css('padding-right', padding).removeData('padding-right');
                                }
                            };

                            _proto._getScrollbarWidth = function _getScrollbarWidth() {
                                // thx d.walsh
                                var scrollDiv = document.createElement('div');
                                scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
                                document.body.appendChild(scrollDiv);
                                var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
                                document.body.removeChild(scrollDiv);
                                return scrollbarWidth;
                            }; // Static


                            Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
                                return this.each(function () {
                                    var data = $$$1(this).data(DATA_KEY);

                                    var _config = _objectSpread({}, Default, $$$1(this).data(), typeof config === 'object' && config ? config : {});

                                    if (!data) {
                                        data = new Modal(this, _config);
                                        $$$1(this).data(DATA_KEY, data);
                                    }

                                    if (typeof config === 'string') {
                                        if (typeof data[config] === 'undefined') {
                                            throw new TypeError("No method named \"" + config + "\"");
                                        }

                                        data[config](relatedTarget);
                                    } else if (_config.show) {
                                        data.show(relatedTarget);
                                    }
                                });
                            };

                            _createClass(Modal, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }, {
                                key: "Default",
                                get: function get() {
                                    return Default;
                                }
                            }]);

                            return Modal;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * Data Api implementation
                     * ------------------------------------------------------------------------
                     */


                    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
                        var _this10 = this;

                        var target;
                        var selector = Util.getSelectorFromElement(this);

                        if (selector) {
                            target = $$$1(selector)[0];
                        }

                        var config = $$$1(target).data(DATA_KEY) ? 'toggle' : _objectSpread({}, $$$1(target).data(), $$$1(this).data());

                        if (this.tagName === 'A' || this.tagName === 'AREA') {
                            event.preventDefault();
                        }

                        var $target = $$$1(target).one(Event.SHOW, function (showEvent) {
                            if (showEvent.isDefaultPrevented()) {
                                // Only register focus restorer if modal will actually get shown
                                return;
                            }

                            $target.one(Event.HIDDEN, function () {
                                if ($$$1(_this10).is(':visible')) {
                                    _this10.focus();
                                }
                            });
                        });

                        Modal._jQueryInterface.call($$$1(target), config, this);
                    });
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */

                    $$$1.fn[NAME] = Modal._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Modal;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Modal._jQueryInterface;
                    };

                    return Modal;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): tooltip.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Tooltip = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'tooltip';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.tooltip';
                    var EVENT_KEY = "." + DATA_KEY;
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var CLASS_PREFIX = 'bs-tooltip';
                    var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
                    var DefaultType = {
                        animation: 'boolean',
                        template: 'string',
                        title: '(string|element|function)',
                        trigger: 'string',
                        delay: '(number|object)',
                        html: 'boolean',
                        selector: '(string|boolean)',
                        placement: '(string|function)',
                        offset: '(number|string)',
                        container: '(string|element|boolean)',
                        fallbackPlacement: '(string|array)',
                        boundary: '(string|element)'
                    };
                    var AttachmentMap = {
                        AUTO: 'auto',
                        TOP: 'top',
                        RIGHT: 'right',
                        BOTTOM: 'bottom',
                        LEFT: 'left'
                    };
                    var Default = {
                        animation: true,
                        template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
                        trigger: 'hover focus',
                        title: '',
                        delay: 0,
                        html: false,
                        selector: false,
                        placement: 'top',
                        offset: 0,
                        container: false,
                        fallbackPlacement: 'flip',
                        boundary: 'scrollParent'
                    };
                    var HoverState = {
                        SHOW: 'show',
                        OUT: 'out'
                    };
                    var Event = {
                        HIDE: "hide" + EVENT_KEY,
                        HIDDEN: "hidden" + EVENT_KEY,
                        SHOW: "show" + EVENT_KEY,
                        SHOWN: "shown" + EVENT_KEY,
                        INSERTED: "inserted" + EVENT_KEY,
                        CLICK: "click" + EVENT_KEY,
                        FOCUSIN: "focusin" + EVENT_KEY,
                        FOCUSOUT: "focusout" + EVENT_KEY,
                        MOUSEENTER: "mouseenter" + EVENT_KEY,
                        MOUSELEAVE: "mouseleave" + EVENT_KEY
                    };
                    var ClassName = {
                        FADE: 'fade',
                        SHOW: 'show'
                    };
                    var Selector = {
                        TOOLTIP: '.tooltip',
                        TOOLTIP_INNER: '.tooltip-inner',
                        ARROW: '.arrow'
                    };
                    var Trigger = {
                        HOVER: 'hover',
                        FOCUS: 'focus',
                        CLICK: 'click',
                        MANUAL: 'manual'
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Tooltip =
                        /*#__PURE__*/
                        function () {
                            function Tooltip(element, config) {
                                /**
                                 * Check for Popper dependency
                                 * Popper - https://popper.js.org
                                 */
                                if (typeof Popper === 'undefined') {
                                    throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)');
                                } // private


                                this._isEnabled = true;
                                this._timeout = 0;
                                this._hoverState = '';
                                this._activeTrigger = {};
                                this._popper = null; // Protected

                                this.element = element;
                                this.config = this._getConfig(config);
                                this.tip = null;

                                this._setListeners();
                            } // Getters


                            var _proto = Tooltip.prototype;

                            // Public
                            _proto.enable = function enable() {
                                this._isEnabled = true;
                            };

                            _proto.disable = function disable() {
                                this._isEnabled = false;
                            };

                            _proto.toggleEnabled = function toggleEnabled() {
                                this._isEnabled = !this._isEnabled;
                            };

                            _proto.toggle = function toggle(event) {
                                if (!this._isEnabled) {
                                    return;
                                }

                                if (event) {
                                    var dataKey = this.constructor.DATA_KEY;
                                    var context = $$$1(event.currentTarget).data(dataKey);

                                    if (!context) {
                                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                                        $$$1(event.currentTarget).data(dataKey, context);
                                    }

                                    context._activeTrigger.click = !context._activeTrigger.click;

                                    if (context._isWithActiveTrigger()) {
                                        context._enter(null, context);
                                    } else {
                                        context._leave(null, context);
                                    }
                                } else {
                                    if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {
                                        this._leave(null, this);

                                        return;
                                    }

                                    this._enter(null, this);
                                }
                            };

                            _proto.dispose = function dispose() {
                                clearTimeout(this._timeout);
                                $$$1.removeData(this.element, this.constructor.DATA_KEY);
                                $$$1(this.element).off(this.constructor.EVENT_KEY);
                                $$$1(this.element).closest('.modal').off('hide.bs.modal');

                                if (this.tip) {
                                    $$$1(this.tip).remove();
                                }

                                this._isEnabled = null;
                                this._timeout = null;
                                this._hoverState = null;
                                this._activeTrigger = null;

                                if (this._popper !== null) {
                                    this._popper.destroy();
                                }

                                this._popper = null;
                                this.element = null;
                                this.config = null;
                                this.tip = null;
                            };

                            _proto.show = function show() {
                                var _this = this;

                                if ($$$1(this.element).css('display') === 'none') {
                                    throw new Error('Please use show on visible elements');
                                }

                                var showEvent = $$$1.Event(this.constructor.Event.SHOW);

                                if (this.isWithContent() && this._isEnabled) {
                                    $$$1(this.element).trigger(showEvent);
                                    var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);

                                    if (showEvent.isDefaultPrevented() || !isInTheDom) {
                                        return;
                                    }

                                    var tip = this.getTipElement();
                                    var tipId = Util.getUID(this.constructor.NAME);
                                    tip.setAttribute('id', tipId);
                                    this.element.setAttribute('aria-describedby', tipId);
                                    this.setContent();

                                    if (this.config.animation) {
                                        $$$1(tip).addClass(ClassName.FADE);
                                    }

                                    var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

                                    var attachment = this._getAttachment(placement);

                                    this.addAttachmentClass(attachment);
                                    var container = this.config.container === false ? document.body : $$$1(this.config.container);
                                    $$$1(tip).data(this.constructor.DATA_KEY, this);

                                    if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {
                                        $$$1(tip).appendTo(container);
                                    }

                                    $$$1(this.element).trigger(this.constructor.Event.INSERTED);
                                    this._popper = new Popper(this.element, tip, {
                                        placement: attachment,
                                        modifiers: {
                                            offset: {
                                                offset: this.config.offset
                                            },
                                            flip: {
                                                behavior: this.config.fallbackPlacement
                                            },
                                            arrow: {
                                                element: Selector.ARROW
                                            },
                                            preventOverflow: {
                                                boundariesElement: this.config.boundary
                                            }
                                        },
                                        onCreate: function onCreate(data) {
                                            if (data.originalPlacement !== data.placement) {
                                                _this._handlePopperPlacementChange(data);
                                            }
                                        },
                                        onUpdate: function onUpdate(data) {
                                            _this._handlePopperPlacementChange(data);
                                        }
                                    });
                                    $$$1(tip).addClass(ClassName.SHOW); // If this is a touch-enabled device we add extra
                                    // empty mouseover listeners to the body's immediate children;
                                    // only needed because of broken event delegation on iOS
                                    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

                                    if ('ontouchstart' in document.documentElement) {
                                        $$$1(document.body).children().on('mouseover', null, $$$1.noop);
                                    }

                                    var complete = function complete() {
                                        if (_this.config.animation) {
                                            _this._fixTransition();
                                        }

                                        var prevHoverState = _this._hoverState;
                                        _this._hoverState = null;
                                        $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);

                                        if (prevHoverState === HoverState.OUT) {
                                            _this._leave(null, _this);
                                        }
                                    };

                                    if ($$$1(this.tip).hasClass(ClassName.FADE)) {
                                        var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
                                        $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                                    } else {
                                        complete();
                                    }
                                }
                            };

                            _proto.hide = function hide(callback) {
                                var _this2 = this;

                                var tip = this.getTipElement();
                                var hideEvent = $$$1.Event(this.constructor.Event.HIDE);

                                var complete = function complete() {
                                    if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
                                        tip.parentNode.removeChild(tip);
                                    }

                                    _this2._cleanTipClass();

                                    _this2.element.removeAttribute('aria-describedby');

                                    $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

                                    if (_this2._popper !== null) {
                                        _this2._popper.destroy();
                                    }

                                    if (callback) {
                                        callback();
                                    }
                                };

                                $$$1(this.element).trigger(hideEvent);

                                if (hideEvent.isDefaultPrevented()) {
                                    return;
                                }

                                $$$1(tip).removeClass(ClassName.SHOW); // If this is a touch-enabled device we remove the extra
                                // empty mouseover listeners we added for iOS support

                                if ('ontouchstart' in document.documentElement) {
                                    $$$1(document.body).children().off('mouseover', null, $$$1.noop);
                                }

                                this._activeTrigger[Trigger.CLICK] = false;
                                this._activeTrigger[Trigger.FOCUS] = false;
                                this._activeTrigger[Trigger.HOVER] = false;

                                if ($$$1(this.tip).hasClass(ClassName.FADE)) {
                                    var transitionDuration = Util.getTransitionDurationFromElement(tip);
                                    $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                                } else {
                                    complete();
                                }

                                this._hoverState = '';
                            };

                            _proto.update = function update() {
                                if (this._popper !== null) {
                                    this._popper.scheduleUpdate();
                                }
                            }; // Protected


                            _proto.isWithContent = function isWithContent() {
                                return Boolean(this.getTitle());
                            };

                            _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                                $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
                            };

                            _proto.getTipElement = function getTipElement() {
                                this.tip = this.tip || $$$1(this.config.template)[0];
                                return this.tip;
                            };

                            _proto.setContent = function setContent() {
                                var $tip = $$$1(this.getTipElement());
                                this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
                                $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
                            };

                            _proto.setElementContent = function setElementContent($element, content) {
                                var html = this.config.html;

                                if (typeof content === 'object' && (content.nodeType || content.jquery)) {
                                    // Content is a DOM node or a jQuery
                                    if (html) {
                                        if (!$$$1(content).parent().is($element)) {
                                            $element.empty().append(content);
                                        }
                                    } else {
                                        $element.text($$$1(content).text());
                                    }
                                } else {
                                    $element[html ? 'html' : 'text'](content);
                                }
                            };

                            _proto.getTitle = function getTitle() {
                                var title = this.element.getAttribute('data-original-title');

                                if (!title) {
                                    title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
                                }

                                return title;
                            }; // Private


                            _proto._getAttachment = function _getAttachment(placement) {
                                return AttachmentMap[placement.toUpperCase()];
                            };

                            _proto._setListeners = function _setListeners() {
                                var _this3 = this;

                                var triggers = this.config.trigger.split(' ');
                                triggers.forEach(function (trigger) {
                                    if (trigger === 'click') {
                                        $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function (event) {
                                            return _this3.toggle(event);
                                        });
                                    } else if (trigger !== Trigger.MANUAL) {
                                        var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;
                                        var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;
                                        $$$1(_this3.element).on(eventIn, _this3.config.selector, function (event) {
                                            return _this3._enter(event);
                                        }).on(eventOut, _this3.config.selector, function (event) {
                                            return _this3._leave(event);
                                        });
                                    }

                                    $$$1(_this3.element).closest('.modal').on('hide.bs.modal', function () {
                                        return _this3.hide();
                                    });
                                });

                                if (this.config.selector) {
                                    this.config = _objectSpread({}, this.config, {
                                        trigger: 'manual',
                                        selector: ''
                                    });
                                } else {
                                    this._fixTitle();
                                }
                            };

                            _proto._fixTitle = function _fixTitle() {
                                var titleType = typeof this.element.getAttribute('data-original-title');

                                if (this.element.getAttribute('title') || titleType !== 'string') {
                                    this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
                                    this.element.setAttribute('title', '');
                                }
                            };

                            _proto._enter = function _enter(event, context) {
                                var dataKey = this.constructor.DATA_KEY;
                                context = context || $$$1(event.currentTarget).data(dataKey);

                                if (!context) {
                                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                                    $$$1(event.currentTarget).data(dataKey, context);
                                }

                                if (event) {
                                    context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
                                }

                                if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
                                    context._hoverState = HoverState.SHOW;
                                    return;
                                }

                                clearTimeout(context._timeout);
                                context._hoverState = HoverState.SHOW;

                                if (!context.config.delay || !context.config.delay.show) {
                                    context.show();
                                    return;
                                }

                                context._timeout = setTimeout(function () {
                                    if (context._hoverState === HoverState.SHOW) {
                                        context.show();
                                    }
                                }, context.config.delay.show);
                            };

                            _proto._leave = function _leave(event, context) {
                                var dataKey = this.constructor.DATA_KEY;
                                context = context || $$$1(event.currentTarget).data(dataKey);

                                if (!context) {
                                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                                    $$$1(event.currentTarget).data(dataKey, context);
                                }

                                if (event) {
                                    context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
                                }

                                if (context._isWithActiveTrigger()) {
                                    return;
                                }

                                clearTimeout(context._timeout);
                                context._hoverState = HoverState.OUT;

                                if (!context.config.delay || !context.config.delay.hide) {
                                    context.hide();
                                    return;
                                }

                                context._timeout = setTimeout(function () {
                                    if (context._hoverState === HoverState.OUT) {
                                        context.hide();
                                    }
                                }, context.config.delay.hide);
                            };

                            _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
                                for (var trigger in this._activeTrigger) {
                                    if (this._activeTrigger[trigger]) {
                                        return true;
                                    }
                                }

                                return false;
                            };

                            _proto._getConfig = function _getConfig(config) {
                                config = _objectSpread({}, this.constructor.Default, $$$1(this.element).data(), typeof config === 'object' && config ? config : {});

                                if (typeof config.delay === 'number') {
                                    config.delay = {
                                        show: config.delay,
                                        hide: config.delay
                                    };
                                }

                                if (typeof config.title === 'number') {
                                    config.title = config.title.toString();
                                }

                                if (typeof config.content === 'number') {
                                    config.content = config.content.toString();
                                }

                                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                                return config;
                            };

                            _proto._getDelegateConfig = function _getDelegateConfig() {
                                var config = {};

                                if (this.config) {
                                    for (var key in this.config) {
                                        if (this.constructor.Default[key] !== this.config[key]) {
                                            config[key] = this.config[key];
                                        }
                                    }
                                }

                                return config;
                            };

                            _proto._cleanTipClass = function _cleanTipClass() {
                                var $tip = $$$1(this.getTipElement());
                                var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

                                if (tabClass !== null && tabClass.length > 0) {
                                    $tip.removeClass(tabClass.join(''));
                                }
                            };

                            _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {
                                this._cleanTipClass();

                                this.addAttachmentClass(this._getAttachment(data.placement));
                            };

                            _proto._fixTransition = function _fixTransition() {
                                var tip = this.getTipElement();
                                var initConfigAnimation = this.config.animation;

                                if (tip.getAttribute('x-placement') !== null) {
                                    return;
                                }

                                $$$1(tip).removeClass(ClassName.FADE);
                                this.config.animation = false;
                                this.hide();
                                this.show();
                                this.config.animation = initConfigAnimation;
                            }; // Static


                            Tooltip._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var data = $$$1(this).data(DATA_KEY);

                                    var _config = typeof config === 'object' && config;

                                    if (!data && /dispose|hide/.test(config)) {
                                        return;
                                    }

                                    if (!data) {
                                        data = new Tooltip(this, _config);
                                        $$$1(this).data(DATA_KEY, data);
                                    }

                                    if (typeof config === 'string') {
                                        if (typeof data[config] === 'undefined') {
                                            throw new TypeError("No method named \"" + config + "\"");
                                        }

                                        data[config]();
                                    }
                                });
                            };

                            _createClass(Tooltip, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }, {
                                key: "Default",
                                get: function get() {
                                    return Default;
                                }
                            }, {
                                key: "NAME",
                                get: function get() {
                                    return NAME;
                                }
                            }, {
                                key: "DATA_KEY",
                                get: function get() {
                                    return DATA_KEY;
                                }
                            }, {
                                key: "Event",
                                get: function get() {
                                    return Event;
                                }
                            }, {
                                key: "EVENT_KEY",
                                get: function get() {
                                    return EVENT_KEY;
                                }
                            }, {
                                key: "DefaultType",
                                get: function get() {
                                    return DefaultType;
                                }
                            }]);

                            return Tooltip;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */


                    $$$1.fn[NAME] = Tooltip._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Tooltip;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Tooltip._jQueryInterface;
                    };

                    return Tooltip;
                }($, Popper);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): popover.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Popover = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'popover';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.popover';
                    var EVENT_KEY = "." + DATA_KEY;
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var CLASS_PREFIX = 'bs-popover';
                    var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');

                    var Default = _objectSpread({}, Tooltip.Default, {
                        placement: 'right',
                        trigger: 'click',
                        content: '',
                        template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
                    });

                    var DefaultType = _objectSpread({}, Tooltip.DefaultType, {
                        content: '(string|element|function)'
                    });

                    var ClassName = {
                        FADE: 'fade',
                        SHOW: 'show'
                    };
                    var Selector = {
                        TITLE: '.popover-header',
                        CONTENT: '.popover-body'
                    };
                    var Event = {
                        HIDE: "hide" + EVENT_KEY,
                        HIDDEN: "hidden" + EVENT_KEY,
                        SHOW: "show" + EVENT_KEY,
                        SHOWN: "shown" + EVENT_KEY,
                        INSERTED: "inserted" + EVENT_KEY,
                        CLICK: "click" + EVENT_KEY,
                        FOCUSIN: "focusin" + EVENT_KEY,
                        FOCUSOUT: "focusout" + EVENT_KEY,
                        MOUSEENTER: "mouseenter" + EVENT_KEY,
                        MOUSELEAVE: "mouseleave" + EVENT_KEY
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Popover =
                        /*#__PURE__*/
                        function (_Tooltip) {
                            _inheritsLoose(Popover, _Tooltip);

                            function Popover() {
                                return _Tooltip.apply(this, arguments) || this;
                            }

                            var _proto = Popover.prototype;

                            // Overrides
                            _proto.isWithContent = function isWithContent() {
                                return this.getTitle() || this._getContent();
                            };

                            _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                                $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
                            };

                            _proto.getTipElement = function getTipElement() {
                                this.tip = this.tip || $$$1(this.config.template)[0];
                                return this.tip;
                            };

                            _proto.setContent = function setContent() {
                                var $tip = $$$1(this.getTipElement()); // We use append for html objects to maintain js events

                                this.setElementContent($tip.find(Selector.TITLE), this.getTitle());

                                var content = this._getContent();

                                if (typeof content === 'function') {
                                    content = content.call(this.element);
                                }

                                this.setElementContent($tip.find(Selector.CONTENT), content);
                                $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
                            }; // Private


                            _proto._getContent = function _getContent() {
                                return this.element.getAttribute('data-content') || this.config.content;
                            };

                            _proto._cleanTipClass = function _cleanTipClass() {
                                var $tip = $$$1(this.getTipElement());
                                var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

                                if (tabClass !== null && tabClass.length > 0) {
                                    $tip.removeClass(tabClass.join(''));
                                }
                            }; // Static


                            Popover._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var data = $$$1(this).data(DATA_KEY);

                                    var _config = typeof config === 'object' ? config : null;

                                    if (!data && /destroy|hide/.test(config)) {
                                        return;
                                    }

                                    if (!data) {
                                        data = new Popover(this, _config);
                                        $$$1(this).data(DATA_KEY, data);
                                    }

                                    if (typeof config === 'string') {
                                        if (typeof data[config] === 'undefined') {
                                            throw new TypeError("No method named \"" + config + "\"");
                                        }

                                        data[config]();
                                    }
                                });
                            };

                            _createClass(Popover, null, [{
                                key: "VERSION",
                                // Getters
                                get: function get() {
                                    return VERSION;
                                }
                            }, {
                                key: "Default",
                                get: function get() {
                                    return Default;
                                }
                            }, {
                                key: "NAME",
                                get: function get() {
                                    return NAME;
                                }
                            }, {
                                key: "DATA_KEY",
                                get: function get() {
                                    return DATA_KEY;
                                }
                            }, {
                                key: "Event",
                                get: function get() {
                                    return Event;
                                }
                            }, {
                                key: "EVENT_KEY",
                                get: function get() {
                                    return EVENT_KEY;
                                }
                            }, {
                                key: "DefaultType",
                                get: function get() {
                                    return DefaultType;
                                }
                            }]);

                            return Popover;
                        }(Tooltip);
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */


                    $$$1.fn[NAME] = Popover._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Popover;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Popover._jQueryInterface;
                    };

                    return Popover;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): scrollspy.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var ScrollSpy = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'scrollspy';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.scrollspy';
                    var EVENT_KEY = "." + DATA_KEY;
                    var DATA_API_KEY = '.data-api';
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var Default = {
                        offset: 10,
                        method: 'auto',
                        target: ''
                    };
                    var DefaultType = {
                        offset: 'number',
                        method: 'string',
                        target: '(string|element)'
                    };
                    var Event = {
                        ACTIVATE: "activate" + EVENT_KEY,
                        SCROLL: "scroll" + EVENT_KEY,
                        LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
                    };
                    var ClassName = {
                        DROPDOWN_ITEM: 'dropdown-item',
                        DROPDOWN_MENU: 'dropdown-menu',
                        ACTIVE: 'active'
                    };
                    var Selector = {
                        DATA_SPY: '[data-spy="scroll"]',
                        ACTIVE: '.active',
                        NAV_LIST_GROUP: '.nav, .list-group',
                        NAV_LINKS: '.nav-link',
                        NAV_ITEMS: '.nav-item',
                        LIST_ITEMS: '.list-group-item',
                        DROPDOWN: '.dropdown',
                        DROPDOWN_ITEMS: '.dropdown-item',
                        DROPDOWN_TOGGLE: '.dropdown-toggle'
                    };
                    var OffsetMethod = {
                        OFFSET: 'offset',
                        POSITION: 'position'
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var ScrollSpy =
                        /*#__PURE__*/
                        function () {
                            function ScrollSpy(element, config) {
                                var _this = this;

                                this._element = element;
                                this._scrollElement = element.tagName === 'BODY' ? window : element;
                                this._config = this._getConfig(config);
                                this._selector = this._config.target + " " + Selector.NAV_LINKS + "," + (this._config.target + " " + Selector.LIST_ITEMS + ",") + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
                                this._offsets = [];
                                this._targets = [];
                                this._activeTarget = null;
                                this._scrollHeight = 0;
                                $$$1(this._scrollElement).on(Event.SCROLL, function (event) {
                                    return _this._process(event);
                                });
                                this.refresh();

                                this._process();
                            } // Getters


                            var _proto = ScrollSpy.prototype;

                            // Public
                            _proto.refresh = function refresh() {
                                var _this2 = this;

                                var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
                                var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
                                var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
                                this._offsets = [];
                                this._targets = [];
                                this._scrollHeight = this._getScrollHeight();
                                var targets = $$$1.makeArray($$$1(this._selector));
                                targets.map(function (element) {
                                    var target;
                                    var targetSelector = Util.getSelectorFromElement(element);

                                    if (targetSelector) {
                                        target = $$$1(targetSelector)[0];
                                    }

                                    if (target) {
                                        var targetBCR = target.getBoundingClientRect();

                                        if (targetBCR.width || targetBCR.height) {
                                            // TODO (fat): remove sketch reliance on jQuery position/offset
                                            return [$$$1(target)[offsetMethod]().top + offsetBase, targetSelector];
                                        }
                                    }

                                    return null;
                                }).filter(function (item) {
                                    return item;
                                }).sort(function (a, b) {
                                    return a[0] - b[0];
                                }).forEach(function (item) {
                                    _this2._offsets.push(item[0]);

                                    _this2._targets.push(item[1]);
                                });
                            };

                            _proto.dispose = function dispose() {
                                $$$1.removeData(this._element, DATA_KEY);
                                $$$1(this._scrollElement).off(EVENT_KEY);
                                this._element = null;
                                this._scrollElement = null;
                                this._config = null;
                                this._selector = null;
                                this._offsets = null;
                                this._targets = null;
                                this._activeTarget = null;
                                this._scrollHeight = null;
                            }; // Private


                            _proto._getConfig = function _getConfig(config) {
                                config = _objectSpread({}, Default, typeof config === 'object' && config ? config : {});

                                if (typeof config.target !== 'string') {
                                    var id = $$$1(config.target).attr('id');

                                    if (!id) {
                                        id = Util.getUID(NAME);
                                        $$$1(config.target).attr('id', id);
                                    }

                                    config.target = "#" + id;
                                }

                                Util.typeCheckConfig(NAME, config, DefaultType);
                                return config;
                            };

                            _proto._getScrollTop = function _getScrollTop() {
                                return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
                            };

                            _proto._getScrollHeight = function _getScrollHeight() {
                                return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
                            };

                            _proto._getOffsetHeight = function _getOffsetHeight() {
                                return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
                            };

                            _proto._process = function _process() {
                                var scrollTop = this._getScrollTop() + this._config.offset;

                                var scrollHeight = this._getScrollHeight();

                                var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

                                if (this._scrollHeight !== scrollHeight) {
                                    this.refresh();
                                }

                                if (scrollTop >= maxScroll) {
                                    var target = this._targets[this._targets.length - 1];

                                    if (this._activeTarget !== target) {
                                        this._activate(target);
                                    }

                                    return;
                                }

                                if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                                    this._activeTarget = null;

                                    this._clear();

                                    return;
                                }

                                for (var i = this._offsets.length; i--;) {
                                    var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

                                    if (isActiveTarget) {
                                        this._activate(this._targets[i]);
                                    }
                                }
                            };

                            _proto._activate = function _activate(target) {
                                this._activeTarget = target;

                                this._clear();

                                var queries = this._selector.split(','); // eslint-disable-next-line arrow-body-style


                                queries = queries.map(function (selector) {
                                    return selector + "[data-target=\"" + target + "\"]," + (selector + "[href=\"" + target + "\"]");
                                });
                                var $link = $$$1(queries.join(','));

                                if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
                                    $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                                    $link.addClass(ClassName.ACTIVE);
                                } else {
                                    // Set triggered link as active
                                    $link.addClass(ClassName.ACTIVE); // Set triggered links parents as active
                                    // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

                                    $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ", " + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE); // Handle special case when .nav-link is inside .nav-item

                                    $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
                                }

                                $$$1(this._scrollElement).trigger(Event.ACTIVATE, {
                                    relatedTarget: target
                                });
                            };

                            _proto._clear = function _clear() {
                                $$$1(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
                            }; // Static


                            ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var data = $$$1(this).data(DATA_KEY);

                                    var _config = typeof config === 'object' && config;

                                    if (!data) {
                                        data = new ScrollSpy(this, _config);
                                        $$$1(this).data(DATA_KEY, data);
                                    }

                                    if (typeof config === 'string') {
                                        if (typeof data[config] === 'undefined') {
                                            throw new TypeError("No method named \"" + config + "\"");
                                        }

                                        data[config]();
                                    }
                                });
                            };

                            _createClass(ScrollSpy, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }, {
                                key: "Default",
                                get: function get() {
                                    return Default;
                                }
                            }]);

                            return ScrollSpy;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * Data Api implementation
                     * ------------------------------------------------------------------------
                     */


                    $$$1(window).on(Event.LOAD_DATA_API, function () {
                        var scrollSpys = $$$1.makeArray($$$1(Selector.DATA_SPY));

                        for (var i = scrollSpys.length; i--;) {
                            var $spy = $$$1(scrollSpys[i]);

                            ScrollSpy._jQueryInterface.call($spy, $spy.data());
                        }
                    });
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */

                    $$$1.fn[NAME] = ScrollSpy._jQueryInterface;
                    $$$1.fn[NAME].Constructor = ScrollSpy;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return ScrollSpy._jQueryInterface;
                    };

                    return ScrollSpy;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): tab.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                var Tab = function ($$$1) {
                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */
                    var NAME = 'tab';
                    var VERSION = '4.1.1';
                    var DATA_KEY = 'bs.tab';
                    var EVENT_KEY = "." + DATA_KEY;
                    var DATA_API_KEY = '.data-api';
                    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
                    var Event = {
                        HIDE: "hide" + EVENT_KEY,
                        HIDDEN: "hidden" + EVENT_KEY,
                        SHOW: "show" + EVENT_KEY,
                        SHOWN: "shown" + EVENT_KEY,
                        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
                    };
                    var ClassName = {
                        DROPDOWN_MENU: 'dropdown-menu',
                        ACTIVE: 'active',
                        DISABLED: 'disabled',
                        FADE: 'fade',
                        SHOW: 'show'
                    };
                    var Selector = {
                        DROPDOWN: '.dropdown',
                        NAV_LIST_GROUP: '.nav, .list-group',
                        ACTIVE: '.active',
                        ACTIVE_UL: '> li > .active',
                        DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
                        DROPDOWN_TOGGLE: '.dropdown-toggle',
                        DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
                        /**
                         * ------------------------------------------------------------------------
                         * Class Definition
                         * ------------------------------------------------------------------------
                         */

                    };

                    var Tab =
                        /*#__PURE__*/
                        function () {
                            function Tab(element) {
                                this._element = element;
                            } // Getters


                            var _proto = Tab.prototype;

                            // Public
                            _proto.show = function show() {
                                var _this = this;

                                if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                                    return;
                                }

                                var target;
                                var previous;
                                var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];
                                var selector = Util.getSelectorFromElement(this._element);

                                if (listElement) {
                                    var itemSelector = listElement.nodeName === 'UL' ? Selector.ACTIVE_UL : Selector.ACTIVE;
                                    previous = $$$1.makeArray($$$1(listElement).find(itemSelector));
                                    previous = previous[previous.length - 1];
                                }

                                var hideEvent = $$$1.Event(Event.HIDE, {
                                    relatedTarget: this._element
                                });
                                var showEvent = $$$1.Event(Event.SHOW, {
                                    relatedTarget: previous
                                });

                                if (previous) {
                                    $$$1(previous).trigger(hideEvent);
                                }

                                $$$1(this._element).trigger(showEvent);

                                if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
                                    return;
                                }

                                if (selector) {
                                    target = $$$1(selector)[0];
                                }

                                this._activate(this._element, listElement);

                                var complete = function complete() {
                                    var hiddenEvent = $$$1.Event(Event.HIDDEN, {
                                        relatedTarget: _this._element
                                    });
                                    var shownEvent = $$$1.Event(Event.SHOWN, {
                                        relatedTarget: previous
                                    });
                                    $$$1(previous).trigger(hiddenEvent);
                                    $$$1(_this._element).trigger(shownEvent);
                                };

                                if (target) {
                                    this._activate(target, target.parentNode, complete);
                                } else {
                                    complete();
                                }
                            };

                            _proto.dispose = function dispose() {
                                $$$1.removeData(this._element, DATA_KEY);
                                this._element = null;
                            }; // Private


                            _proto._activate = function _activate(element, container, callback) {
                                var _this2 = this;

                                var activeElements;

                                if (container.nodeName === 'UL') {
                                    activeElements = $$$1(container).find(Selector.ACTIVE_UL);
                                } else {
                                    activeElements = $$$1(container).children(Selector.ACTIVE);
                                }

                                var active = activeElements[0];
                                var isTransitioning = callback && active && $$$1(active).hasClass(ClassName.FADE);

                                var complete = function complete() {
                                    return _this2._transitionComplete(element, active, callback);
                                };

                                if (active && isTransitioning) {
                                    var transitionDuration = Util.getTransitionDurationFromElement(active);
                                    $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                                } else {
                                    complete();
                                }
                            };

                            _proto._transitionComplete = function _transitionComplete(element, active, callback) {
                                if (active) {
                                    $$$1(active).removeClass(ClassName.SHOW + " " + ClassName.ACTIVE);
                                    var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];

                                    if (dropdownChild) {
                                        $$$1(dropdownChild).removeClass(ClassName.ACTIVE);
                                    }

                                    if (active.getAttribute('role') === 'tab') {
                                        active.setAttribute('aria-selected', false);
                                    }
                                }

                                $$$1(element).addClass(ClassName.ACTIVE);

                                if (element.getAttribute('role') === 'tab') {
                                    element.setAttribute('aria-selected', true);
                                }

                                Util.reflow(element);
                                $$$1(element).addClass(ClassName.SHOW);

                                if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
                                    var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];

                                    if (dropdownElement) {
                                        $$$1(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                                    }

                                    element.setAttribute('aria-expanded', true);
                                }

                                if (callback) {
                                    callback();
                                }
                            }; // Static


                            Tab._jQueryInterface = function _jQueryInterface(config) {
                                return this.each(function () {
                                    var $this = $$$1(this);
                                    var data = $this.data(DATA_KEY);

                                    if (!data) {
                                        data = new Tab(this);
                                        $this.data(DATA_KEY, data);
                                    }

                                    if (typeof config === 'string') {
                                        if (typeof data[config] === 'undefined') {
                                            throw new TypeError("No method named \"" + config + "\"");
                                        }

                                        data[config]();
                                    }
                                });
                            };

                            _createClass(Tab, null, [{
                                key: "VERSION",
                                get: function get() {
                                    return VERSION;
                                }
                            }]);

                            return Tab;
                        }();
                    /**
                     * ------------------------------------------------------------------------
                     * Data Api implementation
                     * ------------------------------------------------------------------------
                     */


                    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
                        event.preventDefault();

                        Tab._jQueryInterface.call($$$1(this), 'show');
                    });
                    /**
                     * ------------------------------------------------------------------------
                     * jQuery
                     * ------------------------------------------------------------------------
                     */

                    $$$1.fn[NAME] = Tab._jQueryInterface;
                    $$$1.fn[NAME].Constructor = Tab;

                    $$$1.fn[NAME].noConflict = function () {
                        $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
                        return Tab._jQueryInterface;
                    };

                    return Tab;
                }($);

                /**
                 * --------------------------------------------------------------------------
                 * Bootstrap (v4.1.1): index.js
                 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
                 * --------------------------------------------------------------------------
                 */

                (function ($$$1) {
                    if (typeof $$$1 === 'undefined') {
                        throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
                    }

                    var version = $$$1.fn.jquery.split(' ')[0].split('.');
                    var minMajor = 1;
                    var ltMajor = 2;
                    var minMinor = 9;
                    var minPatch = 1;
                    var maxMajor = 4;

                    if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
                        throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
                    }
                })($);

                exports.Util = Util;
                exports.Alert = Alert;
                exports.Button = Button;
                exports.Carousel = Carousel;
                exports.Collapse = Collapse;
                exports.Dropdown = Dropdown;
                exports.Modal = Modal;
                exports.Popover = Popover;
                exports.Scrollspy = ScrollSpy;
                exports.Tab = Tab;
                exports.Tooltip = Tooltip;

                Object.defineProperty(exports, '__esModule', {value: true});

            })));


        }, {"jquery": 9, "popper.js": 14}],
        2: [function (require, module, exports) {
            'use strict';

            var moment = require('moment');

// Everything based on http://vrk.fi/en/personal-identity-code1

            var controlArray = '0123456789ABCDEFHJKLMNPRSTUVWXYZ'.split('');

            var centuryMap = {
                '+': '18',
                '-': '19',
                'A': '20',
                '18': '+',
                '19': '-',
                '20': 'A'
            };

            function getGender(genderDigits) {
                return genderDigits % 2 === 0 ? 'female' : 'male';
            }

            module.exports = {
                defaultTZ: 'Europe/Helsinki',
                _random: function _random(min, max) {
                    if (!max) {
                        max = min;
                        min = 0;
                    }
                    return min + Math.floor(Math.random() * (max - min + 1));
                },

                _checksum: function _checksum(ssn) {
                    function getIndex(id) {
                        var number = '';

                        for (var i in id) {
                            if (!Number.isInteger(+id[i])) {
                                continue;
                            }

                            number = number + id[i];
                        }

                        return +number % 31;
                    }

                    var index = getIndex(ssn).toString();

                    return index;
                },

                parse: function parse(ssn) {
                    if (ssn.length !== 11) {
                        return {};
                    }

                    var parts = ssn.match(/.{2}/g);
                    var century = centuryMap[ssn.slice(6, 7)];
                    var date = moment([century + parts[2], parts[1], parts[0]].join(''), 'YYYYMMDD');
                    var n = ssn.slice(-5);

                    return {
                        canonical: ssn,
                        year: date.year(),
                        month: date.month() + 1,
                        day: date.date(),
                        n: n,
                        checksum: n.slice(-1),
                        gender: getGender(+ssn.slice(9, 10))
                    };
                },

                validate: function validate(parsed) {
                    var pattern = /(3[01]|[0-2][0-9])(1[0-2]|0[0-9])[0-9]{2}[+A-][0-9]{3}[0-9A-Y]$/;

                    if (!pattern.test(parsed.canonical)) {
                        return false;
                    }

                    var remainder = this._checksum(parsed.canonical.slice(0, 10));
                    return controlArray[remainder] === parsed.checksum;
                },

                format: function format(parsed) {
                    return parsed.canonical;
                },
                isDNumber: function isDNumber() {
                    throw new Error('FI does not have D-Numbers');
                },


                random: function random(date) {
                    var _this = this;

                    var birth = date.format('DDMMYY');
                    var century = Math.floor(+date.format('YYYY') / 100).toString();

                    if (!(century in centuryMap)) {
                        throw new Error('FI does not have numbers before 1800');
                    }

                    var separator = centuryMap[century];
                    var clones = [1, 2, 3].map(function () {
                        return _this._random(9);
                    }).join('');
                    var chksum = this._checksum(birth + separator + clones);

                    return birth + separator + clones + controlArray[chksum];
                }
            };
        }, {"moment": 13}],
        3: [function (require, module, exports) {
            'use strict';

            module.exports = require('./ssn');

            module.exports.FORMAT_SHORT = require('./symbols').FORMAT_SHORT;
            module.exports.FORMAT_SHORT_DASH = require('./symbols').FORMAT_SHORT_DASH;
            module.exports.FORMAT_LONG = require('./symbols').FORMAT_LONG;
            module.exports.FORMAT_LONG_DASH = require('./symbols').FORMAT_LONG_DASH;
        }, {"./ssn": 6, "./symbols": 7}],
        4: [function (require, module, exports) {
            'use strict';

            var _ = require('underscore');
            var moment = require('moment');

            function pad(s, count, c) {
                s = s.toString();

                for (var i = 0; i < Math.abs(count) - s.length; i++) {
                    if (count < 0) {
                        s = c + s;
                    } else {
                        s = s + c;
                    }
                }

                return s;
            }

            function getGender(genderDigit) {
                // http://www.skatteetaten.no/en/person/National-Registry/Birth-and-name-selection/Children-born-in-Norway/National-ID-number/
                // even numbers for women: 0, 2, 4, 6 or 8
                // odd numbers for men: 1, 3, 5, 7, or 9.
                return genderDigit % 2 === 0 ? 'female' : 'male';
            }

            module.exports = {
                defaultTZ: 'Europe/Oslo',
                _random: _.random,

                _checksum: function _checksum(ssn) {
                    var round1 = [3, 7, 6, 1, 8, 9, 4, 5, 2];
                    var round2 = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2];

                    function controlNumber(id, round) {
                        var sum = 0;

                        for (var i in id) {
                            sum += +id[i] * round[i];
                        }

                        return (11 - sum % 11) % 11;
                    }

                    var control = controlNumber(ssn, round1).toString();
                    control += controlNumber(ssn + control, round2);

                    return control;
                },

                parse: function parse(ssn) {
                    if (ssn.length !== 11) {
                        return {};
                    }

                    // http://www.kith.no/upload/5588/KITH1001-2010_Identifikatorer-for-personer_v1.pdf, Side 15 av 16
                    // Individnummer | År i fødselsdato | Født
                    // --------------+------------------+------------
                    // 500 - 749     | > 54             | 1855 - 1899
                    // 000 - 499     |                  | 1900 - 1999
                    // 900 - 999     | > 39             | 1940 - 1999
                    // 500 - 999     | < 40             | 2000 - 2039
                    var parts = ssn.match(/.{2}/g);
                    var inr = +ssn.slice(6, 9);
                    var century = inr >= 500 && inr <= 999 && +parts[2] < 40 ? '20' : '19';
                    var date = moment([century + parts[2], parts[1], +parts[0] >= 40 ? parts[0] - 40 : parts[0]].join(''), 'YYYYMMDD');
                    var n = ssn.slice(-5);

                    return {
                        canonical: ssn,
                        year: date.year(),
                        month: date.month() + 1,
                        day: date.date(),
                        n: n,
                        checksum: n.slice(-2),
                        gender: getGender(ssn.slice(8, 9)),
                        isDNumber: +parts[0] >= 40
                    };
                },

                validate: function validate(parsed) {
                    // if it's a D-nummer, they added 4 to the first position
                    // else is DDMMYYXXXCC
                    var pattern = /^(3[01]|[0-2][0-9]|[4-7][0-9])(1[0-2]|0[0-9])[0-9]{2}[0-9]{5}$/;

                    if (!pattern.test(parsed.canonical)) {
                        return false;
                    }

                    return this._checksum(parsed.canonical.slice(0, 9)) === parsed.checksum;
                },

                format: function format(parsed) {
                    return parsed.canonical;
                },
                isDNumber: function isDNumber(parsed) {
                    return !!parsed.isDNumber;
                },


                random: function random(date) {
                    var year = moment(date).year();
                    var inrStart = 0;
                    var inrEnd = 499;

                    if (year >= 2000 && year <= 2039) {
                        inrStart = 500;
                        inrEnd = 999;
                    }

                    // The checksum algorithm fails for some values so retry until we
                    // get a correct value
                    var chksum;
                    var p;
                    do {
                        var inr = pad(this._random(inrStart, inrEnd), -3, '0');
                        p = date.format('DDMMYY') + inr;

                        chksum = this._checksum(p);
                    } while (chksum.length > 2);

                    return p + chksum;
                }
            };
        }, {"moment": 13, "underscore": 16}],
        5: [function (require, module, exports) {
            'use strict';

            var _ = require('underscore');
            var moment = require('moment');

            var _require = require('./symbols'),
                FORMAT_SHORT_DASH = _require.FORMAT_SHORT_DASH,
                FORMAT_LONG = _require.FORMAT_LONG,
                FORMAT_LONG_DASH = _require.FORMAT_LONG_DASH;

            function getGender(genderDigit) {
                // https://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)
                // even ninth number to females: 0, 2, 4, 6 or 8
                // odd ninth number to males: 1, 3, 5, 7, or 9.
                return genderDigit % 2 === 0 ? 'female' : 'male';
            }

            module.exports = {
                defaultTZ: 'Europe/Stockholm',
                _random: _.random,

                _minSSNLength: 10,
                _defaultSSNLength: 12,

                _luhn: function _luhn(ssn) {
                    // Works only with 10-digit SSN
                    var chksum = 0;

                    for (var n = 0; n < ssn.length; n++) {
                        var c = +ssn[n];

                        if (n % 2 === 0) {
                            chksum += c * 2 > 9 ? c * 2 - 9 : c * 2;
                        } else {
                            chksum += c;
                        }
                    }

                    return (10 - chksum % 10) % 10;
                },

                parse: function parse(ssn) {
                    if (ssn.length !== 10 && ssn.length !== 12) {
                        return {};
                    }

                    var sliceParams = {
                        '10': {
                            startBirth: 0,
                            endBirth: 6,
                            formatBirth: 'YYMMDD',
                            startSerial: 6,
                            endSerial: 10,
                            startGender: 8,
                            endGender: 9
                        },
                        '12': {
                            startBirth: 0,
                            endBirth: 8,
                            formatBirth: 'YYYYMMDD',
                            startSerial: 8,
                            endSerial: 12,
                            startGender: 10,
                            endGender: 11
                        }
                    };

                    var params = sliceParams[ssn.length];

                    var birthDate = moment(ssn.slice(params.startBirth, params.endBirth), params.formatBirth);
                    var serial = ssn.slice(params.startSerial, params.endSerial);
                    var genderDigit = ssn.slice(params.startGender, params.endGender);

                    return {
                        canonical: ssn.length === 12 ? ssn.slice(2) : ssn,
                        year: birthDate.year(),
                        month: birthDate.month() + 1,
                        day: birthDate.date(),
                        n: serial,
                        checksum: serial.slice(-1),
                        gender: getGender(genderDigit)
                    };
                },

                validate: function validate(parsed) {
                    var pattern = /^[0-9]{2}(1[0-2]|0[0-9])(3[01]|[0-2][0-9])[0-9]{4}$/;

                    if (!pattern.test(parsed.canonical)) {
                        return false;
                    }

                    var checksum = this._luhn(parsed.canonical.slice(0, 9));

                    return checksum === +parsed.checksum;
                },

                format: function format(parsed) {
                    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FORMAT_LONG;

                    var ssn = parsed.canonical;

                    if (type === FORMAT_LONG || type === FORMAT_LONG_DASH) {
                        ssn = parsed.year.toString() + parsed.canonical.slice(2);
                    }

                    if (type === FORMAT_LONG_DASH || type === FORMAT_SHORT_DASH) {
                        return ssn.slice(0, -4) + '-' + ssn.slice(-4);
                    }

                    return ssn;
                },
                isDNumber: function isDNumber() {
                    throw new Error('SE does not have D-Numbers');
                },


                random: function random(date) {
                    var p = date.format('YYMMDD') + this._random(0, 9) + this._random(0, 9) + this._random(0, 9);

                    p += this._luhn(p);

                    return p;
                }
            };
        }, {"./symbols": 7, "moment": 13, "underscore": 16}],
        6: [function (require, module, exports) {
            'use strict';

            var moment = require('moment-timezone');
            var _ = require('underscore');

            var countries = {
                SE: require('./se'),
                NO: require('./no'),
                FI: require('./fi')
            };

            function SSN(ssn, countryCode, options) {
                if (!(this instanceof SSN)) {
                    return new SSN(ssn, countryCode, options);
                }

                options = options || {};

                if (!ssn || !countryCode) {
                    throw new Error('need ssn and country code');
                }

                if (!(countryCode in countries)) {
                    throw new Error('not a valid country code');
                }

                this.ssn = ssn;
                this.countryCode = countryCode;
                this.timeZone = options.timeZone || countries[countryCode].defaultTZ;

                this._parse();
            }

            SSN.prototype._parse = function () {
                this.parsed = countries[this.countryCode].parse(this.ssn);
            };

            SSN.prototype.birthdate = function () {
                return moment.tz([this.parsed.year, this.parsed.month - 1, this.parsed.day, 12], this.timeZone).toDate();
            };

            SSN.prototype.age = function () {
                var date = this.birthdate();
                return moment().diff(date, 'years');
            };

            SSN.prototype.isValid = function (options) {
                return countries[this.countryCode].validate(this.parsed, options);
            };

            SSN.prototype.format = function (type) {
                return countries[this.countryCode].format(this.parsed, type);
            };

            SSN.prototype.toString = SSN.prototype.toJSON = function () {
                return this.format();
            };

            SSN.prototype.gender = function () {
                return this.parsed.gender;
            };

            SSN.random = function (countryCode, minAge, maxAge) {
                minAge = minAge >= 0 && minAge < maxAge ? minAge : 18;
                maxAge = maxAge < Infinity && maxAge > minAge ? maxAge : 70;

                var end = moment().subtract(minAge, 'years');
                var start = moment().subtract(maxAge, 'years');

                var birthDate = moment(_.random(start, end));
                var ssnStr = countries[countryCode].random(birthDate);
                var ssn = new SSN(ssnStr, countryCode);

                return ssn;
            };

            module.exports = SSN;
        }, {"./fi": 2, "./no": 4, "./se": 5, "moment-timezone": 11, "underscore": 16}],
        7: [function (require, module, exports) {
            'use strict';

            /*
 * Type              | SE            | NO
 * ------------------+---------------+------------
 * FORMAT_SHORT      | 8802177527    | 10108520065
 * FORMAT_SHORT_DASH | 880217-7527   | 10108520065
 * FORMAT_LONG       | 198802177527  | 10108520065
 * FORMAT_LONG_DASH  | 19880217-7527 | 10108520065
 */

            module.exports.FORMAT_SHORT = 'SSN_FORMAT_SHORT';
            module.exports.FORMAT_SHORT_DASH = 'SSN_FORMAT_SHORT_DASH';
            module.exports.FORMAT_LONG = 'SSN_FORMAT_LONG';
            module.exports.FORMAT_LONG_DASH = 'SSN_FORMAT_LONG_DASH';
        }, {}],
        8: [function (require, module, exports) {
            function verifyEmail(email) {
                return /^[a-z0-9\u007F-\uffff!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9\u007F-\uffff!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,}$/i.test(email);
            }

            module.exports.verifyEmail = verifyEmail;
        }, {}],
        9: [function (require, module, exports) {
            /*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
            (function (global, factory) {

                "use strict";

                if (typeof module === "object" && typeof module.exports === "object") {

                    // For CommonJS and CommonJS-like environments where a proper `window`
                    // is present, execute the factory and get jQuery.
                    // For environments that do not have a `window` with a `document`
                    // (such as Node.js), expose a factory as module.exports.
                    // This accentuates the need for the creation of a real `window`.
                    // e.g. var jQuery = require("jquery")(window);
                    // See ticket #14549 for more info.
                    module.exports = global.document ?
                        factory(global, true) :
                        function (w) {
                            if (!w.document) {
                                throw new Error("jQuery requires a window with a document");
                            }
                            return factory(w);
                        };
                } else {
                    factory(global);
                }

// Pass this if window is not defined yet
            })(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
                "use strict";

                var arr = [];

                var document = window.document;

                var getProto = Object.getPrototypeOf;

                var slice = arr.slice;

                var concat = arr.concat;

                var push = arr.push;

                var indexOf = arr.indexOf;

                var class2type = {};

                var toString = class2type.toString;

                var hasOwn = class2type.hasOwnProperty;

                var fnToString = hasOwn.toString;

                var ObjectFunctionString = fnToString.call(Object);

                var support = {};

                var isFunction = function isFunction(obj) {

                    // Support: Chrome <=57, Firefox <=52
                    // In some browsers, typeof returns "function" for HTML <object> elements
                    // (i.e., `typeof document.createElement( "object" ) === "function"`).
                    // We don't want to classify *any* DOM node as a function.
                    return typeof obj === "function" && typeof obj.nodeType !== "number";
                };


                var isWindow = function isWindow(obj) {
                    return obj != null && obj === obj.window;
                };


                var preservedScriptAttributes = {
                    type: true,
                    src: true,
                    noModule: true
                };

                function DOMEval(code, doc, node) {
                    doc = doc || document;

                    var i,
                        script = doc.createElement("script");

                    script.text = code;
                    if (node) {
                        for (i in preservedScriptAttributes) {
                            if (node[i]) {
                                script[i] = node[i];
                            }
                        }
                    }
                    doc.head.appendChild(script).parentNode.removeChild(script);
                }


                function toType(obj) {
                    if (obj == null) {
                        return obj + "";
                    }

                    // Support: Android <=2.3 only (functionish RegExp)
                    return typeof obj === "object" || typeof obj === "function" ?
                        class2type[toString.call(obj)] || "object" :
                        typeof obj;
                }

                /* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module


                var
                    version = "3.3.1",

                    // Define a local copy of jQuery
                    jQuery = function (selector, context) {

                        // The jQuery object is actually just the init constructor 'enhanced'
                        // Need init if jQuery is called (just allow error to be thrown if not included)
                        return new jQuery.fn.init(selector, context);
                    },

                    // Support: Android <=4.0 only
                    // Make sure we trim BOM and NBSP
                    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

                jQuery.fn = jQuery.prototype = {

                    // The current version of jQuery being used
                    jquery: version,

                    constructor: jQuery,

                    // The default length of a jQuery object is 0
                    length: 0,

                    toArray: function () {
                        return slice.call(this);
                    },

                    // Get the Nth element in the matched element set OR
                    // Get the whole matched element set as a clean array
                    get: function (num) {

                        // Return all the elements in a clean array
                        if (num == null) {
                            return slice.call(this);
                        }

                        // Return just the one element from the set
                        return num < 0 ? this[num + this.length] : this[num];
                    },

                    // Take an array of elements and push it onto the stack
                    // (returning the new matched element set)
                    pushStack: function (elems) {

                        // Build a new jQuery matched element set
                        var ret = jQuery.merge(this.constructor(), elems);

                        // Add the old object onto the stack (as a reference)
                        ret.prevObject = this;

                        // Return the newly-formed element set
                        return ret;
                    },

                    // Execute a callback for every element in the matched set.
                    each: function (callback) {
                        return jQuery.each(this, callback);
                    },

                    map: function (callback) {
                        return this.pushStack(jQuery.map(this, function (elem, i) {
                            return callback.call(elem, i, elem);
                        }));
                    },

                    slice: function () {
                        return this.pushStack(slice.apply(this, arguments));
                    },

                    first: function () {
                        return this.eq(0);
                    },

                    last: function () {
                        return this.eq(-1);
                    },

                    eq: function (i) {
                        var len = this.length,
                            j = +i + (i < 0 ? len : 0);
                        return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
                    },

                    end: function () {
                        return this.prevObject || this.constructor();
                    },

                    // For internal use only.
                    // Behaves like an Array's method, not like a jQuery method.
                    push: push,
                    sort: arr.sort,
                    splice: arr.splice
                };

                jQuery.extend = jQuery.fn.extend = function () {
                    var options, name, src, copy, copyIsArray, clone,
                        target = arguments[0] || {},
                        i = 1,
                        length = arguments.length,
                        deep = false;

                    // Handle a deep copy situation
                    if (typeof target === "boolean") {
                        deep = target;

                        // Skip the boolean and the target
                        target = arguments[i] || {};
                        i++;
                    }

                    // Handle case when target is a string or something (possible in deep copy)
                    if (typeof target !== "object" && !isFunction(target)) {
                        target = {};
                    }

                    // Extend jQuery itself if only one argument is passed
                    if (i === length) {
                        target = this;
                        i--;
                    }

                    for (; i < length; i++) {

                        // Only deal with non-null/undefined values
                        if ((options = arguments[i]) != null) {

                            // Extend the base object
                            for (name in options) {
                                src = target[name];
                                copy = options[name];

                                // Prevent never-ending loop
                                if (target === copy) {
                                    continue;
                                }

                                // Recurse if we're merging plain objects or arrays
                                if (deep && copy && (jQuery.isPlainObject(copy) ||
                                    (copyIsArray = Array.isArray(copy)))) {

                                    if (copyIsArray) {
                                        copyIsArray = false;
                                        clone = src && Array.isArray(src) ? src : [];

                                    } else {
                                        clone = src && jQuery.isPlainObject(src) ? src : {};
                                    }

                                    // Never move original objects, clone them
                                    target[name] = jQuery.extend(deep, clone, copy);

                                    // Don't bring in undefined values
                                } else if (copy !== undefined) {
                                    target[name] = copy;
                                }
                            }
                        }
                    }

                    // Return the modified object
                    return target;
                };

                jQuery.extend({

                    // Unique for each copy of jQuery on the page
                    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

                    // Assume jQuery is ready without the ready module
                    isReady: true,

                    error: function (msg) {
                        throw new Error(msg);
                    },

                    noop: function () {
                    },

                    isPlainObject: function (obj) {
                        var proto, Ctor;

                        // Detect obvious negatives
                        // Use toString instead of jQuery.type to catch host objects
                        if (!obj || toString.call(obj) !== "[object Object]") {
                            return false;
                        }

                        proto = getProto(obj);

                        // Objects with no prototype (e.g., `Object.create( null )`) are plain
                        if (!proto) {
                            return true;
                        }

                        // Objects with prototype are plain iff they were constructed by a global Object function
                        Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
                        return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
                    },

                    isEmptyObject: function (obj) {

                        /* eslint-disable no-unused-vars */
                        // See https://github.com/eslint/eslint/issues/6125
                        var name;

                        for (name in obj) {
                            return false;
                        }
                        return true;
                    },

                    // Evaluates a script in a global context
                    globalEval: function (code) {
                        DOMEval(code);
                    },

                    each: function (obj, callback) {
                        var length, i = 0;

                        if (isArrayLike(obj)) {
                            length = obj.length;
                            for (; i < length; i++) {
                                if (callback.call(obj[i], i, obj[i]) === false) {
                                    break;
                                }
                            }
                        } else {
                            for (i in obj) {
                                if (callback.call(obj[i], i, obj[i]) === false) {
                                    break;
                                }
                            }
                        }

                        return obj;
                    },

                    // Support: Android <=4.0 only
                    trim: function (text) {
                        return text == null ?
                            "" :
                            (text + "").replace(rtrim, "");
                    },

                    // results is for internal usage only
                    makeArray: function (arr, results) {
                        var ret = results || [];

                        if (arr != null) {
                            if (isArrayLike(Object(arr))) {
                                jQuery.merge(ret,
                                    typeof arr === "string" ?
                                        [arr] : arr
                                );
                            } else {
                                push.call(ret, arr);
                            }
                        }

                        return ret;
                    },

                    inArray: function (elem, arr, i) {
                        return arr == null ? -1 : indexOf.call(arr, elem, i);
                    },

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    merge: function (first, second) {
                        var len = +second.length,
                            j = 0,
                            i = first.length;

                        for (; j < len; j++) {
                            first[i++] = second[j];
                        }

                        first.length = i;

                        return first;
                    },

                    grep: function (elems, callback, invert) {
                        var callbackInverse,
                            matches = [],
                            i = 0,
                            length = elems.length,
                            callbackExpect = !invert;

                        // Go through the array, only saving the items
                        // that pass the validator function
                        for (; i < length; i++) {
                            callbackInverse = !callback(elems[i], i);
                            if (callbackInverse !== callbackExpect) {
                                matches.push(elems[i]);
                            }
                        }

                        return matches;
                    },

                    // arg is for internal usage only
                    map: function (elems, callback, arg) {
                        var length, value,
                            i = 0,
                            ret = [];

                        // Go through the array, translating each of the items to their new values
                        if (isArrayLike(elems)) {
                            length = elems.length;
                            for (; i < length; i++) {
                                value = callback(elems[i], i, arg);

                                if (value != null) {
                                    ret.push(value);
                                }
                            }

                            // Go through every key on the object,
                        } else {
                            for (i in elems) {
                                value = callback(elems[i], i, arg);

                                if (value != null) {
                                    ret.push(value);
                                }
                            }
                        }

                        // Flatten any nested arrays
                        return concat.apply([], ret);
                    },

                    // A global GUID counter for objects
                    guid: 1,

                    // jQuery.support is not used in Core but other projects attach their
                    // properties to it so it needs to exist.
                    support: support
                });

                if (typeof Symbol === "function") {
                    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
                }

// Populate the class2type map
                jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
                    function (i, name) {
                        class2type["[object " + name + "]"] = name.toLowerCase();
                    });

                function isArrayLike(obj) {

                    // Support: real iOS 8.2 only (not reproducible in simulator)
                    // `in` check used to prevent JIT error (gh-2145)
                    // hasOwn isn't used here due to false negatives
                    // regarding Nodelist length in IE
                    var length = !!obj && "length" in obj && obj.length,
                        type = toType(obj);

                    if (isFunction(obj) || isWindow(obj)) {
                        return false;
                    }

                    return type === "array" || length === 0 ||
                        typeof length === "number" && length > 0 && (length - 1) in obj;
                }

                var Sizzle =
                    /*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
                    (function (window) {

                        var i,
                            support,
                            Expr,
                            getText,
                            isXML,
                            tokenize,
                            compile,
                            select,
                            outermostContext,
                            sortInput,
                            hasDuplicate,

                            // Local document vars
                            setDocument,
                            document,
                            docElem,
                            documentIsHTML,
                            rbuggyQSA,
                            rbuggyMatches,
                            matches,
                            contains,

                            // Instance-specific data
                            expando = "sizzle" + 1 * new Date(),
                            preferredDoc = window.document,
                            dirruns = 0,
                            done = 0,
                            classCache = createCache(),
                            tokenCache = createCache(),
                            compilerCache = createCache(),
                            sortOrder = function (a, b) {
                                if (a === b) {
                                    hasDuplicate = true;
                                }
                                return 0;
                            },

                            // Instance methods
                            hasOwn = ({}).hasOwnProperty,
                            arr = [],
                            pop = arr.pop,
                            push_native = arr.push,
                            push = arr.push,
                            slice = arr.slice,
                            // Use a stripped-down indexOf as it's faster than native
                            // https://jsperf.com/thor-indexof-vs-for/5
                            indexOf = function (list, elem) {
                                var i = 0,
                                    len = list.length;
                                for (; i < len; i++) {
                                    if (list[i] === elem) {
                                        return i;
                                    }
                                }
                                return -1;
                            },

                            booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

                            // Regular expressions

                            // http://www.w3.org/TR/css3-selectors/#whitespace
                            whitespace = "[\\x20\\t\\r\\n\\f]",

                            // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
                            identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

                            // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                            attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
                                // Operator (capture 2)
                                "*([*^$|!~]?=)" + whitespace +
                                // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                                "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
                                "*\\]",

                            pseudos = ":(" + identifier + ")(?:\\((" +
                                // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                                // 1. quoted (capture 3; capture 4 or capture 5)
                                "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                                // 2. simple (capture 6)
                                "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
                                // 3. anything else (capture 2)
                                ".*" +
                                ")\\)|)",

                            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                            rwhitespace = new RegExp(whitespace + "+", "g"),
                            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

                            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                            rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),

                            rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),

                            rpseudo = new RegExp(pseudos),
                            ridentifier = new RegExp("^" + identifier + "$"),

                            matchExpr = {
                                "ID": new RegExp("^#(" + identifier + ")"),
                                "CLASS": new RegExp("^\\.(" + identifier + ")"),
                                "TAG": new RegExp("^(" + identifier + "|[*])"),
                                "ATTR": new RegExp("^" + attributes),
                                "PSEUDO": new RegExp("^" + pseudos),
                                "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                                    "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                                    "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                                "bool": new RegExp("^(?:" + booleans + ")$", "i"),
                                // For use in libraries implementing .is()
                                // We use this for POS matching in `select`
                                "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                                    whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                            },

                            rinputs = /^(?:input|select|textarea|button)$/i,
                            rheader = /^h\d$/i,

                            rnative = /^[^{]+\{\s*\[native \w/,

                            // Easily-parseable/retrievable ID or TAG or CLASS selectors
                            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

                            rsibling = /[+~]/,

                            // CSS escapes
                            // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                            runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                            funescape = function (_, escaped, escapedWhitespace) {
                                var high = "0x" + escaped - 0x10000;
                                // NaN means non-codepoint
                                // Support: Firefox<24
                                // Workaround erroneous numeric interpretation of +"0x"
                                return high !== high || escapedWhitespace ?
                                    escaped :
                                    high < 0 ?
                                        // BMP codepoint
                                        String.fromCharCode(high + 0x10000) :
                                        // Supplemental Plane codepoint (surrogate pair)
                                        String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
                            },

                            // CSS string/identifier serialization
                            // https://drafts.csswg.org/cssom/#common-serializing-idioms
                            rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                            fcssescape = function (ch, asCodePoint) {
                                if (asCodePoint) {

                                    // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                                    if (ch === "\0") {
                                        return "\uFFFD";
                                    }

                                    // Control characters and (dependent upon position) numbers get escaped as code points
                                    return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
                                }

                                // Other potentially-special ASCII characters get backslash-escaped
                                return "\\" + ch;
                            },

                            // Used for iframes
                            // See setDocument()
                            // Removing the function wrapper causes a "Permission Denied"
                            // error in IE
                            unloadHandler = function () {
                                setDocument();
                            },

                            disabledAncestor = addCombinator(
                                function (elem) {
                                    return elem.disabled === true && ("form" in elem || "label" in elem);
                                },
                                {dir: "parentNode", next: "legend"}
                            );

// Optimize for push.apply( _, NodeList )
                        try {
                            push.apply(
                                (arr = slice.call(preferredDoc.childNodes)),
                                preferredDoc.childNodes
                            );
                            // Support: Android<4.0
                            // Detect silently failing push.apply
                            arr[preferredDoc.childNodes.length].nodeType;
                        } catch (e) {
                            push = {
                                apply: arr.length ?

                                    // Leverage slice if possible
                                    function (target, els) {
                                        push_native.apply(target, slice.call(els));
                                    } :

                                    // Support: IE<9
                                    // Otherwise append directly
                                    function (target, els) {
                                        var j = target.length,
                                            i = 0;
                                        // Can't trust NodeList.length
                                        while ((target[j++] = els[i++])) {
                                        }
                                        target.length = j - 1;
                                    }
                            };
                        }

                        function Sizzle(selector, context, results, seed) {
                            var m, i, elem, nid, match, groups, newSelector,
                                newContext = context && context.ownerDocument,

                                // nodeType defaults to 9, since context defaults to document
                                nodeType = context ? context.nodeType : 9;

                            results = results || [];

                            // Return early from calls with invalid selector or context
                            if (typeof selector !== "string" || !selector ||
                                nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

                                return results;
                            }

                            // Try to shortcut find operations (as opposed to filters) in HTML documents
                            if (!seed) {

                                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                                    setDocument(context);
                                }
                                context = context || document;

                                if (documentIsHTML) {

                                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                                    // (excepting DocumentFragment context, where the methods don't exist)
                                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

                                        // ID selector
                                        if ((m = match[1])) {

                                            // Document context
                                            if (nodeType === 9) {
                                                if ((elem = context.getElementById(m))) {

                                                    // Support: IE, Opera, Webkit
                                                    // TODO: identify versions
                                                    // getElementById can match elements by name instead of ID
                                                    if (elem.id === m) {
                                                        results.push(elem);
                                                        return results;
                                                    }
                                                } else {
                                                    return results;
                                                }

                                                // Element context
                                            } else {

                                                // Support: IE, Opera, Webkit
                                                // TODO: identify versions
                                                // getElementById can match elements by name instead of ID
                                                if (newContext && (elem = newContext.getElementById(m)) &&
                                                    contains(context, elem) &&
                                                    elem.id === m) {

                                                    results.push(elem);
                                                    return results;
                                                }
                                            }

                                            // Type selector
                                        } else if (match[2]) {
                                            push.apply(results, context.getElementsByTagName(selector));
                                            return results;

                                            // Class selector
                                        } else if ((m = match[3]) && support.getElementsByClassName &&
                                            context.getElementsByClassName) {

                                            push.apply(results, context.getElementsByClassName(m));
                                            return results;
                                        }
                                    }

                                    // Take advantage of querySelectorAll
                                    if (support.qsa &&
                                        !compilerCache[selector + " "] &&
                                        (!rbuggyQSA || !rbuggyQSA.test(selector))) {

                                        if (nodeType !== 1) {
                                            newContext = context;
                                            newSelector = selector;

                                            // qSA looks outside Element context, which is not what we want
                                            // Thanks to Andrew Dupont for this workaround technique
                                            // Support: IE <=8
                                            // Exclude object elements
                                        } else if (context.nodeName.toLowerCase() !== "object") {

                                            // Capture the context ID, setting it first if necessary
                                            if ((nid = context.getAttribute("id"))) {
                                                nid = nid.replace(rcssescape, fcssescape);
                                            } else {
                                                context.setAttribute("id", (nid = expando));
                                            }

                                            // Prefix every selector in the list
                                            groups = tokenize(selector);
                                            i = groups.length;
                                            while (i--) {
                                                groups[i] = "#" + nid + " " + toSelector(groups[i]);
                                            }
                                            newSelector = groups.join(",");

                                            // Expand context for sibling selectors
                                            newContext = rsibling.test(selector) && testContext(context.parentNode) ||
                                                context;
                                        }

                                        if (newSelector) {
                                            try {
                                                push.apply(results,
                                                    newContext.querySelectorAll(newSelector)
                                                );
                                                return results;
                                            } catch (qsaError) {
                                            } finally {
                                                if (nid === expando) {
                                                    context.removeAttribute("id");
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            // All others
                            return select(selector.replace(rtrim, "$1"), context, results, seed);
                        }

                        /**
                         * Create key-value caches of limited size
                         * @returns {function(string, object)} Returns the Object data after storing it on itself with
                         *    property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
                         *    deleting the oldest entry
                         */
                        function createCache() {
                            var keys = [];

                            function cache(key, value) {
                                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                                if (keys.push(key + " ") > Expr.cacheLength) {
                                    // Only keep the most recent entries
                                    delete cache[keys.shift()];
                                }
                                return (cache[key + " "] = value);
                            }

                            return cache;
                        }

                        /**
                         * Mark a function for special use by Sizzle
                         * @param {Function} fn The function to mark
                         */
                        function markFunction(fn) {
                            fn[expando] = true;
                            return fn;
                        }

                        /**
                         * Support testing using an element
                         * @param {Function} fn Passed the created element and returns a boolean result
                         */
                        function assert(fn) {
                            var el = document.createElement("fieldset");

                            try {
                                return !!fn(el);
                            } catch (e) {
                                return false;
                            } finally {
                                // Remove from its parent by default
                                if (el.parentNode) {
                                    el.parentNode.removeChild(el);
                                }
                                // release memory in IE
                                el = null;
                            }
                        }

                        /**
                         * Adds the same handler for all of the specified attrs
                         * @param {String} attrs Pipe-separated list of attributes
                         * @param {Function} handler The method that will be applied
                         */
                        function addHandle(attrs, handler) {
                            var arr = attrs.split("|"),
                                i = arr.length;

                            while (i--) {
                                Expr.attrHandle[arr[i]] = handler;
                            }
                        }

                        /**
                         * Checks document order of two siblings
                         * @param {Element} a
                         * @param {Element} b
                         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
                         */
                        function siblingCheck(a, b) {
                            var cur = b && a,
                                diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                                    a.sourceIndex - b.sourceIndex;

                            // Use IE sourceIndex if available on both nodes
                            if (diff) {
                                return diff;
                            }

                            // Check if b follows a
                            if (cur) {
                                while ((cur = cur.nextSibling)) {
                                    if (cur === b) {
                                        return -1;
                                    }
                                }
                            }

                            return a ? 1 : -1;
                        }

                        /**
                         * Returns a function to use in pseudos for input types
                         * @param {String} type
                         */
                        function createInputPseudo(type) {
                            return function (elem) {
                                var name = elem.nodeName.toLowerCase();
                                return name === "input" && elem.type === type;
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for buttons
                         * @param {String} type
                         */
                        function createButtonPseudo(type) {
                            return function (elem) {
                                var name = elem.nodeName.toLowerCase();
                                return (name === "input" || name === "button") && elem.type === type;
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for :enabled/:disabled
                         * @param {Boolean} disabled true for :disabled; false for :enabled
                         */
                        function createDisabledPseudo(disabled) {

                            // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                            return function (elem) {

                                // Only certain elements can match :enabled or :disabled
                                // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                                // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                                if ("form" in elem) {

                                    // Check for inherited disabledness on relevant non-disabled elements:
                                    // * listed form-associated elements in a disabled fieldset
                                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                                    // * option elements in a disabled optgroup
                                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                                    // All such elements have a "form" property.
                                    if (elem.parentNode && elem.disabled === false) {

                                        // Option elements defer to a parent optgroup if present
                                        if ("label" in elem) {
                                            if ("label" in elem.parentNode) {
                                                return elem.parentNode.disabled === disabled;
                                            } else {
                                                return elem.disabled === disabled;
                                            }
                                        }

                                        // Support: IE 6 - 11
                                        // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                                        return elem.isDisabled === disabled ||

                                            // Where there is no isDisabled, check manually
                                            /* jshint -W018 */
                                            elem.isDisabled !== !disabled &&
                                            disabledAncestor(elem) === disabled;
                                    }

                                    return elem.disabled === disabled;

                                    // Try to winnow out elements that can't be disabled before trusting the disabled property.
                                    // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                                    // even exist on them, let alone have a boolean value.
                                } else if ("label" in elem) {
                                    return elem.disabled === disabled;
                                }

                                // Remaining elements are neither :enabled nor :disabled
                                return false;
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for positionals
                         * @param {Function} fn
                         */
                        function createPositionalPseudo(fn) {
                            return markFunction(function (argument) {
                                argument = +argument;
                                return markFunction(function (seed, matches) {
                                    var j,
                                        matchIndexes = fn([], seed.length, argument),
                                        i = matchIndexes.length;

                                    // Match elements found at the specified indexes
                                    while (i--) {
                                        if (seed[(j = matchIndexes[i])]) {
                                            seed[j] = !(matches[j] = seed[j]);
                                        }
                                    }
                                });
                            });
                        }

                        /**
                         * Checks a node for validity as a Sizzle context
                         * @param {Element|Object=} context
                         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
                         */
                        function testContext(context) {
                            return context && typeof context.getElementsByTagName !== "undefined" && context;
                        }

// Expose support vars for convenience
                        support = Sizzle.support = {};

                        /**
                         * Detects XML nodes
                         * @param {Element|Object} elem An element or a document
                         * @returns {Boolean} True iff elem is a non-HTML XML node
                         */
                        isXML = Sizzle.isXML = function (elem) {
                            // documentElement is verified for cases where it doesn't yet exist
                            // (such as loading iframes in IE - #4833)
                            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                            return documentElement ? documentElement.nodeName !== "HTML" : false;
                        };

                        /**
                         * Sets document-related variables once based on the current document
                         * @param {Element|Object} [doc] An element or document object to use to set the document
                         * @returns {Object} Returns the current document
                         */
                        setDocument = Sizzle.setDocument = function (node) {
                            var hasCompare, subWindow,
                                doc = node ? node.ownerDocument || node : preferredDoc;

                            // Return early if doc is invalid or already selected
                            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                                return document;
                            }

                            // Update global variables
                            document = doc;
                            docElem = document.documentElement;
                            documentIsHTML = !isXML(document);

                            // Support: IE 9-11, Edge
                            // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                            if (preferredDoc !== document &&
                                (subWindow = document.defaultView) && subWindow.top !== subWindow) {

                                // Support: IE 11, Edge
                                if (subWindow.addEventListener) {
                                    subWindow.addEventListener("unload", unloadHandler, false);

                                    // Support: IE 9 - 10 only
                                } else if (subWindow.attachEvent) {
                                    subWindow.attachEvent("onunload", unloadHandler);
                                }
                            }

                            /* Attributes
	---------------------------------------------------------------------- */

                            // Support: IE<8
                            // Verify that getAttribute really returns attributes and not properties
                            // (excepting IE8 booleans)
                            support.attributes = assert(function (el) {
                                el.className = "i";
                                return !el.getAttribute("className");
                            });

                            /* getElement(s)By*
	---------------------------------------------------------------------- */

                            // Check if getElementsByTagName("*") returns only elements
                            support.getElementsByTagName = assert(function (el) {
                                el.appendChild(document.createComment(""));
                                return !el.getElementsByTagName("*").length;
                            });

                            // Support: IE<9
                            support.getElementsByClassName = rnative.test(document.getElementsByClassName);

                            // Support: IE<10
                            // Check if getElementById returns elements by name
                            // The broken getElementById methods don't pick up programmatically-set names,
                            // so use a roundabout getElementsByName test
                            support.getById = assert(function (el) {
                                docElem.appendChild(el).id = expando;
                                return !document.getElementsByName || !document.getElementsByName(expando).length;
                            });

                            // ID filter and find
                            if (support.getById) {
                                Expr.filter["ID"] = function (id) {
                                    var attrId = id.replace(runescape, funescape);
                                    return function (elem) {
                                        return elem.getAttribute("id") === attrId;
                                    };
                                };
                                Expr.find["ID"] = function (id, context) {
                                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                                        var elem = context.getElementById(id);
                                        return elem ? [elem] : [];
                                    }
                                };
                            } else {
                                Expr.filter["ID"] = function (id) {
                                    var attrId = id.replace(runescape, funescape);
                                    return function (elem) {
                                        var node = typeof elem.getAttributeNode !== "undefined" &&
                                            elem.getAttributeNode("id");
                                        return node && node.value === attrId;
                                    };
                                };

                                // Support: IE 6 - 7 only
                                // getElementById is not reliable as a find shortcut
                                Expr.find["ID"] = function (id, context) {
                                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                                        var node, i, elems,
                                            elem = context.getElementById(id);

                                        if (elem) {

                                            // Verify the id attribute
                                            node = elem.getAttributeNode("id");
                                            if (node && node.value === id) {
                                                return [elem];
                                            }

                                            // Fall back on getElementsByName
                                            elems = context.getElementsByName(id);
                                            i = 0;
                                            while ((elem = elems[i++])) {
                                                node = elem.getAttributeNode("id");
                                                if (node && node.value === id) {
                                                    return [elem];
                                                }
                                            }
                                        }

                                        return [];
                                    }
                                };
                            }

                            // Tag
                            Expr.find["TAG"] = support.getElementsByTagName ?
                                function (tag, context) {
                                    if (typeof context.getElementsByTagName !== "undefined") {
                                        return context.getElementsByTagName(tag);

                                        // DocumentFragment nodes don't have gEBTN
                                    } else if (support.qsa) {
                                        return context.querySelectorAll(tag);
                                    }
                                } :

                                function (tag, context) {
                                    var elem,
                                        tmp = [],
                                        i = 0,
                                        // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                                        results = context.getElementsByTagName(tag);

                                    // Filter out possible comments
                                    if (tag === "*") {
                                        while ((elem = results[i++])) {
                                            if (elem.nodeType === 1) {
                                                tmp.push(elem);
                                            }
                                        }

                                        return tmp;
                                    }
                                    return results;
                                };

                            // Class
                            Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
                                if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                                    return context.getElementsByClassName(className);
                                }
                            };

                            /* QSA/matchesSelector
	---------------------------------------------------------------------- */

                            // QSA and matchesSelector support

                            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                            rbuggyMatches = [];

                            // qSa(:focus) reports false when true (Chrome 21)
                            // We allow this because of a bug in IE8/9 that throws an error
                            // whenever `document.activeElement` is accessed on an iframe
                            // So, we allow :focus to pass through QSA all the time to avoid the IE error
                            // See https://bugs.jquery.com/ticket/13378
                            rbuggyQSA = [];

                            if ((support.qsa = rnative.test(document.querySelectorAll))) {
                                // Build QSA regex
                                // Regex strategy adopted from Diego Perini
                                assert(function (el) {
                                    // Select is set to empty string on purpose
                                    // This is to test IE's treatment of not explicitly
                                    // setting a boolean content attribute,
                                    // since its presence should be enough
                                    // https://bugs.jquery.com/ticket/12359
                                    docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" +
                                        "<select id='" + expando + "-\r\\' msallowcapture=''>" +
                                        "<option selected=''></option></select>";

                                    // Support: IE8, Opera 11-12.16
                                    // Nothing should be selected when empty strings follow ^= or $= or *=
                                    // The test attribute must be unknown in Opera but "safe" for WinRT
                                    // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                                    if (el.querySelectorAll("[msallowcapture^='']").length) {
                                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                                    }

                                    // Support: IE8
                                    // Boolean attributes and "value" are not treated correctly
                                    if (!el.querySelectorAll("[selected]").length) {
                                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                                    }

                                    // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                                        rbuggyQSA.push("~=");
                                    }

                                    // Webkit/Opera - :checked should return selected option elements
                                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                                    // IE8 throws error here and will not see later tests
                                    if (!el.querySelectorAll(":checked").length) {
                                        rbuggyQSA.push(":checked");
                                    }

                                    // Support: Safari 8+, iOS 8+
                                    // https://bugs.webkit.org/show_bug.cgi?id=136851
                                    // In-page `selector#id sibling-combinator selector` fails
                                    if (!el.querySelectorAll("a#" + expando + "+*").length) {
                                        rbuggyQSA.push(".#.+[+~]");
                                    }
                                });

                                assert(function (el) {
                                    el.innerHTML = "<a href='' disabled='disabled'></a>" +
                                        "<select disabled='disabled'><option/></select>";

                                    // Support: Windows 8 Native Apps
                                    // The type and name attributes are restricted during .innerHTML assignment
                                    var input = document.createElement("input");
                                    input.setAttribute("type", "hidden");
                                    el.appendChild(input).setAttribute("name", "D");

                                    // Support: IE8
                                    // Enforce case-sensitivity of name attribute
                                    if (el.querySelectorAll("[name=d]").length) {
                                        rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                                    }

                                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                                    // IE8 throws error here and will not see later tests
                                    if (el.querySelectorAll(":enabled").length !== 2) {
                                        rbuggyQSA.push(":enabled", ":disabled");
                                    }

                                    // Support: IE9-11+
                                    // IE's :disabled selector does not pick up the children of disabled fieldsets
                                    docElem.appendChild(el).disabled = true;
                                    if (el.querySelectorAll(":disabled").length !== 2) {
                                        rbuggyQSA.push(":enabled", ":disabled");
                                    }

                                    // Opera 10-11 does not throw on post-comma invalid pseudos
                                    el.querySelectorAll("*,:x");
                                    rbuggyQSA.push(",.*:");
                                });
                            }

                            if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
                                docElem.webkitMatchesSelector ||
                                docElem.mozMatchesSelector ||
                                docElem.oMatchesSelector ||
                                docElem.msMatchesSelector)))) {

                                assert(function (el) {
                                    // Check to see if it's possible to do matchesSelector
                                    // on a disconnected node (IE 9)
                                    support.disconnectedMatch = matches.call(el, "*");

                                    // This should fail with an exception
                                    // Gecko does not error, returns false instead
                                    matches.call(el, "[s!='']:x");
                                    rbuggyMatches.push("!=", pseudos);
                                });
                            }

                            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                            /* Contains
	---------------------------------------------------------------------- */
                            hasCompare = rnative.test(docElem.compareDocumentPosition);

                            // Element contains another
                            // Purposefully self-exclusive
                            // As in, an element does not contain itself
                            contains = hasCompare || rnative.test(docElem.contains) ?
                                function (a, b) {
                                    var adown = a.nodeType === 9 ? a.documentElement : a,
                                        bup = b && b.parentNode;
                                    return a === bup || !!(bup && bup.nodeType === 1 && (
                                        adown.contains ?
                                            adown.contains(bup) :
                                            a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
                                    ));
                                } :
                                function (a, b) {
                                    if (b) {
                                        while ((b = b.parentNode)) {
                                            if (b === a) {
                                                return true;
                                            }
                                        }
                                    }
                                    return false;
                                };

                            /* Sorting
	---------------------------------------------------------------------- */

                            // Document order sorting
                            sortOrder = hasCompare ?
                                function (a, b) {

                                    // Flag for duplicate removal
                                    if (a === b) {
                                        hasDuplicate = true;
                                        return 0;
                                    }

                                    // Sort on method existence if only one input has compareDocumentPosition
                                    var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                                    if (compare) {
                                        return compare;
                                    }

                                    // Calculate position if both inputs belong to the same document
                                    compare = (a.ownerDocument || a) === (b.ownerDocument || b) ?
                                        a.compareDocumentPosition(b) :

                                        // Otherwise we know they are disconnected
                                        1;

                                    // Disconnected nodes
                                    if (compare & 1 ||
                                        (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

                                        // Choose the first element that is related to our preferred document
                                        if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                                            return -1;
                                        }
                                        if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                                            return 1;
                                        }

                                        // Maintain original order
                                        return sortInput ?
                                            (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                                            0;
                                    }

                                    return compare & 4 ? -1 : 1;
                                } :
                                function (a, b) {
                                    // Exit early if the nodes are identical
                                    if (a === b) {
                                        hasDuplicate = true;
                                        return 0;
                                    }

                                    var cur,
                                        i = 0,
                                        aup = a.parentNode,
                                        bup = b.parentNode,
                                        ap = [a],
                                        bp = [b];

                                    // Parentless nodes are either documents or disconnected
                                    if (!aup || !bup) {
                                        return a === document ? -1 :
                                            b === document ? 1 :
                                                aup ? -1 :
                                                    bup ? 1 :
                                                        sortInput ?
                                                            (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                                                            0;

                                        // If the nodes are siblings, we can do a quick check
                                    } else if (aup === bup) {
                                        return siblingCheck(a, b);
                                    }

                                    // Otherwise we need full lists of their ancestors for comparison
                                    cur = a;
                                    while ((cur = cur.parentNode)) {
                                        ap.unshift(cur);
                                    }
                                    cur = b;
                                    while ((cur = cur.parentNode)) {
                                        bp.unshift(cur);
                                    }

                                    // Walk down the tree looking for a discrepancy
                                    while (ap[i] === bp[i]) {
                                        i++;
                                    }

                                    return i ?
                                        // Do a sibling check if the nodes have a common ancestor
                                        siblingCheck(ap[i], bp[i]) :

                                        // Otherwise nodes in our document sort first
                                        ap[i] === preferredDoc ? -1 :
                                            bp[i] === preferredDoc ? 1 :
                                                0;
                                };

                            return document;
                        };

                        Sizzle.matches = function (expr, elements) {
                            return Sizzle(expr, null, null, elements);
                        };

                        Sizzle.matchesSelector = function (elem, expr) {
                            // Set document vars if needed
                            if ((elem.ownerDocument || elem) !== document) {
                                setDocument(elem);
                            }

                            // Make sure that attribute selectors are quoted
                            expr = expr.replace(rattributeQuotes, "='$1']");

                            if (support.matchesSelector && documentIsHTML &&
                                !compilerCache[expr + " "] &&
                                (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                                (!rbuggyQSA || !rbuggyQSA.test(expr))) {

                                try {
                                    var ret = matches.call(elem, expr);

                                    // IE 9's matchesSelector returns false on disconnected nodes
                                    if (ret || support.disconnectedMatch ||
                                        // As well, disconnected nodes are said to be in a document
                                        // fragment in IE 9
                                        elem.document && elem.document.nodeType !== 11) {
                                        return ret;
                                    }
                                } catch (e) {
                                }
                            }

                            return Sizzle(expr, document, null, [elem]).length > 0;
                        };

                        Sizzle.contains = function (context, elem) {
                            // Set document vars if needed
                            if ((context.ownerDocument || context) !== document) {
                                setDocument(context);
                            }
                            return contains(context, elem);
                        };

                        Sizzle.attr = function (elem, name) {
                            // Set document vars if needed
                            if ((elem.ownerDocument || elem) !== document) {
                                setDocument(elem);
                            }

                            var fn = Expr.attrHandle[name.toLowerCase()],
                                // Don't get fooled by Object.prototype properties (jQuery #13807)
                                val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
                                    fn(elem, name, !documentIsHTML) :
                                    undefined;

                            return val !== undefined ?
                                val :
                                support.attributes || !documentIsHTML ?
                                    elem.getAttribute(name) :
                                    (val = elem.getAttributeNode(name)) && val.specified ?
                                        val.value :
                                        null;
                        };

                        Sizzle.escape = function (sel) {
                            return (sel + "").replace(rcssescape, fcssescape);
                        };

                        Sizzle.error = function (msg) {
                            throw new Error("Syntax error, unrecognized expression: " + msg);
                        };

                        /**
                         * Document sorting and removing duplicates
                         * @param {ArrayLike} results
                         */
                        Sizzle.uniqueSort = function (results) {
                            var elem,
                                duplicates = [],
                                j = 0,
                                i = 0;

                            // Unless we *know* we can detect duplicates, assume their presence
                            hasDuplicate = !support.detectDuplicates;
                            sortInput = !support.sortStable && results.slice(0);
                            results.sort(sortOrder);

                            if (hasDuplicate) {
                                while ((elem = results[i++])) {
                                    if (elem === results[i]) {
                                        j = duplicates.push(i);
                                    }
                                }
                                while (j--) {
                                    results.splice(duplicates[j], 1);
                                }
                            }

                            // Clear input after sorting to release objects
                            // See https://github.com/jquery/sizzle/pull/225
                            sortInput = null;

                            return results;
                        };

                        /**
                         * Utility function for retrieving the text value of an array of DOM nodes
                         * @param {Array|Element} elem
                         */
                        getText = Sizzle.getText = function (elem) {
                            var node,
                                ret = "",
                                i = 0,
                                nodeType = elem.nodeType;

                            if (!nodeType) {
                                // If no nodeType, this is expected to be an array
                                while ((node = elem[i++])) {
                                    // Do not traverse comment nodes
                                    ret += getText(node);
                                }
                            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                                // Use textContent for elements
                                // innerText usage removed for consistency of new lines (jQuery #11153)
                                if (typeof elem.textContent === "string") {
                                    return elem.textContent;
                                } else {
                                    // Traverse its children
                                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                        ret += getText(elem);
                                    }
                                }
                            } else if (nodeType === 3 || nodeType === 4) {
                                return elem.nodeValue;
                            }
                            // Do not include comment or processing instruction nodes

                            return ret;
                        };

                        Expr = Sizzle.selectors = {

                            // Can be adjusted by the user
                            cacheLength: 50,

                            createPseudo: markFunction,

                            match: matchExpr,

                            attrHandle: {},

                            find: {},

                            relative: {
                                ">": {dir: "parentNode", first: true},
                                " ": {dir: "parentNode"},
                                "+": {dir: "previousSibling", first: true},
                                "~": {dir: "previousSibling"}
                            },

                            preFilter: {
                                "ATTR": function (match) {
                                    match[1] = match[1].replace(runescape, funescape);

                                    // Move the given value to match[3] whether quoted or unquoted
                                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

                                    if (match[2] === "~=") {
                                        match[3] = " " + match[3] + " ";
                                    }

                                    return match.slice(0, 4);
                                },

                                "CHILD": function (match) {
                                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
                                    match[1] = match[1].toLowerCase();

                                    if (match[1].slice(0, 3) === "nth") {
                                        // nth-* requires argument
                                        if (!match[3]) {
                                            Sizzle.error(match[0]);
                                        }

                                        // numeric x and y parameters for Expr.filter.CHILD
                                        // remember that false/true cast respectively to 0/1
                                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                                        match[5] = +((match[7] + match[8]) || match[3] === "odd");

                                        // other types prohibit arguments
                                    } else if (match[3]) {
                                        Sizzle.error(match[0]);
                                    }

                                    return match;
                                },

                                "PSEUDO": function (match) {
                                    var excess,
                                        unquoted = !match[6] && match[2];

                                    if (matchExpr["CHILD"].test(match[0])) {
                                        return null;
                                    }

                                    // Accept quoted arguments as-is
                                    if (match[3]) {
                                        match[2] = match[4] || match[5] || "";

                                        // Strip excess characters from unquoted arguments
                                    } else if (unquoted && rpseudo.test(unquoted) &&
                                        // Get excess from tokenize (recursively)
                                        (excess = tokenize(unquoted, true)) &&
                                        // advance to the next closing parenthesis
                                        (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                                        // excess is a negative index
                                        match[0] = match[0].slice(0, excess);
                                        match[2] = unquoted.slice(0, excess);
                                    }

                                    // Return only captures needed by the pseudo filter method (type and argument)
                                    return match.slice(0, 3);
                                }
                            },

                            filter: {

                                "TAG": function (nodeNameSelector) {
                                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                                    return nodeNameSelector === "*" ?
                                        function () {
                                            return true;
                                        } :
                                        function (elem) {
                                            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                                        };
                                },

                                "CLASS": function (className) {
                                    var pattern = classCache[className + " "];

                                    return pattern ||
                                        (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                                        classCache(className, function (elem) {
                                            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                                        });
                                },

                                "ATTR": function (name, operator, check) {
                                    return function (elem) {
                                        var result = Sizzle.attr(elem, name);

                                        if (result == null) {
                                            return operator === "!=";
                                        }
                                        if (!operator) {
                                            return true;
                                        }

                                        result += "";

                                        return operator === "=" ? result === check :
                                            operator === "!=" ? result !== check :
                                                operator === "^=" ? check && result.indexOf(check) === 0 :
                                                    operator === "*=" ? check && result.indexOf(check) > -1 :
                                                        operator === "$=" ? check && result.slice(-check.length) === check :
                                                            operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 :
                                                                operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                                                                    false;
                                    };
                                },

                                "CHILD": function (type, what, argument, first, last) {
                                    var simple = type.slice(0, 3) !== "nth",
                                        forward = type.slice(-4) !== "last",
                                        ofType = what === "of-type";

                                    return first === 1 && last === 0 ?

                                        // Shortcut for :nth-*(n)
                                        function (elem) {
                                            return !!elem.parentNode;
                                        } :

                                        function (elem, context, xml) {
                                            var cache, uniqueCache, outerCache, node, nodeIndex, start,
                                                dir = simple !== forward ? "nextSibling" : "previousSibling",
                                                parent = elem.parentNode,
                                                name = ofType && elem.nodeName.toLowerCase(),
                                                useCache = !xml && !ofType,
                                                diff = false;

                                            if (parent) {

                                                // :(first|last|only)-(child|of-type)
                                                if (simple) {
                                                    while (dir) {
                                                        node = elem;
                                                        while ((node = node[dir])) {
                                                            if (ofType ?
                                                                node.nodeName.toLowerCase() === name :
                                                                node.nodeType === 1) {

                                                                return false;
                                                            }
                                                        }
                                                        // Reverse direction for :only-* (if we haven't yet done so)
                                                        start = dir = type === "only" && !start && "nextSibling";
                                                    }
                                                    return true;
                                                }

                                                start = [forward ? parent.firstChild : parent.lastChild];

                                                // non-xml :nth-child(...) stores cache data on `parent`
                                                if (forward && useCache) {

                                                    // Seek `elem` from a previously-cached index

                                                    // ...in a gzip-friendly way
                                                    node = parent;
                                                    outerCache = node[expando] || (node[expando] = {});

                                                    // Support: IE <9 only
                                                    // Defend against cloned attroperties (jQuery gh-1709)
                                                    uniqueCache = outerCache[node.uniqueID] ||
                                                        (outerCache[node.uniqueID] = {});

                                                    cache = uniqueCache[type] || [];
                                                    nodeIndex = cache[0] === dirruns && cache[1];
                                                    diff = nodeIndex && cache[2];
                                                    node = nodeIndex && parent.childNodes[nodeIndex];

                                                    while ((node = ++nodeIndex && node && node[dir] ||

                                                        // Fallback to seeking `elem` from the start
                                                        (diff = nodeIndex = 0) || start.pop())) {

                                                        // When found, cache indexes on `parent` and break
                                                        if (node.nodeType === 1 && ++diff && node === elem) {
                                                            uniqueCache[type] = [dirruns, nodeIndex, diff];
                                                            break;
                                                        }
                                                    }

                                                } else {
                                                    // Use previously-cached element index if available
                                                    if (useCache) {
                                                        // ...in a gzip-friendly way
                                                        node = elem;
                                                        outerCache = node[expando] || (node[expando] = {});

                                                        // Support: IE <9 only
                                                        // Defend against cloned attroperties (jQuery gh-1709)
                                                        uniqueCache = outerCache[node.uniqueID] ||
                                                            (outerCache[node.uniqueID] = {});

                                                        cache = uniqueCache[type] || [];
                                                        nodeIndex = cache[0] === dirruns && cache[1];
                                                        diff = nodeIndex;
                                                    }

                                                    // xml :nth-child(...)
                                                    // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                                    if (diff === false) {
                                                        // Use the same loop as above to seek `elem` from the start
                                                        while ((node = ++nodeIndex && node && node[dir] ||
                                                            (diff = nodeIndex = 0) || start.pop())) {

                                                            if ((ofType ?
                                                                node.nodeName.toLowerCase() === name :
                                                                node.nodeType === 1) &&
                                                                ++diff) {

                                                                // Cache the index of each encountered element
                                                                if (useCache) {
                                                                    outerCache = node[expando] || (node[expando] = {});

                                                                    // Support: IE <9 only
                                                                    // Defend against cloned attroperties (jQuery gh-1709)
                                                                    uniqueCache = outerCache[node.uniqueID] ||
                                                                        (outerCache[node.uniqueID] = {});

                                                                    uniqueCache[type] = [dirruns, diff];
                                                                }

                                                                if (node === elem) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                // Incorporate the offset, then check against cycle size
                                                diff -= last;
                                                return diff === first || (diff % first === 0 && diff / first >= 0);
                                            }
                                        };
                                },

                                "PSEUDO": function (pseudo, argument) {
                                    // pseudo-class names are case-insensitive
                                    // http://www.w3.org/TR/selectors/#pseudo-classes
                                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                                    // Remember that setFilters inherits from pseudos
                                    var args,
                                        fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                                            Sizzle.error("unsupported pseudo: " + pseudo);

                                    // The user may use createPseudo to indicate that
                                    // arguments are needed to create the filter function
                                    // just as Sizzle does
                                    if (fn[expando]) {
                                        return fn(argument);
                                    }

                                    // But maintain support for old signatures
                                    if (fn.length > 1) {
                                        args = [pseudo, pseudo, "", argument];
                                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                                            markFunction(function (seed, matches) {
                                                var idx,
                                                    matched = fn(seed, argument),
                                                    i = matched.length;
                                                while (i--) {
                                                    idx = indexOf(seed, matched[i]);
                                                    seed[idx] = !(matches[idx] = matched[i]);
                                                }
                                            }) :
                                            function (elem) {
                                                return fn(elem, 0, args);
                                            };
                                    }

                                    return fn;
                                }
                            },

                            pseudos: {
                                // Potentially complex pseudos
                                "not": markFunction(function (selector) {
                                    // Trim the selector passed to compile
                                    // to avoid treating leading and trailing
                                    // spaces as combinators
                                    var input = [],
                                        results = [],
                                        matcher = compile(selector.replace(rtrim, "$1"));

                                    return matcher[expando] ?
                                        markFunction(function (seed, matches, context, xml) {
                                            var elem,
                                                unmatched = matcher(seed, null, xml, []),
                                                i = seed.length;

                                            // Match elements unmatched by `matcher`
                                            while (i--) {
                                                if ((elem = unmatched[i])) {
                                                    seed[i] = !(matches[i] = elem);
                                                }
                                            }
                                        }) :
                                        function (elem, context, xml) {
                                            input[0] = elem;
                                            matcher(input, null, xml, results);
                                            // Don't keep the element (issue #299)
                                            input[0] = null;
                                            return !results.pop();
                                        };
                                }),

                                "has": markFunction(function (selector) {
                                    return function (elem) {
                                        return Sizzle(selector, elem).length > 0;
                                    };
                                }),

                                "contains": markFunction(function (text) {
                                    text = text.replace(runescape, funescape);
                                    return function (elem) {
                                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                                    };
                                }),

                                // "Whether an element is represented by a :lang() selector
                                // is based solely on the element's language value
                                // being equal to the identifier C,
                                // or beginning with the identifier C immediately followed by "-".
                                // The matching of C against the element's language value is performed case-insensitively.
                                // The identifier C does not have to be a valid language name."
                                // http://www.w3.org/TR/selectors/#lang-pseudo
                                "lang": markFunction(function (lang) {
                                    // lang value must be a valid identifier
                                    if (!ridentifier.test(lang || "")) {
                                        Sizzle.error("unsupported lang: " + lang);
                                    }
                                    lang = lang.replace(runescape, funescape).toLowerCase();
                                    return function (elem) {
                                        var elemLang;
                                        do {
                                            if ((elemLang = documentIsHTML ?
                                                elem.lang :
                                                elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

                                                elemLang = elemLang.toLowerCase();
                                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                                            }
                                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                                        return false;
                                    };
                                }),

                                // Miscellaneous
                                "target": function (elem) {
                                    var hash = window.location && window.location.hash;
                                    return hash && hash.slice(1) === elem.id;
                                },

                                "root": function (elem) {
                                    return elem === docElem;
                                },

                                "focus": function (elem) {
                                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                                },

                                // Boolean properties
                                "enabled": createDisabledPseudo(false),
                                "disabled": createDisabledPseudo(true),

                                "checked": function (elem) {
                                    // In CSS3, :checked should return both checked and selected elements
                                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                                    var nodeName = elem.nodeName.toLowerCase();
                                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                                },

                                "selected": function (elem) {
                                    // Accessing this property makes selected-by-default
                                    // options in Safari work properly
                                    if (elem.parentNode) {
                                        elem.parentNode.selectedIndex;
                                    }

                                    return elem.selected === true;
                                },

                                // Contents
                                "empty": function (elem) {
                                    // http://www.w3.org/TR/selectors/#empty-pseudo
                                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                                    // nodeType < 6 works because attributes (2) do not appear as children
                                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                        if (elem.nodeType < 6) {
                                            return false;
                                        }
                                    }
                                    return true;
                                },

                                "parent": function (elem) {
                                    return !Expr.pseudos["empty"](elem);
                                },

                                // Element/input types
                                "header": function (elem) {
                                    return rheader.test(elem.nodeName);
                                },

                                "input": function (elem) {
                                    return rinputs.test(elem.nodeName);
                                },

                                "button": function (elem) {
                                    var name = elem.nodeName.toLowerCase();
                                    return name === "input" && elem.type === "button" || name === "button";
                                },

                                "text": function (elem) {
                                    var attr;
                                    return elem.nodeName.toLowerCase() === "input" &&
                                        elem.type === "text" &&

                                        // Support: IE<8
                                        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                                        ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                                },

                                // Position-in-collection
                                "first": createPositionalPseudo(function () {
                                    return [0];
                                }),

                                "last": createPositionalPseudo(function (matchIndexes, length) {
                                    return [length - 1];
                                }),

                                "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
                                    return [argument < 0 ? argument + length : argument];
                                }),

                                "even": createPositionalPseudo(function (matchIndexes, length) {
                                    var i = 0;
                                    for (; i < length; i += 2) {
                                        matchIndexes.push(i);
                                    }
                                    return matchIndexes;
                                }),

                                "odd": createPositionalPseudo(function (matchIndexes, length) {
                                    var i = 1;
                                    for (; i < length; i += 2) {
                                        matchIndexes.push(i);
                                    }
                                    return matchIndexes;
                                }),

                                "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
                                    var i = argument < 0 ? argument + length : argument;
                                    for (; --i >= 0;) {
                                        matchIndexes.push(i);
                                    }
                                    return matchIndexes;
                                }),

                                "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
                                    var i = argument < 0 ? argument + length : argument;
                                    for (; ++i < length;) {
                                        matchIndexes.push(i);
                                    }
                                    return matchIndexes;
                                })
                            }
                        };

                        Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
                        for (i in {radio: true, checkbox: true, file: true, password: true, image: true}) {
                            Expr.pseudos[i] = createInputPseudo(i);
                        }
                        for (i in {submit: true, reset: true}) {
                            Expr.pseudos[i] = createButtonPseudo(i);
                        }

// Easy API for creating new setFilters
                        function setFilters() {
                        }

                        setFilters.prototype = Expr.filters = Expr.pseudos;
                        Expr.setFilters = new setFilters();

                        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
                            var matched, match, tokens, type,
                                soFar, groups, preFilters,
                                cached = tokenCache[selector + " "];

                            if (cached) {
                                return parseOnly ? 0 : cached.slice(0);
                            }

                            soFar = selector;
                            groups = [];
                            preFilters = Expr.preFilter;

                            while (soFar) {

                                // Comma and first run
                                if (!matched || (match = rcomma.exec(soFar))) {
                                    if (match) {
                                        // Don't consume trailing commas as valid
                                        soFar = soFar.slice(match[0].length) || soFar;
                                    }
                                    groups.push((tokens = []));
                                }

                                matched = false;

                                // Combinators
                                if ((match = rcombinators.exec(soFar))) {
                                    matched = match.shift();
                                    tokens.push({
                                        value: matched,
                                        // Cast descendant combinators to space
                                        type: match[0].replace(rtrim, " ")
                                    });
                                    soFar = soFar.slice(matched.length);
                                }

                                // Filters
                                for (type in Expr.filter) {
                                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                                        (match = preFilters[type](match)))) {
                                        matched = match.shift();
                                        tokens.push({
                                            value: matched,
                                            type: type,
                                            matches: match
                                        });
                                        soFar = soFar.slice(matched.length);
                                    }
                                }

                                if (!matched) {
                                    break;
                                }
                            }

                            // Return the length of the invalid excess
                            // if we're just parsing
                            // Otherwise, throw an error or return tokens
                            return parseOnly ?
                                soFar.length :
                                soFar ?
                                    Sizzle.error(selector) :
                                    // Cache the tokens
                                    tokenCache(selector, groups).slice(0);
                        };

                        function toSelector(tokens) {
                            var i = 0,
                                len = tokens.length,
                                selector = "";
                            for (; i < len; i++) {
                                selector += tokens[i].value;
                            }
                            return selector;
                        }

                        function addCombinator(matcher, combinator, base) {
                            var dir = combinator.dir,
                                skip = combinator.next,
                                key = skip || dir,
                                checkNonElements = base && key === "parentNode",
                                doneName = done++;

                            return combinator.first ?
                                // Check against closest ancestor/preceding element
                                function (elem, context, xml) {
                                    while ((elem = elem[dir])) {
                                        if (elem.nodeType === 1 || checkNonElements) {
                                            return matcher(elem, context, xml);
                                        }
                                    }
                                    return false;
                                } :

                                // Check against all ancestor/preceding elements
                                function (elem, context, xml) {
                                    var oldCache, uniqueCache, outerCache,
                                        newCache = [dirruns, doneName];

                                    // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                                    if (xml) {
                                        while ((elem = elem[dir])) {
                                            if (elem.nodeType === 1 || checkNonElements) {
                                                if (matcher(elem, context, xml)) {
                                                    return true;
                                                }
                                            }
                                        }
                                    } else {
                                        while ((elem = elem[dir])) {
                                            if (elem.nodeType === 1 || checkNonElements) {
                                                outerCache = elem[expando] || (elem[expando] = {});

                                                // Support: IE <9 only
                                                // Defend against cloned attroperties (jQuery gh-1709)
                                                uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                                                if (skip && skip === elem.nodeName.toLowerCase()) {
                                                    elem = elem[dir] || elem;
                                                } else if ((oldCache = uniqueCache[key]) &&
                                                    oldCache[0] === dirruns && oldCache[1] === doneName) {

                                                    // Assign to newCache so results back-propagate to previous elements
                                                    return (newCache[2] = oldCache[2]);
                                                } else {
                                                    // Reuse newcache so results back-propagate to previous elements
                                                    uniqueCache[key] = newCache;

                                                    // A match means we're done; a fail means we have to keep checking
                                                    if ((newCache[2] = matcher(elem, context, xml))) {
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return false;
                                };
                        }

                        function elementMatcher(matchers) {
                            return matchers.length > 1 ?
                                function (elem, context, xml) {
                                    var i = matchers.length;
                                    while (i--) {
                                        if (!matchers[i](elem, context, xml)) {
                                            return false;
                                        }
                                    }
                                    return true;
                                } :
                                matchers[0];
                        }

                        function multipleContexts(selector, contexts, results) {
                            var i = 0,
                                len = contexts.length;
                            for (; i < len; i++) {
                                Sizzle(selector, contexts[i], results);
                            }
                            return results;
                        }

                        function condense(unmatched, map, filter, context, xml) {
                            var elem,
                                newUnmatched = [],
                                i = 0,
                                len = unmatched.length,
                                mapped = map != null;

                            for (; i < len; i++) {
                                if ((elem = unmatched[i])) {
                                    if (!filter || filter(elem, context, xml)) {
                                        newUnmatched.push(elem);
                                        if (mapped) {
                                            map.push(i);
                                        }
                                    }
                                }
                            }

                            return newUnmatched;
                        }

                        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                            if (postFilter && !postFilter[expando]) {
                                postFilter = setMatcher(postFilter);
                            }
                            if (postFinder && !postFinder[expando]) {
                                postFinder = setMatcher(postFinder, postSelector);
                            }
                            return markFunction(function (seed, results, context, xml) {
                                var temp, i, elem,
                                    preMap = [],
                                    postMap = [],
                                    preexisting = results.length,

                                    // Get initial elements from seed or context
                                    elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

                                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                                    matcherIn = preFilter && (seed || !selector) ?
                                        condense(elems, preMap, preFilter, context, xml) :
                                        elems,

                                    matcherOut = matcher ?
                                        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                                        postFinder || (seed ? preFilter : preexisting || postFilter) ?

                                            // ...intermediate processing is necessary
                                            [] :

                                            // ...otherwise use results directly
                                            results :
                                        matcherIn;

                                // Find primary matches
                                if (matcher) {
                                    matcher(matcherIn, matcherOut, context, xml);
                                }

                                // Apply postFilter
                                if (postFilter) {
                                    temp = condense(matcherOut, postMap);
                                    postFilter(temp, [], context, xml);

                                    // Un-match failing elements by moving them back to matcherIn
                                    i = temp.length;
                                    while (i--) {
                                        if ((elem = temp[i])) {
                                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                                        }
                                    }
                                }

                                if (seed) {
                                    if (postFinder || preFilter) {
                                        if (postFinder) {
                                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                                            temp = [];
                                            i = matcherOut.length;
                                            while (i--) {
                                                if ((elem = matcherOut[i])) {
                                                    // Restore matcherIn since elem is not yet a final match
                                                    temp.push((matcherIn[i] = elem));
                                                }
                                            }
                                            postFinder(null, (matcherOut = []), temp, xml);
                                        }

                                        // Move matched elements from seed to results to keep them synchronized
                                        i = matcherOut.length;
                                        while (i--) {
                                            if ((elem = matcherOut[i]) &&
                                                (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

                                                seed[temp] = !(results[temp] = elem);
                                            }
                                        }
                                    }

                                    // Add elements to results, through postFinder if defined
                                } else {
                                    matcherOut = condense(
                                        matcherOut === results ?
                                            matcherOut.splice(preexisting, matcherOut.length) :
                                            matcherOut
                                    );
                                    if (postFinder) {
                                        postFinder(null, results, matcherOut, xml);
                                    } else {
                                        push.apply(results, matcherOut);
                                    }
                                }
                            });
                        }

                        function matcherFromTokens(tokens) {
                            var checkContext, matcher, j,
                                len = tokens.length,
                                leadingRelative = Expr.relative[tokens[0].type],
                                implicitRelative = leadingRelative || Expr.relative[" "],
                                i = leadingRelative ? 1 : 0,

                                // The foundational matcher ensures that elements are reachable from top-level context(s)
                                matchContext = addCombinator(function (elem) {
                                    return elem === checkContext;
                                }, implicitRelative, true),
                                matchAnyContext = addCombinator(function (elem) {
                                    return indexOf(checkContext, elem) > -1;
                                }, implicitRelative, true),
                                matchers = [function (elem, context, xml) {
                                    var ret = (!leadingRelative && (xml || context !== outermostContext)) || (
                                        (checkContext = context).nodeType ?
                                            matchContext(elem, context, xml) :
                                            matchAnyContext(elem, context, xml));
                                    // Avoid hanging onto element (issue #299)
                                    checkContext = null;
                                    return ret;
                                }];

                            for (; i < len; i++) {
                                if ((matcher = Expr.relative[tokens[i].type])) {
                                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                                } else {
                                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                                    // Return special upon seeing a positional matcher
                                    if (matcher[expando]) {
                                        // Find the next relative operator (if any) for proper handling
                                        j = ++i;
                                        for (; j < len; j++) {
                                            if (Expr.relative[tokens[j].type]) {
                                                break;
                                            }
                                        }
                                        return setMatcher(
                                            i > 1 && elementMatcher(matchers),
                                            i > 1 && toSelector(
                                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                                            tokens.slice(0, i - 1).concat({value: tokens[i - 2].type === " " ? "*" : ""})
                                            ).replace(rtrim, "$1"),
                                            matcher,
                                            i < j && matcherFromTokens(tokens.slice(i, j)),
                                            j < len && matcherFromTokens((tokens = tokens.slice(j))),
                                            j < len && toSelector(tokens)
                                        );
                                    }
                                    matchers.push(matcher);
                                }
                            }

                            return elementMatcher(matchers);
                        }

                        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                            var bySet = setMatchers.length > 0,
                                byElement = elementMatchers.length > 0,
                                superMatcher = function (seed, context, xml, results, outermost) {
                                    var elem, j, matcher,
                                        matchedCount = 0,
                                        i = "0",
                                        unmatched = seed && [],
                                        setMatched = [],
                                        contextBackup = outermostContext,
                                        // We must always have either seed elements or outermost context
                                        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                                        // Use integer dirruns iff this is the outermost matcher
                                        dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                                        len = elems.length;

                                    if (outermost) {
                                        outermostContext = context === document || context || outermost;
                                    }

                                    // Add elements passing elementMatchers directly to results
                                    // Support: IE<9, Safari
                                    // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                                    for (; i !== len && (elem = elems[i]) != null; i++) {
                                        if (byElement && elem) {
                                            j = 0;
                                            if (!context && elem.ownerDocument !== document) {
                                                setDocument(elem);
                                                xml = !documentIsHTML;
                                            }
                                            while ((matcher = elementMatchers[j++])) {
                                                if (matcher(elem, context || document, xml)) {
                                                    results.push(elem);
                                                    break;
                                                }
                                            }
                                            if (outermost) {
                                                dirruns = dirrunsUnique;
                                            }
                                        }

                                        // Track unmatched elements for set filters
                                        if (bySet) {
                                            // They will have gone through all possible matchers
                                            if ((elem = !matcher && elem)) {
                                                matchedCount--;
                                            }

                                            // Lengthen the array for every element, matched or not
                                            if (seed) {
                                                unmatched.push(elem);
                                            }
                                        }
                                    }

                                    // `i` is now the count of elements visited above, and adding it to `matchedCount`
                                    // makes the latter nonnegative.
                                    matchedCount += i;

                                    // Apply set filters to unmatched elements
                                    // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                                    // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                                    // no element matchers and no seed.
                                    // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                                    // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                                    // numerically zero.
                                    if (bySet && i !== matchedCount) {
                                        j = 0;
                                        while ((matcher = setMatchers[j++])) {
                                            matcher(unmatched, setMatched, context, xml);
                                        }

                                        if (seed) {
                                            // Reintegrate element matches to eliminate the need for sorting
                                            if (matchedCount > 0) {
                                                while (i--) {
                                                    if (!(unmatched[i] || setMatched[i])) {
                                                        setMatched[i] = pop.call(results);
                                                    }
                                                }
                                            }

                                            // Discard index placeholder values to get only actual matches
                                            setMatched = condense(setMatched);
                                        }

                                        // Add matches to results
                                        push.apply(results, setMatched);

                                        // Seedless set matches succeeding multiple successful matchers stipulate sorting
                                        if (outermost && !seed && setMatched.length > 0 &&
                                            (matchedCount + setMatchers.length) > 1) {

                                            Sizzle.uniqueSort(results);
                                        }
                                    }

                                    // Override manipulation of globals by nested matchers
                                    if (outermost) {
                                        dirruns = dirrunsUnique;
                                        outermostContext = contextBackup;
                                    }

                                    return unmatched;
                                };

                            return bySet ?
                                markFunction(superMatcher) :
                                superMatcher;
                        }

                        compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
                            var i,
                                setMatchers = [],
                                elementMatchers = [],
                                cached = compilerCache[selector + " "];

                            if (!cached) {
                                // Generate a function of recursive functions that can be used to check each element
                                if (!match) {
                                    match = tokenize(selector);
                                }
                                i = match.length;
                                while (i--) {
                                    cached = matcherFromTokens(match[i]);
                                    if (cached[expando]) {
                                        setMatchers.push(cached);
                                    } else {
                                        elementMatchers.push(cached);
                                    }
                                }

                                // Cache the compiled function
                                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

                                // Save selector and tokenization
                                cached.selector = selector;
                            }
                            return cached;
                        };

                        /**
                         * A low-level selection function that works with Sizzle's compiled
                         *  selector functions
                         * @param {String|Function} selector A selector or a pre-compiled
                         *  selector function built with Sizzle.compile
                         * @param {Element} context
                         * @param {Array} [results]
                         * @param {Array} [seed] A set of elements to match against
                         */
                        select = Sizzle.select = function (selector, context, results, seed) {
                            var i, tokens, token, type, find,
                                compiled = typeof selector === "function" && selector,
                                match = !seed && tokenize((selector = compiled.selector || selector));

                            results = results || [];

                            // Try to minimize operations if there is only one selector in the list and no seed
                            // (the latter of which guarantees us context)
                            if (match.length === 1) {

                                // Reduce context if the leading compound selector is an ID
                                tokens = match[0] = match[0].slice(0);
                                if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                                    context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

                                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                                    if (!context) {
                                        return results;

                                        // Precompiled matchers will still verify ancestry, so step up a level
                                    } else if (compiled) {
                                        context = context.parentNode;
                                    }

                                    selector = selector.slice(tokens.shift().value.length);
                                }

                                // Fetch a seed set for right-to-left matching
                                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                                while (i--) {
                                    token = tokens[i];

                                    // Abort if we hit a combinator
                                    if (Expr.relative[(type = token.type)]) {
                                        break;
                                    }
                                    if ((find = Expr.find[type])) {
                                        // Search, expanding context for leading sibling combinators
                                        if ((seed = find(
                                            token.matches[0].replace(runescape, funescape),
                                            rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                                        ))) {

                                            // If seed is empty or no tokens remain, we can return early
                                            tokens.splice(i, 1);
                                            selector = seed.length && toSelector(tokens);
                                            if (!selector) {
                                                push.apply(results, seed);
                                                return results;
                                            }

                                            break;
                                        }
                                    }
                                }
                            }

                            // Compile and execute a filtering function if one is not provided
                            // Provide `match` to avoid retokenization if we modified the selector above
                            (compiled || compile(selector, match))(
                                seed,
                                context,
                                !documentIsHTML,
                                results,
                                !context || rsibling.test(selector) && testContext(context.parentNode) || context
                            );
                            return results;
                        };

// One-time assignments

// Sort stability
                        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
                        support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
                        setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
                        support.sortDetached = assert(function (el) {
                            // Should return 1, but returns 4 (following)
                            return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
                        });

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
                        if (!assert(function (el) {
                            el.innerHTML = "<a href='#'></a>";
                            return el.firstChild.getAttribute("href") === "#";
                        })) {
                            addHandle("type|href|height|width", function (elem, name, isXML) {
                                if (!isXML) {
                                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                                }
                            });
                        }

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
                        if (!support.attributes || !assert(function (el) {
                            el.innerHTML = "<input/>";
                            el.firstChild.setAttribute("value", "");
                            return el.firstChild.getAttribute("value") === "";
                        })) {
                            addHandle("value", function (elem, name, isXML) {
                                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                                    return elem.defaultValue;
                                }
                            });
                        }

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
                        if (!assert(function (el) {
                            return el.getAttribute("disabled") == null;
                        })) {
                            addHandle(booleans, function (elem, name, isXML) {
                                var val;
                                if (!isXML) {
                                    return elem[name] === true ? name.toLowerCase() :
                                        (val = elem.getAttributeNode(name)) && val.specified ?
                                            val.value :
                                            null;
                                }
                            });
                        }

                        return Sizzle;

                    })(window);


                jQuery.find = Sizzle;
                jQuery.expr = Sizzle.selectors;

// Deprecated
                jQuery.expr[":"] = jQuery.expr.pseudos;
                jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
                jQuery.text = Sizzle.getText;
                jQuery.isXMLDoc = Sizzle.isXML;
                jQuery.contains = Sizzle.contains;
                jQuery.escapeSelector = Sizzle.escape;


                var dir = function (elem, dir, until) {
                    var matched = [],
                        truncate = until !== undefined;

                    while ((elem = elem[dir]) && elem.nodeType !== 9) {
                        if (elem.nodeType === 1) {
                            if (truncate && jQuery(elem).is(until)) {
                                break;
                            }
                            matched.push(elem);
                        }
                    }
                    return matched;
                };


                var siblings = function (n, elem) {
                    var matched = [];

                    for (; n; n = n.nextSibling) {
                        if (n.nodeType === 1 && n !== elem) {
                            matched.push(n);
                        }
                    }

                    return matched;
                };


                var rneedsContext = jQuery.expr.match.needsContext;


                function nodeName(elem, name) {

                    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

                };
                var rsingleTag = (/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i);


// Implement the identical functionality for filter and not
                function winnow(elements, qualifier, not) {
                    if (isFunction(qualifier)) {
                        return jQuery.grep(elements, function (elem, i) {
                            return !!qualifier.call(elem, i, elem) !== not;
                        });
                    }

                    // Single element
                    if (qualifier.nodeType) {
                        return jQuery.grep(elements, function (elem) {
                            return (elem === qualifier) !== not;
                        });
                    }

                    // Arraylike of elements (jQuery, arguments, Array)
                    if (typeof qualifier !== "string") {
                        return jQuery.grep(elements, function (elem) {
                            return (indexOf.call(qualifier, elem) > -1) !== not;
                        });
                    }

                    // Filtered directly for both simple and complex selectors
                    return jQuery.filter(qualifier, elements, not);
                }

                jQuery.filter = function (expr, elems, not) {
                    var elem = elems[0];

                    if (not) {
                        expr = ":not(" + expr + ")";
                    }

                    if (elems.length === 1 && elem.nodeType === 1) {
                        return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
                    }

                    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
                        return elem.nodeType === 1;
                    }));
                };

                jQuery.fn.extend({
                    find: function (selector) {
                        var i, ret,
                            len = this.length,
                            self = this;

                        if (typeof selector !== "string") {
                            return this.pushStack(jQuery(selector).filter(function () {
                                for (i = 0; i < len; i++) {
                                    if (jQuery.contains(self[i], this)) {
                                        return true;
                                    }
                                }
                            }));
                        }

                        ret = this.pushStack([]);

                        for (i = 0; i < len; i++) {
                            jQuery.find(selector, self[i], ret);
                        }

                        return len > 1 ? jQuery.uniqueSort(ret) : ret;
                    },
                    filter: function (selector) {
                        return this.pushStack(winnow(this, selector || [], false));
                    },
                    not: function (selector) {
                        return this.pushStack(winnow(this, selector || [], true));
                    },
                    is: function (selector) {
                        return !!winnow(
                            this,

                            // If this is a positional/relative selector, check membership in the returned set
                            // so $("p:first").is("p:last") won't return true for a doc with two "p".
                            typeof selector === "string" && rneedsContext.test(selector) ?
                                jQuery(selector) :
                                selector || [],
                            false
                        ).length;
                    }
                });


// Initialize a jQuery object


// A central reference to the root jQuery(document)
                var rootjQuery,

                    // A simple way to check for HTML strings
                    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
                    // Strict HTML recognition (#11290: must start with <)
                    // Shortcut simple #id case for speed
                    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

                    init = jQuery.fn.init = function (selector, context, root) {
                        var match, elem;

                        // HANDLE: $(""), $(null), $(undefined), $(false)
                        if (!selector) {
                            return this;
                        }

                        // Method init() accepts an alternate rootjQuery
                        // so migrate can support jQuery.sub (gh-2101)
                        root = root || rootjQuery;

                        // Handle HTML strings
                        if (typeof selector === "string") {
                            if (selector[0] === "<" &&
                                selector[selector.length - 1] === ">" &&
                                selector.length >= 3) {

                                // Assume that strings that start and end with <> are HTML and skip the regex check
                                match = [null, selector, null];

                            } else {
                                match = rquickExpr.exec(selector);
                            }

                            // Match html or make sure no context is specified for #id
                            if (match && (match[1] || !context)) {

                                // HANDLE: $(html) -> $(array)
                                if (match[1]) {
                                    context = context instanceof jQuery ? context[0] : context;

                                    // Option to run scripts is true for back-compat
                                    // Intentionally let the error be thrown if parseHTML is not present
                                    jQuery.merge(this, jQuery.parseHTML(
                                        match[1],
                                        context && context.nodeType ? context.ownerDocument || context : document,
                                        true
                                    ));

                                    // HANDLE: $(html, props)
                                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                                        for (match in context) {

                                            // Properties of context are called as methods if possible
                                            if (isFunction(this[match])) {
                                                this[match](context[match]);

                                                // ...and otherwise set as attributes
                                            } else {
                                                this.attr(match, context[match]);
                                            }
                                        }
                                    }

                                    return this;

                                    // HANDLE: $(#id)
                                } else {
                                    elem = document.getElementById(match[2]);

                                    if (elem) {

                                        // Inject the element directly into the jQuery object
                                        this[0] = elem;
                                        this.length = 1;
                                    }
                                    return this;
                                }

                                // HANDLE: $(expr, $(...))
                            } else if (!context || context.jquery) {
                                return (context || root).find(selector);

                                // HANDLE: $(expr, context)
                                // (which is just equivalent to: $(context).find(expr)
                            } else {
                                return this.constructor(context).find(selector);
                            }

                            // HANDLE: $(DOMElement)
                        } else if (selector.nodeType) {
                            this[0] = selector;
                            this.length = 1;
                            return this;

                            // HANDLE: $(function)
                            // Shortcut for document ready
                        } else if (isFunction(selector)) {
                            return root.ready !== undefined ?
                                root.ready(selector) :

                                // Execute immediately if ready is not present
                                selector(jQuery);
                        }

                        return jQuery.makeArray(selector, this);
                    };

// Give the init function the jQuery prototype for later instantiation
                init.prototype = jQuery.fn;

// Initialize central reference
                rootjQuery = jQuery(document);


                var rparentsprev = /^(?:parents|prev(?:Until|All))/,

                    // Methods guaranteed to produce a unique set when starting from a unique set
                    guaranteedUnique = {
                        children: true,
                        contents: true,
                        next: true,
                        prev: true
                    };

                jQuery.fn.extend({
                    has: function (target) {
                        var targets = jQuery(target, this),
                            l = targets.length;

                        return this.filter(function () {
                            var i = 0;
                            for (; i < l; i++) {
                                if (jQuery.contains(this, targets[i])) {
                                    return true;
                                }
                            }
                        });
                    },

                    closest: function (selectors, context) {
                        var cur,
                            i = 0,
                            l = this.length,
                            matched = [],
                            targets = typeof selectors !== "string" && jQuery(selectors);

                        // Positional selectors never match, since there's no _selection_ context
                        if (!rneedsContext.test(selectors)) {
                            for (; i < l; i++) {
                                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

                                    // Always skip document fragments
                                    if (cur.nodeType < 11 && (targets ?
                                        targets.index(cur) > -1 :

                                        // Don't pass non-elements to Sizzle
                                        cur.nodeType === 1 &&
                                        jQuery.find.matchesSelector(cur, selectors))) {

                                        matched.push(cur);
                                        break;
                                    }
                                }
                            }
                        }

                        return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
                    },

                    // Determine the position of an element within the set
                    index: function (elem) {

                        // No argument, return index in parent
                        if (!elem) {
                            return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
                        }

                        // Index in selector
                        if (typeof elem === "string") {
                            return indexOf.call(jQuery(elem), this[0]);
                        }

                        // Locate the position of the desired element
                        return indexOf.call(this,

                            // If it receives a jQuery object, the first element is used
                            elem.jquery ? elem[0] : elem
                        );
                    },

                    add: function (selector, context) {
                        return this.pushStack(
                            jQuery.uniqueSort(
                                jQuery.merge(this.get(), jQuery(selector, context))
                            )
                        );
                    },

                    addBack: function (selector) {
                        return this.add(selector == null ?
                            this.prevObject : this.prevObject.filter(selector)
                        );
                    }
                });

                function sibling(cur, dir) {
                    while ((cur = cur[dir]) && cur.nodeType !== 1) {
                    }
                    return cur;
                }

                jQuery.each({
                    parent: function (elem) {
                        var parent = elem.parentNode;
                        return parent && parent.nodeType !== 11 ? parent : null;
                    },
                    parents: function (elem) {
                        return dir(elem, "parentNode");
                    },
                    parentsUntil: function (elem, i, until) {
                        return dir(elem, "parentNode", until);
                    },
                    next: function (elem) {
                        return sibling(elem, "nextSibling");
                    },
                    prev: function (elem) {
                        return sibling(elem, "previousSibling");
                    },
                    nextAll: function (elem) {
                        return dir(elem, "nextSibling");
                    },
                    prevAll: function (elem) {
                        return dir(elem, "previousSibling");
                    },
                    nextUntil: function (elem, i, until) {
                        return dir(elem, "nextSibling", until);
                    },
                    prevUntil: function (elem, i, until) {
                        return dir(elem, "previousSibling", until);
                    },
                    siblings: function (elem) {
                        return siblings((elem.parentNode || {}).firstChild, elem);
                    },
                    children: function (elem) {
                        return siblings(elem.firstChild);
                    },
                    contents: function (elem) {
                        if (nodeName(elem, "iframe")) {
                            return elem.contentDocument;
                        }

                        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
                        // Treat the template element as a regular one in browsers that
                        // don't support it.
                        if (nodeName(elem, "template")) {
                            elem = elem.content || elem;
                        }

                        return jQuery.merge([], elem.childNodes);
                    }
                }, function (name, fn) {
                    jQuery.fn[name] = function (until, selector) {
                        var matched = jQuery.map(this, fn, until);

                        if (name.slice(-5) !== "Until") {
                            selector = until;
                        }

                        if (selector && typeof selector === "string") {
                            matched = jQuery.filter(selector, matched);
                        }

                        if (this.length > 1) {

                            // Remove duplicates
                            if (!guaranteedUnique[name]) {
                                jQuery.uniqueSort(matched);
                            }

                            // Reverse order for parents* and prev-derivatives
                            if (rparentsprev.test(name)) {
                                matched.reverse();
                            }
                        }

                        return this.pushStack(matched);
                    };
                });
                var rnothtmlwhite = (/[^\x20\t\r\n\f]+/g);


// Convert String-formatted options into Object-formatted ones
                function createOptions(options) {
                    var object = {};
                    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
                        object[flag] = true;
                    });
                    return object;
                }

                /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
                jQuery.Callbacks = function (options) {

                    // Convert options from String-formatted to Object-formatted if needed
                    // (we check in cache first)
                    options = typeof options === "string" ?
                        createOptions(options) :
                        jQuery.extend({}, options);

                    var // Flag to know if list is currently firing
                        firing,

                        // Last fire value for non-forgettable lists
                        memory,

                        // Flag to know if list was already fired
                        fired,

                        // Flag to prevent firing
                        locked,

                        // Actual callback list
                        list = [],

                        // Queue of execution data for repeatable lists
                        queue = [],

                        // Index of currently firing callback (modified by add/remove as needed)
                        firingIndex = -1,

                        // Fire callbacks
                        fire = function () {

                            // Enforce single-firing
                            locked = locked || options.once;

                            // Execute callbacks for all pending executions,
                            // respecting firingIndex overrides and runtime changes
                            fired = firing = true;
                            for (; queue.length; firingIndex = -1) {
                                memory = queue.shift();
                                while (++firingIndex < list.length) {

                                    // Run callback and check for early termination
                                    if (list[firingIndex].apply(memory[0], memory[1]) === false &&
                                        options.stopOnFalse) {

                                        // Jump to end and forget the data so .add doesn't re-fire
                                        firingIndex = list.length;
                                        memory = false;
                                    }
                                }
                            }

                            // Forget the data if we're done with it
                            if (!options.memory) {
                                memory = false;
                            }

                            firing = false;

                            // Clean up if we're done firing for good
                            if (locked) {

                                // Keep an empty list if we have data for future add calls
                                if (memory) {
                                    list = [];

                                    // Otherwise, this object is spent
                                } else {
                                    list = "";
                                }
                            }
                        },

                        // Actual Callbacks object
                        self = {

                            // Add a callback or a collection of callbacks to the list
                            add: function () {
                                if (list) {

                                    // If we have memory from a past run, we should fire after adding
                                    if (memory && !firing) {
                                        firingIndex = list.length - 1;
                                        queue.push(memory);
                                    }

                                    (function add(args) {
                                        jQuery.each(args, function (_, arg) {
                                            if (isFunction(arg)) {
                                                if (!options.unique || !self.has(arg)) {
                                                    list.push(arg);
                                                }
                                            } else if (arg && arg.length && toType(arg) !== "string") {

                                                // Inspect recursively
                                                add(arg);
                                            }
                                        });
                                    })(arguments);

                                    if (memory && !firing) {
                                        fire();
                                    }
                                }
                                return this;
                            },

                            // Remove a callback from the list
                            remove: function () {
                                jQuery.each(arguments, function (_, arg) {
                                    var index;
                                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                        list.splice(index, 1);

                                        // Handle firing indexes
                                        if (index <= firingIndex) {
                                            firingIndex--;
                                        }
                                    }
                                });
                                return this;
                            },

                            // Check if a given callback is in the list.
                            // If no argument is given, return whether or not list has callbacks attached.
                            has: function (fn) {
                                return fn ?
                                    jQuery.inArray(fn, list) > -1 :
                                    list.length > 0;
                            },

                            // Remove all callbacks from the list
                            empty: function () {
                                if (list) {
                                    list = [];
                                }
                                return this;
                            },

                            // Disable .fire and .add
                            // Abort any current/pending executions
                            // Clear all callbacks and values
                            disable: function () {
                                locked = queue = [];
                                list = memory = "";
                                return this;
                            },
                            disabled: function () {
                                return !list;
                            },

                            // Disable .fire
                            // Also disable .add unless we have memory (since it would have no effect)
                            // Abort any pending executions
                            lock: function () {
                                locked = queue = [];
                                if (!memory && !firing) {
                                    list = memory = "";
                                }
                                return this;
                            },
                            locked: function () {
                                return !!locked;
                            },

                            // Call all callbacks with the given context and arguments
                            fireWith: function (context, args) {
                                if (!locked) {
                                    args = args || [];
                                    args = [context, args.slice ? args.slice() : args];
                                    queue.push(args);
                                    if (!firing) {
                                        fire();
                                    }
                                }
                                return this;
                            },

                            // Call all the callbacks with the given arguments
                            fire: function () {
                                self.fireWith(this, arguments);
                                return this;
                            },

                            // To know if the callbacks have already been called at least once
                            fired: function () {
                                return !!fired;
                            }
                        };

                    return self;
                };


                function Identity(v) {
                    return v;
                }

                function Thrower(ex) {
                    throw ex;
                }

                function adoptValue(value, resolve, reject, noValue) {
                    var method;

                    try {

                        // Check for promise aspect first to privilege synchronous behavior
                        if (value && isFunction((method = value.promise))) {
                            method.call(value).done(resolve).fail(reject);

                            // Other thenables
                        } else if (value && isFunction((method = value.then))) {
                            method.call(value, resolve, reject);

                            // Other non-thenables
                        } else {

                            // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                            // * false: [ value ].slice( 0 ) => resolve( value )
                            // * true: [ value ].slice( 1 ) => resolve()
                            resolve.apply(undefined, [value].slice(noValue));
                        }

                        // For Promises/A+, convert exceptions into rejections
                        // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
                        // Deferred#then to conditionally suppress rejection.
                    } catch (value) {

                        // Support: Android 4.0 only
                        // Strict mode functions invoked without .call/.apply get global-object context
                        reject.apply(undefined, [value]);
                    }
                }

                jQuery.extend({

                    Deferred: function (func) {
                        var tuples = [

                                // action, add listener, callbacks,
                                // ... .then handlers, argument index, [final state]
                                ["notify", "progress", jQuery.Callbacks("memory"),
                                    jQuery.Callbacks("memory"), 2],
                                ["resolve", "done", jQuery.Callbacks("once memory"),
                                    jQuery.Callbacks("once memory"), 0, "resolved"],
                                ["reject", "fail", jQuery.Callbacks("once memory"),
                                    jQuery.Callbacks("once memory"), 1, "rejected"]
                            ],
                            state = "pending",
                            promise = {
                                state: function () {
                                    return state;
                                },
                                always: function () {
                                    deferred.done(arguments).fail(arguments);
                                    return this;
                                },
                                "catch": function (fn) {
                                    return promise.then(null, fn);
                                },

                                // Keep pipe for back-compat
                                pipe: function (/* fnDone, fnFail, fnProgress */) {
                                    var fns = arguments;

                                    return jQuery.Deferred(function (newDefer) {
                                        jQuery.each(tuples, function (i, tuple) {

                                            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                                            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                                            // deferred.progress(function() { bind to newDefer or newDefer.notify })
                                            // deferred.done(function() { bind to newDefer or newDefer.resolve })
                                            // deferred.fail(function() { bind to newDefer or newDefer.reject })
                                            deferred[tuple[1]](function () {
                                                var returned = fn && fn.apply(this, arguments);
                                                if (returned && isFunction(returned.promise)) {
                                                    returned.promise()
                                                        .progress(newDefer.notify)
                                                        .done(newDefer.resolve)
                                                        .fail(newDefer.reject);
                                                } else {
                                                    newDefer[tuple[0] + "With"](
                                                        this,
                                                        fn ? [returned] : arguments
                                                    );
                                                }
                                            });
                                        });
                                        fns = null;
                                    }).promise();
                                },
                                then: function (onFulfilled, onRejected, onProgress) {
                                    var maxDepth = 0;

                                    function resolve(depth, deferred, handler, special) {
                                        return function () {
                                            var that = this,
                                                args = arguments,
                                                mightThrow = function () {
                                                    var returned, then;

                                                    // Support: Promises/A+ section 2.3.3.3.3
                                                    // https://promisesaplus.com/#point-59
                                                    // Ignore double-resolution attempts
                                                    if (depth < maxDepth) {
                                                        return;
                                                    }

                                                    returned = handler.apply(that, args);

                                                    // Support: Promises/A+ section 2.3.1
                                                    // https://promisesaplus.com/#point-48
                                                    if (returned === deferred.promise()) {
                                                        throw new TypeError("Thenable self-resolution");
                                                    }

                                                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                                                    // https://promisesaplus.com/#point-54
                                                    // https://promisesaplus.com/#point-75
                                                    // Retrieve `then` only once
                                                    then = returned &&

                                                        // Support: Promises/A+ section 2.3.4
                                                        // https://promisesaplus.com/#point-64
                                                        // Only check objects and functions for thenability
                                                        (typeof returned === "object" ||
                                                            typeof returned === "function") &&
                                                        returned.then;

                                                    // Handle a returned thenable
                                                    if (isFunction(then)) {

                                                        // Special processors (notify) just wait for resolution
                                                        if (special) {
                                                            then.call(
                                                                returned,
                                                                resolve(maxDepth, deferred, Identity, special),
                                                                resolve(maxDepth, deferred, Thrower, special)
                                                            );

                                                            // Normal processors (resolve) also hook into progress
                                                        } else {

                                                            // ...and disregard older resolution values
                                                            maxDepth++;

                                                            then.call(
                                                                returned,
                                                                resolve(maxDepth, deferred, Identity, special),
                                                                resolve(maxDepth, deferred, Thrower, special),
                                                                resolve(maxDepth, deferred, Identity,
                                                                    deferred.notifyWith)
                                                            );
                                                        }

                                                        // Handle all other returned values
                                                    } else {

                                                        // Only substitute handlers pass on context
                                                        // and multiple values (non-spec behavior)
                                                        if (handler !== Identity) {
                                                            that = undefined;
                                                            args = [returned];
                                                        }

                                                        // Process the value(s)
                                                        // Default process is resolve
                                                        (special || deferred.resolveWith)(that, args);
                                                    }
                                                },

                                                // Only normal processors (resolve) catch and reject exceptions
                                                process = special ?
                                                    mightThrow :
                                                    function () {
                                                        try {
                                                            mightThrow();
                                                        } catch (e) {

                                                            if (jQuery.Deferred.exceptionHook) {
                                                                jQuery.Deferred.exceptionHook(e,
                                                                    process.stackTrace);
                                                            }

                                                            // Support: Promises/A+ section 2.3.3.3.4.1
                                                            // https://promisesaplus.com/#point-61
                                                            // Ignore post-resolution exceptions
                                                            if (depth + 1 >= maxDepth) {

                                                                // Only substitute handlers pass on context
                                                                // and multiple values (non-spec behavior)
                                                                if (handler !== Thrower) {
                                                                    that = undefined;
                                                                    args = [e];
                                                                }

                                                                deferred.rejectWith(that, args);
                                                            }
                                                        }
                                                    };

                                            // Support: Promises/A+ section 2.3.3.3.1
                                            // https://promisesaplus.com/#point-57
                                            // Re-resolve promises immediately to dodge false rejection from
                                            // subsequent errors
                                            if (depth) {
                                                process();
                                            } else {

                                                // Call an optional hook to record the stack, in case of exception
                                                // since it's otherwise lost when execution goes async
                                                if (jQuery.Deferred.getStackHook) {
                                                    process.stackTrace = jQuery.Deferred.getStackHook();
                                                }
                                                window.setTimeout(process);
                                            }
                                        };
                                    }

                                    return jQuery.Deferred(function (newDefer) {

                                        // progress_handlers.add( ... )
                                        tuples[0][3].add(
                                            resolve(
                                                0,
                                                newDefer,
                                                isFunction(onProgress) ?
                                                    onProgress :
                                                    Identity,
                                                newDefer.notifyWith
                                            )
                                        );

                                        // fulfilled_handlers.add( ... )
                                        tuples[1][3].add(
                                            resolve(
                                                0,
                                                newDefer,
                                                isFunction(onFulfilled) ?
                                                    onFulfilled :
                                                    Identity
                                            )
                                        );

                                        // rejected_handlers.add( ... )
                                        tuples[2][3].add(
                                            resolve(
                                                0,
                                                newDefer,
                                                isFunction(onRejected) ?
                                                    onRejected :
                                                    Thrower
                                            )
                                        );
                                    }).promise();
                                },

                                // Get a promise for this deferred
                                // If obj is provided, the promise aspect is added to the object
                                promise: function (obj) {
                                    return obj != null ? jQuery.extend(obj, promise) : promise;
                                }
                            },
                            deferred = {};

                        // Add list-specific methods
                        jQuery.each(tuples, function (i, tuple) {
                            var list = tuple[2],
                                stateString = tuple[5];

                            // promise.progress = list.add
                            // promise.done = list.add
                            // promise.fail = list.add
                            promise[tuple[1]] = list.add;

                            // Handle state
                            if (stateString) {
                                list.add(
                                    function () {

                                        // state = "resolved" (i.e., fulfilled)
                                        // state = "rejected"
                                        state = stateString;
                                    },

                                    // rejected_callbacks.disable
                                    // fulfilled_callbacks.disable
                                    tuples[3 - i][2].disable,

                                    // rejected_handlers.disable
                                    // fulfilled_handlers.disable
                                    tuples[3 - i][3].disable,

                                    // progress_callbacks.lock
                                    tuples[0][2].lock,

                                    // progress_handlers.lock
                                    tuples[0][3].lock
                                );
                            }

                            // progress_handlers.fire
                            // fulfilled_handlers.fire
                            // rejected_handlers.fire
                            list.add(tuple[3].fire);

                            // deferred.notify = function() { deferred.notifyWith(...) }
                            // deferred.resolve = function() { deferred.resolveWith(...) }
                            // deferred.reject = function() { deferred.rejectWith(...) }
                            deferred[tuple[0]] = function () {
                                deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
                                return this;
                            };

                            // deferred.notifyWith = list.fireWith
                            // deferred.resolveWith = list.fireWith
                            // deferred.rejectWith = list.fireWith
                            deferred[tuple[0] + "With"] = list.fireWith;
                        });

                        // Make the deferred a promise
                        promise.promise(deferred);

                        // Call given func if any
                        if (func) {
                            func.call(deferred, deferred);
                        }

                        // All done!
                        return deferred;
                    },

                    // Deferred helper
                    when: function (singleValue) {
                        var

                            // count of uncompleted subordinates
                            remaining = arguments.length,

                            // count of unprocessed arguments
                            i = remaining,

                            // subordinate fulfillment data
                            resolveContexts = Array(i),
                            resolveValues = slice.call(arguments),

                            // the master Deferred
                            master = jQuery.Deferred(),

                            // subordinate callback factory
                            updateFunc = function (i) {
                                return function (value) {
                                    resolveContexts[i] = this;
                                    resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                                    if (!(--remaining)) {
                                        master.resolveWith(resolveContexts, resolveValues);
                                    }
                                };
                            };

                        // Single- and empty arguments are adopted like Promise.resolve
                        if (remaining <= 1) {
                            adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject,
                                !remaining);

                            // Use .then() to unwrap secondary thenables (cf. gh-3000)
                            if (master.state() === "pending" ||
                                isFunction(resolveValues[i] && resolveValues[i].then)) {

                                return master.then();
                            }
                        }

                        // Multiple arguments are aggregated like Promise.all array elements
                        while (i--) {
                            adoptValue(resolveValues[i], updateFunc(i), master.reject);
                        }

                        return master.promise();
                    }
                });


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
                var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

                jQuery.Deferred.exceptionHook = function (error, stack) {

                    // Support: IE 8 - 9 only
                    // Console exists when dev tools are open, which can happen at any time
                    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
                        window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
                    }
                };


                jQuery.readyException = function (error) {
                    window.setTimeout(function () {
                        throw error;
                    });
                };


// The deferred used on DOM ready
                var readyList = jQuery.Deferred();

                jQuery.fn.ready = function (fn) {

                    readyList
                        .then(fn)

                        // Wrap jQuery.readyException in a function so that the lookup
                        // happens at the time of error handling instead of callback
                        // registration.
                        .catch(function (error) {
                            jQuery.readyException(error);
                        });

                    return this;
                };

                jQuery.extend({

                    // Is the DOM ready to be used? Set to true once it occurs.
                    isReady: false,

                    // A counter to track how many items to wait for before
                    // the ready event fires. See #6781
                    readyWait: 1,

                    // Handle when the DOM is ready
                    ready: function (wait) {

                        // Abort if there are pending holds or we're already ready
                        if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                            return;
                        }

                        // Remember that the DOM is ready
                        jQuery.isReady = true;

                        // If a normal DOM Ready event fired, decrement, and wait if need be
                        if (wait !== true && --jQuery.readyWait > 0) {
                            return;
                        }

                        // If there are functions bound, to execute
                        readyList.resolveWith(document, [jQuery]);
                    }
                });

                jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
                function completed() {
                    document.removeEventListener("DOMContentLoaded", completed);
                    window.removeEventListener("load", completed);
                    jQuery.ready();
                }

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
                if (document.readyState === "complete" ||
                    (document.readyState !== "loading" && !document.documentElement.doScroll)) {

                    // Handle it asynchronously to allow scripts the opportunity to delay ready
                    window.setTimeout(jQuery.ready);

                } else {

                    // Use the handy event callback
                    document.addEventListener("DOMContentLoaded", completed);

                    // A fallback to window.onload, that will always work
                    window.addEventListener("load", completed);
                }


// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
                var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
                    var i = 0,
                        len = elems.length,
                        bulk = key == null;

                    // Sets many values
                    if (toType(key) === "object") {
                        chainable = true;
                        for (i in key) {
                            access(elems, fn, i, key[i], true, emptyGet, raw);
                        }

                        // Sets one value
                    } else if (value !== undefined) {
                        chainable = true;

                        if (!isFunction(value)) {
                            raw = true;
                        }

                        if (bulk) {

                            // Bulk operations run against the entire set
                            if (raw) {
                                fn.call(elems, value);
                                fn = null;

                                // ...except when executing function values
                            } else {
                                bulk = fn;
                                fn = function (elem, key, value) {
                                    return bulk.call(jQuery(elem), value);
                                };
                            }
                        }

                        if (fn) {
                            for (; i < len; i++) {
                                fn(
                                    elems[i], key, raw ?
                                        value :
                                        value.call(elems[i], i, fn(elems[i], key))
                                );
                            }
                        }
                    }

                    if (chainable) {
                        return elems;
                    }

                    // Gets
                    if (bulk) {
                        return fn.call(elems);
                    }

                    return len ? fn(elems[0], key) : emptyGet;
                };


// Matches dashed string for camelizing
                var rmsPrefix = /^-ms-/,
                    rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
                function fcamelCase(all, letter) {
                    return letter.toUpperCase();
                }

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
                function camelCase(string) {
                    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
                }

                var acceptData = function (owner) {

                    // Accepts only:
                    //  - Node
                    //    - Node.ELEMENT_NODE
                    //    - Node.DOCUMENT_NODE
                    //  - Object
                    //    - Any
                    return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
                };


                function Data() {
                    this.expando = jQuery.expando + Data.uid++;
                }

                Data.uid = 1;

                Data.prototype = {

                    cache: function (owner) {

                        // Check if the owner object already has a cache
                        var value = owner[this.expando];

                        // If not, create one
                        if (!value) {
                            value = {};

                            // We can accept data for non-element nodes in modern browsers,
                            // but we should not, see #8335.
                            // Always return an empty object.
                            if (acceptData(owner)) {

                                // If it is a node unlikely to be stringify-ed or looped over
                                // use plain assignment
                                if (owner.nodeType) {
                                    owner[this.expando] = value;

                                    // Otherwise secure it in a non-enumerable property
                                    // configurable must be true to allow the property to be
                                    // deleted when data is removed
                                } else {
                                    Object.defineProperty(owner, this.expando, {
                                        value: value,
                                        configurable: true
                                    });
                                }
                            }
                        }

                        return value;
                    },
                    set: function (owner, data, value) {
                        var prop,
                            cache = this.cache(owner);

                        // Handle: [ owner, key, value ] args
                        // Always use camelCase key (gh-2257)
                        if (typeof data === "string") {
                            cache[camelCase(data)] = value;

                            // Handle: [ owner, { properties } ] args
                        } else {

                            // Copy the properties one-by-one to the cache object
                            for (prop in data) {
                                cache[camelCase(prop)] = data[prop];
                            }
                        }
                        return cache;
                    },
                    get: function (owner, key) {
                        return key === undefined ?
                            this.cache(owner) :

                            // Always use camelCase key (gh-2257)
                            owner[this.expando] && owner[this.expando][camelCase(key)];
                    },
                    access: function (owner, key, value) {

                        // In cases where either:
                        //
                        //   1. No key was specified
                        //   2. A string key was specified, but no value provided
                        //
                        // Take the "read" path and allow the get method to determine
                        // which value to return, respectively either:
                        //
                        //   1. The entire cache object
                        //   2. The data stored at the key
                        //
                        if (key === undefined ||
                            ((key && typeof key === "string") && value === undefined)) {

                            return this.get(owner, key);
                        }

                        // When the key is not a string, or both a key and value
                        // are specified, set or extend (existing objects) with either:
                        //
                        //   1. An object of properties
                        //   2. A key and value
                        //
                        this.set(owner, key, value);

                        // Since the "set" path can have two possible entry points
                        // return the expected data based on which path was taken[*]
                        return value !== undefined ? value : key;
                    },
                    remove: function (owner, key) {
                        var i,
                            cache = owner[this.expando];

                        if (cache === undefined) {
                            return;
                        }

                        if (key !== undefined) {

                            // Support array or space separated string of keys
                            if (Array.isArray(key)) {

                                // If key is an array of keys...
                                // We always set camelCase keys, so remove that.
                                key = key.map(camelCase);
                            } else {
                                key = camelCase(key);

                                // If a key with the spaces exists, use it.
                                // Otherwise, create an array by matching non-whitespace
                                key = key in cache ?
                                    [key] :
                                    (key.match(rnothtmlwhite) || []);
                            }

                            i = key.length;

                            while (i--) {
                                delete cache[key[i]];
                            }
                        }

                        // Remove the expando if there's no more data
                        if (key === undefined || jQuery.isEmptyObject(cache)) {

                            // Support: Chrome <=35 - 45
                            // Webkit & Blink performance suffers when deleting properties
                            // from DOM nodes, so set to undefined instead
                            // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                            if (owner.nodeType) {
                                owner[this.expando] = undefined;
                            } else {
                                delete owner[this.expando];
                            }
                        }
                    },
                    hasData: function (owner) {
                        var cache = owner[this.expando];
                        return cache !== undefined && !jQuery.isEmptyObject(cache);
                    }
                };
                var dataPriv = new Data();

                var dataUser = new Data();


//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

                var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
                    rmultiDash = /[A-Z]/g;

                function getData(data) {
                    if (data === "true") {
                        return true;
                    }

                    if (data === "false") {
                        return false;
                    }

                    if (data === "null") {
                        return null;
                    }

                    // Only convert to a number if it doesn't change the string
                    if (data === +data + "") {
                        return +data;
                    }

                    if (rbrace.test(data)) {
                        return JSON.parse(data);
                    }

                    return data;
                }

                function dataAttr(elem, key, data) {
                    var name;

                    // If nothing was found internally, try to fetch any
                    // data from the HTML5 data-* attribute
                    if (data === undefined && elem.nodeType === 1) {
                        name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
                        data = elem.getAttribute(name);

                        if (typeof data === "string") {
                            try {
                                data = getData(data);
                            } catch (e) {
                            }

                            // Make sure we set the data so it isn't changed later
                            dataUser.set(elem, key, data);
                        } else {
                            data = undefined;
                        }
                    }
                    return data;
                }

                jQuery.extend({
                    hasData: function (elem) {
                        return dataUser.hasData(elem) || dataPriv.hasData(elem);
                    },

                    data: function (elem, name, data) {
                        return dataUser.access(elem, name, data);
                    },

                    removeData: function (elem, name) {
                        dataUser.remove(elem, name);
                    },

                    // TODO: Now that all calls to _data and _removeData have been replaced
                    // with direct calls to dataPriv methods, these can be deprecated.
                    _data: function (elem, name, data) {
                        return dataPriv.access(elem, name, data);
                    },

                    _removeData: function (elem, name) {
                        dataPriv.remove(elem, name);
                    }
                });

                jQuery.fn.extend({
                    data: function (key, value) {
                        var i, name, data,
                            elem = this[0],
                            attrs = elem && elem.attributes;

                        // Gets all values
                        if (key === undefined) {
                            if (this.length) {
                                data = dataUser.get(elem);

                                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                                    i = attrs.length;
                                    while (i--) {

                                        // Support: IE 11 only
                                        // The attrs elements can be null (#14894)
                                        if (attrs[i]) {
                                            name = attrs[i].name;
                                            if (name.indexOf("data-") === 0) {
                                                name = camelCase(name.slice(5));
                                                dataAttr(elem, name, data[name]);
                                            }
                                        }
                                    }
                                    dataPriv.set(elem, "hasDataAttrs", true);
                                }
                            }

                            return data;
                        }

                        // Sets multiple values
                        if (typeof key === "object") {
                            return this.each(function () {
                                dataUser.set(this, key);
                            });
                        }

                        return access(this, function (value) {
                            var data;

                            // The calling jQuery object (element matches) is not empty
                            // (and therefore has an element appears at this[ 0 ]) and the
                            // `value` parameter was not undefined. An empty jQuery object
                            // will result in `undefined` for elem = this[ 0 ] which will
                            // throw an exception if an attempt to read a data cache is made.
                            if (elem && value === undefined) {

                                // Attempt to get data from the cache
                                // The key will always be camelCased in Data
                                data = dataUser.get(elem, key);
                                if (data !== undefined) {
                                    return data;
                                }

                                // Attempt to "discover" the data in
                                // HTML5 custom data-* attrs
                                data = dataAttr(elem, key);
                                if (data !== undefined) {
                                    return data;
                                }

                                // We tried really hard, but the data doesn't exist.
                                return;
                            }

                            // Set the data...
                            this.each(function () {

                                // We always store the camelCased key
                                dataUser.set(this, key, value);
                            });
                        }, null, value, arguments.length > 1, null, true);
                    },

                    removeData: function (key) {
                        return this.each(function () {
                            dataUser.remove(this, key);
                        });
                    }
                });


                jQuery.extend({
                    queue: function (elem, type, data) {
                        var queue;

                        if (elem) {
                            type = (type || "fx") + "queue";
                            queue = dataPriv.get(elem, type);

                            // Speed up dequeue by getting out quickly if this is just a lookup
                            if (data) {
                                if (!queue || Array.isArray(data)) {
                                    queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                                } else {
                                    queue.push(data);
                                }
                            }
                            return queue || [];
                        }
                    },

                    dequeue: function (elem, type) {
                        type = type || "fx";

                        var queue = jQuery.queue(elem, type),
                            startLength = queue.length,
                            fn = queue.shift(),
                            hooks = jQuery._queueHooks(elem, type),
                            next = function () {
                                jQuery.dequeue(elem, type);
                            };

                        // If the fx queue is dequeued, always remove the progress sentinel
                        if (fn === "inprogress") {
                            fn = queue.shift();
                            startLength--;
                        }

                        if (fn) {

                            // Add a progress sentinel to prevent the fx queue from being
                            // automatically dequeued
                            if (type === "fx") {
                                queue.unshift("inprogress");
                            }

                            // Clear up the last queue stop function
                            delete hooks.stop;
                            fn.call(elem, next, hooks);
                        }

                        if (!startLength && hooks) {
                            hooks.empty.fire();
                        }
                    },

                    // Not public - generate a queueHooks object, or return the current one
                    _queueHooks: function (elem, type) {
                        var key = type + "queueHooks";
                        return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                            empty: jQuery.Callbacks("once memory").add(function () {
                                dataPriv.remove(elem, [type + "queue", key]);
                            })
                        });
                    }
                });

                jQuery.fn.extend({
                    queue: function (type, data) {
                        var setter = 2;

                        if (typeof type !== "string") {
                            data = type;
                            type = "fx";
                            setter--;
                        }

                        if (arguments.length < setter) {
                            return jQuery.queue(this[0], type);
                        }

                        return data === undefined ?
                            this :
                            this.each(function () {
                                var queue = jQuery.queue(this, type, data);

                                // Ensure a hooks for this queue
                                jQuery._queueHooks(this, type);

                                if (type === "fx" && queue[0] !== "inprogress") {
                                    jQuery.dequeue(this, type);
                                }
                            });
                    },
                    dequeue: function (type) {
                        return this.each(function () {
                            jQuery.dequeue(this, type);
                        });
                    },
                    clearQueue: function (type) {
                        return this.queue(type || "fx", []);
                    },

                    // Get a promise resolved when queues of a certain type
                    // are emptied (fx is the type by default)
                    promise: function (type, obj) {
                        var tmp,
                            count = 1,
                            defer = jQuery.Deferred(),
                            elements = this,
                            i = this.length,
                            resolve = function () {
                                if (!(--count)) {
                                    defer.resolveWith(elements, [elements]);
                                }
                            };

                        if (typeof type !== "string") {
                            obj = type;
                            type = undefined;
                        }
                        type = type || "fx";

                        while (i--) {
                            tmp = dataPriv.get(elements[i], type + "queueHooks");
                            if (tmp && tmp.empty) {
                                count++;
                                tmp.empty.add(resolve);
                            }
                        }
                        resolve();
                        return defer.promise(obj);
                    }
                });
                var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

                var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");


                var cssExpand = ["Top", "Right", "Bottom", "Left"];

                var isHiddenWithinTree = function (elem, el) {

                    // isHiddenWithinTree might be called from jQuery#filter function;
                    // in that case, element will be second argument
                    elem = el || elem;

                    // Inline style trumps all
                    return elem.style.display === "none" ||
                        elem.style.display === "" &&

                        // Otherwise, check computed style
                        // Support: Firefox <=43 - 45
                        // Disconnected elements can have computed display: none, so first confirm that elem is
                        // in the document.
                        jQuery.contains(elem.ownerDocument, elem) &&

                        jQuery.css(elem, "display") === "none";
                };

                var swap = function (elem, options, callback, args) {
                    var ret, name,
                        old = {};

                    // Remember the old values, and insert the new ones
                    for (name in options) {
                        old[name] = elem.style[name];
                        elem.style[name] = options[name];
                    }

                    ret = callback.apply(elem, args || []);

                    // Revert the old values
                    for (name in options) {
                        elem.style[name] = old[name];
                    }

                    return ret;
                };


                function adjustCSS(elem, prop, valueParts, tween) {
                    var adjusted, scale,
                        maxIterations = 20,
                        currentValue = tween ?
                            function () {
                                return tween.cur();
                            } :
                            function () {
                                return jQuery.css(elem, prop, "");
                            },
                        initial = currentValue(),
                        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),

                        // Starting value computation is required for potential unit mismatches
                        initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) &&
                            rcssNum.exec(jQuery.css(elem, prop));

                    if (initialInUnit && initialInUnit[3] !== unit) {

                        // Support: Firefox <=54
                        // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
                        initial = initial / 2;

                        // Trust units reported by jQuery.css
                        unit = unit || initialInUnit[3];

                        // Iteratively approximate from a nonzero starting point
                        initialInUnit = +initial || 1;

                        while (maxIterations--) {

                            // Evaluate and update our best guess (doubling guesses that zero out).
                            // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                            jQuery.style(elem, prop, initialInUnit + unit);
                            if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                                maxIterations = 0;
                            }
                            initialInUnit = initialInUnit / scale;

                        }

                        initialInUnit = initialInUnit * 2;
                        jQuery.style(elem, prop, initialInUnit + unit);

                        // Make sure we update the tween properties later on
                        valueParts = valueParts || [];
                    }

                    if (valueParts) {
                        initialInUnit = +initialInUnit || +initial || 0;

                        // Apply relative offset (+=/-=) if specified
                        adjusted = valueParts[1] ?
                            initialInUnit + (valueParts[1] + 1) * valueParts[2] :
                            +valueParts[2];
                        if (tween) {
                            tween.unit = unit;
                            tween.start = initialInUnit;
                            tween.end = adjusted;
                        }
                    }
                    return adjusted;
                }


                var defaultDisplayMap = {};

                function getDefaultDisplay(elem) {
                    var temp,
                        doc = elem.ownerDocument,
                        nodeName = elem.nodeName,
                        display = defaultDisplayMap[nodeName];

                    if (display) {
                        return display;
                    }

                    temp = doc.body.appendChild(doc.createElement(nodeName));
                    display = jQuery.css(temp, "display");

                    temp.parentNode.removeChild(temp);

                    if (display === "none") {
                        display = "block";
                    }
                    defaultDisplayMap[nodeName] = display;

                    return display;
                }

                function showHide(elements, show) {
                    var display, elem,
                        values = [],
                        index = 0,
                        length = elements.length;

                    // Determine new display value for elements that need to change
                    for (; index < length; index++) {
                        elem = elements[index];
                        if (!elem.style) {
                            continue;
                        }

                        display = elem.style.display;
                        if (show) {

                            // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                            // check is required in this first loop unless we have a nonempty display value (either
                            // inline or about-to-be-restored)
                            if (display === "none") {
                                values[index] = dataPriv.get(elem, "display") || null;
                                if (!values[index]) {
                                    elem.style.display = "";
                                }
                            }
                            if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                                values[index] = getDefaultDisplay(elem);
                            }
                        } else {
                            if (display !== "none") {
                                values[index] = "none";

                                // Remember what we're overwriting
                                dataPriv.set(elem, "display", display);
                            }
                        }
                    }

                    // Set the display of the elements in a second loop to avoid constant reflow
                    for (index = 0; index < length; index++) {
                        if (values[index] != null) {
                            elements[index].style.display = values[index];
                        }
                    }

                    return elements;
                }

                jQuery.fn.extend({
                    show: function () {
                        return showHide(this, true);
                    },
                    hide: function () {
                        return showHide(this);
                    },
                    toggle: function (state) {
                        if (typeof state === "boolean") {
                            return state ? this.show() : this.hide();
                        }

                        return this.each(function () {
                            if (isHiddenWithinTree(this)) {
                                jQuery(this).show();
                            } else {
                                jQuery(this).hide();
                            }
                        });
                    }
                });
                var rcheckableType = (/^(?:checkbox|radio)$/i);

                var rtagName = (/<([a-z][^\/\0>\x20\t\r\n\f]+)/i);

                var rscriptType = (/^$|^module$|\/(?:java|ecma)script/i);


// We have to close these tags to support XHTML (#13200)
                var wrapMap = {

                    // Support: IE <=9 only
                    option: [1, "<select multiple='multiple'>", "</select>"],

                    // XHTML parsers do not magically insert elements in the
                    // same way that tag soup parsers do. So we cannot shorten
                    // this by omitting <tbody> or other required elements.
                    thead: [1, "<table>", "</table>"],
                    col: [2, "<table><colgroup>", "</colgroup></table>"],
                    tr: [2, "<table><tbody>", "</tbody></table>"],
                    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

                    _default: [0, "", ""]
                };

// Support: IE <=9 only
                wrapMap.optgroup = wrapMap.option;

                wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
                wrapMap.th = wrapMap.td;


                function getAll(context, tag) {

                    // Support: IE <=9 - 11 only
                    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
                    var ret;

                    if (typeof context.getElementsByTagName !== "undefined") {
                        ret = context.getElementsByTagName(tag || "*");

                    } else if (typeof context.querySelectorAll !== "undefined") {
                        ret = context.querySelectorAll(tag || "*");

                    } else {
                        ret = [];
                    }

                    if (tag === undefined || tag && nodeName(context, tag)) {
                        return jQuery.merge([context], ret);
                    }

                    return ret;
                }


// Mark scripts as having already been evaluated
                function setGlobalEval(elems, refElements) {
                    var i = 0,
                        l = elems.length;

                    for (; i < l; i++) {
                        dataPriv.set(
                            elems[i],
                            "globalEval",
                            !refElements || dataPriv.get(refElements[i], "globalEval")
                        );
                    }
                }


                var rhtml = /<|&#?\w+;/;

                function buildFragment(elems, context, scripts, selection, ignored) {
                    var elem, tmp, tag, wrap, contains, j,
                        fragment = context.createDocumentFragment(),
                        nodes = [],
                        i = 0,
                        l = elems.length;

                    for (; i < l; i++) {
                        elem = elems[i];

                        if (elem || elem === 0) {

                            // Add nodes directly
                            if (toType(elem) === "object") {

                                // Support: Android <=4.0 only, PhantomJS 1 only
                                // push.apply(_, arraylike) throws on ancient WebKit
                                jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                                // Convert non-html into a text node
                            } else if (!rhtml.test(elem)) {
                                nodes.push(context.createTextNode(elem));

                                // Convert html into DOM nodes
                            } else {
                                tmp = tmp || fragment.appendChild(context.createElement("div"));

                                // Deserialize a standard representation
                                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                                wrap = wrapMap[tag] || wrapMap._default;
                                tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                                // Descend through wrappers to the right content
                                j = wrap[0];
                                while (j--) {
                                    tmp = tmp.lastChild;
                                }

                                // Support: Android <=4.0 only, PhantomJS 1 only
                                // push.apply(_, arraylike) throws on ancient WebKit
                                jQuery.merge(nodes, tmp.childNodes);

                                // Remember the top-level container
                                tmp = fragment.firstChild;

                                // Ensure the created nodes are orphaned (#12392)
                                tmp.textContent = "";
                            }
                        }
                    }

                    // Remove wrapper from fragment
                    fragment.textContent = "";

                    i = 0;
                    while ((elem = nodes[i++])) {

                        // Skip elements already in the context collection (trac-4087)
                        if (selection && jQuery.inArray(elem, selection) > -1) {
                            if (ignored) {
                                ignored.push(elem);
                            }
                            continue;
                        }

                        contains = jQuery.contains(elem.ownerDocument, elem);

                        // Append to fragment
                        tmp = getAll(fragment.appendChild(elem), "script");

                        // Preserve script evaluation history
                        if (contains) {
                            setGlobalEval(tmp);
                        }

                        // Capture executables
                        if (scripts) {
                            j = 0;
                            while ((elem = tmp[j++])) {
                                if (rscriptType.test(elem.type || "")) {
                                    scripts.push(elem);
                                }
                            }
                        }
                    }

                    return fragment;
                }


                (function () {
                    var fragment = document.createDocumentFragment(),
                        div = fragment.appendChild(document.createElement("div")),
                        input = document.createElement("input");

                    // Support: Android 4.0 - 4.3 only
                    // Check state lost if the name is set (#11217)
                    // Support: Windows Web Apps (WWA)
                    // `name` and `type` must use .setAttribute for WWA (#14901)
                    input.setAttribute("type", "radio");
                    input.setAttribute("checked", "checked");
                    input.setAttribute("name", "t");

                    div.appendChild(input);

                    // Support: Android <=4.1 only
                    // Older WebKit doesn't clone checked state correctly in fragments
                    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

                    // Support: IE <=11 only
                    // Make sure textarea (and checkbox) defaultValue is properly cloned
                    div.innerHTML = "<textarea>x</textarea>";
                    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
                })();
                var documentElement = document.documentElement;


                var
                    rkeyEvent = /^key/,
                    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
                    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

                function returnTrue() {
                    return true;
                }

                function returnFalse() {
                    return false;
                }

// Support: IE <=9 only
// See #13393 for more info
                function safeActiveElement() {
                    try {
                        return document.activeElement;
                    } catch (err) {
                    }
                }

                function on(elem, types, selector, data, fn, one) {
                    var origFn, type;

                    // Types can be a map of types/handlers
                    if (typeof types === "object") {

                        // ( types-Object, selector, data )
                        if (typeof selector !== "string") {

                            // ( types-Object, data )
                            data = data || selector;
                            selector = undefined;
                        }
                        for (type in types) {
                            on(elem, type, selector, data, types[type], one);
                        }
                        return elem;
                    }

                    if (data == null && fn == null) {

                        // ( types, fn )
                        fn = selector;
                        data = selector = undefined;
                    } else if (fn == null) {
                        if (typeof selector === "string") {

                            // ( types, selector, fn )
                            fn = data;
                            data = undefined;
                        } else {

                            // ( types, data, fn )
                            fn = data;
                            data = selector;
                            selector = undefined;
                        }
                    }
                    if (fn === false) {
                        fn = returnFalse;
                    } else if (!fn) {
                        return elem;
                    }

                    if (one === 1) {
                        origFn = fn;
                        fn = function (event) {

                            // Can use an empty set, since event contains the info
                            jQuery().off(event);
                            return origFn.apply(this, arguments);
                        };

                        // Use same guid so caller can remove using origFn
                        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
                    }
                    return elem.each(function () {
                        jQuery.event.add(this, types, fn, data, selector);
                    });
                }

                /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
                jQuery.event = {

                    global: {},

                    add: function (elem, types, handler, data, selector) {

                        var handleObjIn, eventHandle, tmp,
                            events, t, handleObj,
                            special, handlers, type, namespaces, origType,
                            elemData = dataPriv.get(elem);

                        // Don't attach events to noData or text/comment nodes (but allow plain objects)
                        if (!elemData) {
                            return;
                        }

                        // Caller can pass in an object of custom data in lieu of the handler
                        if (handler.handler) {
                            handleObjIn = handler;
                            handler = handleObjIn.handler;
                            selector = handleObjIn.selector;
                        }

                        // Ensure that invalid selectors throw exceptions at attach time
                        // Evaluate against documentElement in case elem is a non-element node (e.g., document)
                        if (selector) {
                            jQuery.find.matchesSelector(documentElement, selector);
                        }

                        // Make sure that the handler has a unique ID, used to find/remove it later
                        if (!handler.guid) {
                            handler.guid = jQuery.guid++;
                        }

                        // Init the element's event structure and main handler, if this is the first
                        if (!(events = elemData.events)) {
                            events = elemData.events = {};
                        }
                        if (!(eventHandle = elemData.handle)) {
                            eventHandle = elemData.handle = function (e) {

                                // Discard the second event of a jQuery.event.trigger() and
                                // when an event is called after a page has unloaded
                                return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
                                    jQuery.event.dispatch.apply(elem, arguments) : undefined;
                            };
                        }

                        // Handle multiple events separated by a space
                        types = (types || "").match(rnothtmlwhite) || [""];
                        t = types.length;
                        while (t--) {
                            tmp = rtypenamespace.exec(types[t]) || [];
                            type = origType = tmp[1];
                            namespaces = (tmp[2] || "").split(".").sort();

                            // There *must* be a type, no attaching namespace-only handlers
                            if (!type) {
                                continue;
                            }

                            // If event changes its type, use the special event handlers for the changed type
                            special = jQuery.event.special[type] || {};

                            // If selector defined, determine special event api type, otherwise given type
                            type = (selector ? special.delegateType : special.bindType) || type;

                            // Update special based on newly reset type
                            special = jQuery.event.special[type] || {};

                            // handleObj is passed to all event handlers
                            handleObj = jQuery.extend({
                                type: type,
                                origType: origType,
                                data: data,
                                handler: handler,
                                guid: handler.guid,
                                selector: selector,
                                needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                                namespace: namespaces.join(".")
                            }, handleObjIn);

                            // Init the event handler queue if we're the first
                            if (!(handlers = events[type])) {
                                handlers = events[type] = [];
                                handlers.delegateCount = 0;

                                // Only use addEventListener if the special events handler returns false
                                if (!special.setup ||
                                    special.setup.call(elem, data, namespaces, eventHandle) === false) {

                                    if (elem.addEventListener) {
                                        elem.addEventListener(type, eventHandle);
                                    }
                                }
                            }

                            if (special.add) {
                                special.add.call(elem, handleObj);

                                if (!handleObj.handler.guid) {
                                    handleObj.handler.guid = handler.guid;
                                }
                            }

                            // Add to the element's handler list, delegates in front
                            if (selector) {
                                handlers.splice(handlers.delegateCount++, 0, handleObj);
                            } else {
                                handlers.push(handleObj);
                            }

                            // Keep track of which events have ever been used, for event optimization
                            jQuery.event.global[type] = true;
                        }

                    },

                    // Detach an event or set of events from an element
                    remove: function (elem, types, handler, selector, mappedTypes) {

                        var j, origCount, tmp,
                            events, t, handleObj,
                            special, handlers, type, namespaces, origType,
                            elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

                        if (!elemData || !(events = elemData.events)) {
                            return;
                        }

                        // Once for each type.namespace in types; type may be omitted
                        types = (types || "").match(rnothtmlwhite) || [""];
                        t = types.length;
                        while (t--) {
                            tmp = rtypenamespace.exec(types[t]) || [];
                            type = origType = tmp[1];
                            namespaces = (tmp[2] || "").split(".").sort();

                            // Unbind all events (on this namespace, if provided) for the element
                            if (!type) {
                                for (type in events) {
                                    jQuery.event.remove(elem, type + types[t], handler, selector, true);
                                }
                                continue;
                            }

                            special = jQuery.event.special[type] || {};
                            type = (selector ? special.delegateType : special.bindType) || type;
                            handlers = events[type] || [];
                            tmp = tmp[2] &&
                                new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                            // Remove matching events
                            origCount = j = handlers.length;
                            while (j--) {
                                handleObj = handlers[j];

                                if ((mappedTypes || origType === handleObj.origType) &&
                                    (!handler || handler.guid === handleObj.guid) &&
                                    (!tmp || tmp.test(handleObj.namespace)) &&
                                    (!selector || selector === handleObj.selector ||
                                        selector === "**" && handleObj.selector)) {
                                    handlers.splice(j, 1);

                                    if (handleObj.selector) {
                                        handlers.delegateCount--;
                                    }
                                    if (special.remove) {
                                        special.remove.call(elem, handleObj);
                                    }
                                }
                            }

                            // Remove generic event handler if we removed something and no more handlers exist
                            // (avoids potential for endless recursion during removal of special event handlers)
                            if (origCount && !handlers.length) {
                                if (!special.teardown ||
                                    special.teardown.call(elem, namespaces, elemData.handle) === false) {

                                    jQuery.removeEvent(elem, type, elemData.handle);
                                }

                                delete events[type];
                            }
                        }

                        // Remove data and the expando if it's no longer used
                        if (jQuery.isEmptyObject(events)) {
                            dataPriv.remove(elem, "handle events");
                        }
                    },

                    dispatch: function (nativeEvent) {

                        // Make a writable jQuery.Event from the native event object
                        var event = jQuery.event.fix(nativeEvent);

                        var i, j, ret, matched, handleObj, handlerQueue,
                            args = new Array(arguments.length),
                            handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
                            special = jQuery.event.special[event.type] || {};

                        // Use the fix-ed jQuery.Event rather than the (read-only) native event
                        args[0] = event;

                        for (i = 1; i < arguments.length; i++) {
                            args[i] = arguments[i];
                        }

                        event.delegateTarget = this;

                        // Call the preDispatch hook for the mapped type, and let it bail if desired
                        if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                            return;
                        }

                        // Determine handlers
                        handlerQueue = jQuery.event.handlers.call(this, event, handlers);

                        // Run delegates first; they may want to stop propagation beneath us
                        i = 0;
                        while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                            event.currentTarget = matched.elem;

                            j = 0;
                            while ((handleObj = matched.handlers[j++]) &&
                            !event.isImmediatePropagationStopped()) {

                                // Triggered event must either 1) have no namespace, or 2) have namespace(s)
                                // a subset or equal to those in the bound event (both can have no namespace).
                                if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

                                    event.handleObj = handleObj;
                                    event.data = handleObj.data;

                                    ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||
                                        handleObj.handler).apply(matched.elem, args);

                                    if (ret !== undefined) {
                                        if ((event.result = ret) === false) {
                                            event.preventDefault();
                                            event.stopPropagation();
                                        }
                                    }
                                }
                            }
                        }

                        // Call the postDispatch hook for the mapped type
                        if (special.postDispatch) {
                            special.postDispatch.call(this, event);
                        }

                        return event.result;
                    },

                    handlers: function (event, handlers) {
                        var i, handleObj, sel, matchedHandlers, matchedSelectors,
                            handlerQueue = [],
                            delegateCount = handlers.delegateCount,
                            cur = event.target;

                        // Find delegate handlers
                        if (delegateCount &&

                            // Support: IE <=9
                            // Black-hole SVG <use> instance trees (trac-13180)
                            cur.nodeType &&

                            // Support: Firefox <=42
                            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                            // Support: IE 11 only
                            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                            !(event.type === "click" && event.button >= 1)) {

                            for (; cur !== this; cur = cur.parentNode || this) {

                                // Don't check non-elements (#13208)
                                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                                    matchedHandlers = [];
                                    matchedSelectors = {};
                                    for (i = 0; i < delegateCount; i++) {
                                        handleObj = handlers[i];

                                        // Don't conflict with Object.prototype properties (#13203)
                                        sel = handleObj.selector + " ";

                                        if (matchedSelectors[sel] === undefined) {
                                            matchedSelectors[sel] = handleObj.needsContext ?
                                                jQuery(sel, this).index(cur) > -1 :
                                                jQuery.find(sel, this, null, [cur]).length;
                                        }
                                        if (matchedSelectors[sel]) {
                                            matchedHandlers.push(handleObj);
                                        }
                                    }
                                    if (matchedHandlers.length) {
                                        handlerQueue.push({elem: cur, handlers: matchedHandlers});
                                    }
                                }
                            }
                        }

                        // Add the remaining (directly-bound) handlers
                        cur = this;
                        if (delegateCount < handlers.length) {
                            handlerQueue.push({elem: cur, handlers: handlers.slice(delegateCount)});
                        }

                        return handlerQueue;
                    },

                    addProp: function (name, hook) {
                        Object.defineProperty(jQuery.Event.prototype, name, {
                            enumerable: true,
                            configurable: true,

                            get: isFunction(hook) ?
                                function () {
                                    if (this.originalEvent) {
                                        return hook(this.originalEvent);
                                    }
                                } :
                                function () {
                                    if (this.originalEvent) {
                                        return this.originalEvent[name];
                                    }
                                },

                            set: function (value) {
                                Object.defineProperty(this, name, {
                                    enumerable: true,
                                    configurable: true,
                                    writable: true,
                                    value: value
                                });
                            }
                        });
                    },

                    fix: function (originalEvent) {
                        return originalEvent[jQuery.expando] ?
                            originalEvent :
                            new jQuery.Event(originalEvent);
                    },

                    special: {
                        load: {

                            // Prevent triggered image.load events from bubbling to window.load
                            noBubble: true
                        },
                        focus: {

                            // Fire native event if possible so blur/focus sequence is correct
                            trigger: function () {
                                if (this !== safeActiveElement() && this.focus) {
                                    this.focus();
                                    return false;
                                }
                            },
                            delegateType: "focusin"
                        },
                        blur: {
                            trigger: function () {
                                if (this === safeActiveElement() && this.blur) {
                                    this.blur();
                                    return false;
                                }
                            },
                            delegateType: "focusout"
                        },
                        click: {

                            // For checkbox, fire native event so checked state will be right
                            trigger: function () {
                                if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
                                    this.click();
                                    return false;
                                }
                            },

                            // For cross-browser consistency, don't fire native .click() on links
                            _default: function (event) {
                                return nodeName(event.target, "a");
                            }
                        },

                        beforeunload: {
                            postDispatch: function (event) {

                                // Support: Firefox 20+
                                // Firefox doesn't alert if the returnValue field is not set.
                                if (event.result !== undefined && event.originalEvent) {
                                    event.originalEvent.returnValue = event.result;
                                }
                            }
                        }
                    }
                };

                jQuery.removeEvent = function (elem, type, handle) {

                    // This "if" is needed for plain objects
                    if (elem.removeEventListener) {
                        elem.removeEventListener(type, handle);
                    }
                };

                jQuery.Event = function (src, props) {

                    // Allow instantiation without the 'new' keyword
                    if (!(this instanceof jQuery.Event)) {
                        return new jQuery.Event(src, props);
                    }

                    // Event object
                    if (src && src.type) {
                        this.originalEvent = src;
                        this.type = src.type;

                        // Events bubbling up the document may have been marked as prevented
                        // by a handler lower down the tree; reflect the correct value.
                        this.isDefaultPrevented = src.defaultPrevented ||
                        src.defaultPrevented === undefined &&

                        // Support: Android <=2.3 only
                        src.returnValue === false ?
                            returnTrue :
                            returnFalse;

                        // Create target properties
                        // Support: Safari <=6 - 7 only
                        // Target should not be a text node (#504, #13143)
                        this.target = (src.target && src.target.nodeType === 3) ?
                            src.target.parentNode :
                            src.target;

                        this.currentTarget = src.currentTarget;
                        this.relatedTarget = src.relatedTarget;

                        // Event type
                    } else {
                        this.type = src;
                    }

                    // Put explicitly provided properties onto the event object
                    if (props) {
                        jQuery.extend(this, props);
                    }

                    // Create a timestamp if incoming event doesn't have one
                    this.timeStamp = src && src.timeStamp || Date.now();

                    // Mark it as fixed
                    this[jQuery.expando] = true;
                };

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
                jQuery.Event.prototype = {
                    constructor: jQuery.Event,
                    isDefaultPrevented: returnFalse,
                    isPropagationStopped: returnFalse,
                    isImmediatePropagationStopped: returnFalse,
                    isSimulated: false,

                    preventDefault: function () {
                        var e = this.originalEvent;

                        this.isDefaultPrevented = returnTrue;

                        if (e && !this.isSimulated) {
                            e.preventDefault();
                        }
                    },
                    stopPropagation: function () {
                        var e = this.originalEvent;

                        this.isPropagationStopped = returnTrue;

                        if (e && !this.isSimulated) {
                            e.stopPropagation();
                        }
                    },
                    stopImmediatePropagation: function () {
                        var e = this.originalEvent;

                        this.isImmediatePropagationStopped = returnTrue;

                        if (e && !this.isSimulated) {
                            e.stopImmediatePropagation();
                        }

                        this.stopPropagation();
                    }
                };

// Includes all common event props including KeyEvent and MouseEvent specific props
                jQuery.each({
                    altKey: true,
                    bubbles: true,
                    cancelable: true,
                    changedTouches: true,
                    ctrlKey: true,
                    detail: true,
                    eventPhase: true,
                    metaKey: true,
                    pageX: true,
                    pageY: true,
                    shiftKey: true,
                    view: true,
                    "char": true,
                    charCode: true,
                    key: true,
                    keyCode: true,
                    button: true,
                    buttons: true,
                    clientX: true,
                    clientY: true,
                    offsetX: true,
                    offsetY: true,
                    pointerId: true,
                    pointerType: true,
                    screenX: true,
                    screenY: true,
                    targetTouches: true,
                    toElement: true,
                    touches: true,

                    which: function (event) {
                        var button = event.button;

                        // Add which for key events
                        if (event.which == null && rkeyEvent.test(event.type)) {
                            return event.charCode != null ? event.charCode : event.keyCode;
                        }

                        // Add which for click: 1 === left; 2 === middle; 3 === right
                        if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                            if (button & 1) {
                                return 1;
                            }

                            if (button & 2) {
                                return 3;
                            }

                            if (button & 4) {
                                return 2;
                            }

                            return 0;
                        }

                        return event.which;
                    }
                }, jQuery.event.addProp);

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
                jQuery.each({
                    mouseenter: "mouseover",
                    mouseleave: "mouseout",
                    pointerenter: "pointerover",
                    pointerleave: "pointerout"
                }, function (orig, fix) {
                    jQuery.event.special[orig] = {
                        delegateType: fix,
                        bindType: fix,

                        handle: function (event) {
                            var ret,
                                target = this,
                                related = event.relatedTarget,
                                handleObj = event.handleObj;

                            // For mouseenter/leave call the handler if related is outside the target.
                            // NB: No relatedTarget if the mouse left/entered the browser window
                            if (!related || (related !== target && !jQuery.contains(target, related))) {
                                event.type = handleObj.origType;
                                ret = handleObj.handler.apply(this, arguments);
                                event.type = fix;
                            }
                            return ret;
                        }
                    };
                });

                jQuery.fn.extend({

                    on: function (types, selector, data, fn) {
                        return on(this, types, selector, data, fn);
                    },
                    one: function (types, selector, data, fn) {
                        return on(this, types, selector, data, fn, 1);
                    },
                    off: function (types, selector, fn) {
                        var handleObj, type;
                        if (types && types.preventDefault && types.handleObj) {

                            // ( event )  dispatched jQuery.Event
                            handleObj = types.handleObj;
                            jQuery(types.delegateTarget).off(
                                handleObj.namespace ?
                                    handleObj.origType + "." + handleObj.namespace :
                                    handleObj.origType,
                                handleObj.selector,
                                handleObj.handler
                            );
                            return this;
                        }
                        if (typeof types === "object") {

                            // ( types-object [, selector] )
                            for (type in types) {
                                this.off(type, selector, types[type]);
                            }
                            return this;
                        }
                        if (selector === false || typeof selector === "function") {

                            // ( types [, fn] )
                            fn = selector;
                            selector = undefined;
                        }
                        if (fn === false) {
                            fn = returnFalse;
                        }
                        return this.each(function () {
                            jQuery.event.remove(this, types, fn, selector);
                        });
                    }
                });


                var

                    /* eslint-disable max-len */

                    // See https://github.com/eslint/eslint/issues/3229
                    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

                    /* eslint-enable */

                    // Support: IE <=10 - 11, Edge 12 - 13 only
                    // In IE/Edge using regex groups here causes severe slowdowns.
                    // See https://connect.microsoft.com/IE/feedback/details/1736512/
                    rnoInnerhtml = /<script|<style|<link/i,

                    // checked="checked" or checked
                    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
                    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
                function manipulationTarget(elem, content) {
                    if (nodeName(elem, "table") &&
                        nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

                        return jQuery(elem).children("tbody")[0] || elem;
                    }

                    return elem;
                }

// Replace/restore the type attribute of script elements for safe DOM manipulation
                function disableScript(elem) {
                    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
                    return elem;
                }

                function restoreScript(elem) {
                    if ((elem.type || "").slice(0, 5) === "true/") {
                        elem.type = elem.type.slice(5);
                    } else {
                        elem.removeAttribute("type");
                    }

                    return elem;
                }

                function cloneCopyEvent(src, dest) {
                    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

                    if (dest.nodeType !== 1) {
                        return;
                    }

                    // 1. Copy private data: events, handlers, etc.
                    if (dataPriv.hasData(src)) {
                        pdataOld = dataPriv.access(src);
                        pdataCur = dataPriv.set(dest, pdataOld);
                        events = pdataOld.events;

                        if (events) {
                            delete pdataCur.handle;
                            pdataCur.events = {};

                            for (type in events) {
                                for (i = 0, l = events[type].length; i < l; i++) {
                                    jQuery.event.add(dest, type, events[type][i]);
                                }
                            }
                        }
                    }

                    // 2. Copy user data
                    if (dataUser.hasData(src)) {
                        udataOld = dataUser.access(src);
                        udataCur = jQuery.extend({}, udataOld);

                        dataUser.set(dest, udataCur);
                    }
                }

// Fix IE bugs, see support tests
                function fixInput(src, dest) {
                    var nodeName = dest.nodeName.toLowerCase();

                    // Fails to persist the checked state of a cloned checkbox or radio button.
                    if (nodeName === "input" && rcheckableType.test(src.type)) {
                        dest.checked = src.checked;

                        // Fails to return the selected option to the default selected state when cloning options
                    } else if (nodeName === "input" || nodeName === "textarea") {
                        dest.defaultValue = src.defaultValue;
                    }
                }

                function domManip(collection, args, callback, ignored) {

                    // Flatten any nested arrays
                    args = concat.apply([], args);

                    var fragment, first, scripts, hasScripts, node, doc,
                        i = 0,
                        l = collection.length,
                        iNoClone = l - 1,
                        value = args[0],
                        valueIsFunction = isFunction(value);

                    // We can't cloneNode fragments that contain checked, in WebKit
                    if (valueIsFunction ||
                        (l > 1 && typeof value === "string" &&
                            !support.checkClone && rchecked.test(value))) {
                        return collection.each(function (index) {
                            var self = collection.eq(index);
                            if (valueIsFunction) {
                                args[0] = value.call(this, index, self.html());
                            }
                            domManip(self, args, callback, ignored);
                        });
                    }

                    if (l) {
                        fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
                        first = fragment.firstChild;

                        if (fragment.childNodes.length === 1) {
                            fragment = first;
                        }

                        // Require either new content or an interest in ignored elements to invoke the callback
                        if (first || ignored) {
                            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                            hasScripts = scripts.length;

                            // Use the original fragment for the last item
                            // instead of the first because it can end up
                            // being emptied incorrectly in certain situations (#8070).
                            for (; i < l; i++) {
                                node = fragment;

                                if (i !== iNoClone) {
                                    node = jQuery.clone(node, true, true);

                                    // Keep references to cloned scripts for later restoration
                                    if (hasScripts) {

                                        // Support: Android <=4.0 only, PhantomJS 1 only
                                        // push.apply(_, arraylike) throws on ancient WebKit
                                        jQuery.merge(scripts, getAll(node, "script"));
                                    }
                                }

                                callback.call(collection[i], node, i);
                            }

                            if (hasScripts) {
                                doc = scripts[scripts.length - 1].ownerDocument;

                                // Reenable scripts
                                jQuery.map(scripts, restoreScript);

                                // Evaluate executable scripts on first document insertion
                                for (i = 0; i < hasScripts; i++) {
                                    node = scripts[i];
                                    if (rscriptType.test(node.type || "") &&
                                        !dataPriv.access(node, "globalEval") &&
                                        jQuery.contains(doc, node)) {

                                        if (node.src && (node.type || "").toLowerCase() !== "module") {

                                            // Optional AJAX dependency, but won't run scripts if not present
                                            if (jQuery._evalUrl) {
                                                jQuery._evalUrl(node.src);
                                            }
                                        } else {
                                            DOMEval(node.textContent.replace(rcleanScript, ""), doc, node);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    return collection;
                }

                function remove(elem, selector, keepData) {
                    var node,
                        nodes = selector ? jQuery.filter(selector, elem) : elem,
                        i = 0;

                    for (; (node = nodes[i]) != null; i++) {
                        if (!keepData && node.nodeType === 1) {
                            jQuery.cleanData(getAll(node));
                        }

                        if (node.parentNode) {
                            if (keepData && jQuery.contains(node.ownerDocument, node)) {
                                setGlobalEval(getAll(node, "script"));
                            }
                            node.parentNode.removeChild(node);
                        }
                    }

                    return elem;
                }

                jQuery.extend({
                    htmlPrefilter: function (html) {
                        return html.replace(rxhtmlTag, "<$1></$2>");
                    },

                    clone: function (elem, dataAndEvents, deepDataAndEvents) {
                        var i, l, srcElements, destElements,
                            clone = elem.cloneNode(true),
                            inPage = jQuery.contains(elem.ownerDocument, elem);

                        // Fix IE cloning issues
                        if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) &&
                            !jQuery.isXMLDoc(elem)) {

                            // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                            destElements = getAll(clone);
                            srcElements = getAll(elem);

                            for (i = 0, l = srcElements.length; i < l; i++) {
                                fixInput(srcElements[i], destElements[i]);
                            }
                        }

                        // Copy the events from the original to the clone
                        if (dataAndEvents) {
                            if (deepDataAndEvents) {
                                srcElements = srcElements || getAll(elem);
                                destElements = destElements || getAll(clone);

                                for (i = 0, l = srcElements.length; i < l; i++) {
                                    cloneCopyEvent(srcElements[i], destElements[i]);
                                }
                            } else {
                                cloneCopyEvent(elem, clone);
                            }
                        }

                        // Preserve script evaluation history
                        destElements = getAll(clone, "script");
                        if (destElements.length > 0) {
                            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
                        }

                        // Return the cloned set
                        return clone;
                    },

                    cleanData: function (elems) {
                        var data, elem, type,
                            special = jQuery.event.special,
                            i = 0;

                        for (; (elem = elems[i]) !== undefined; i++) {
                            if (acceptData(elem)) {
                                if ((data = elem[dataPriv.expando])) {
                                    if (data.events) {
                                        for (type in data.events) {
                                            if (special[type]) {
                                                jQuery.event.remove(elem, type);

                                                // This is a shortcut to avoid jQuery.event.remove's overhead
                                            } else {
                                                jQuery.removeEvent(elem, type, data.handle);
                                            }
                                        }
                                    }

                                    // Support: Chrome <=35 - 45+
                                    // Assign undefined instead of using delete, see Data#remove
                                    elem[dataPriv.expando] = undefined;
                                }
                                if (elem[dataUser.expando]) {

                                    // Support: Chrome <=35 - 45+
                                    // Assign undefined instead of using delete, see Data#remove
                                    elem[dataUser.expando] = undefined;
                                }
                            }
                        }
                    }
                });

                jQuery.fn.extend({
                    detach: function (selector) {
                        return remove(this, selector, true);
                    },

                    remove: function (selector) {
                        return remove(this, selector);
                    },

                    text: function (value) {
                        return access(this, function (value) {
                            return value === undefined ?
                                jQuery.text(this) :
                                this.empty().each(function () {
                                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                                        this.textContent = value;
                                    }
                                });
                        }, null, value, arguments.length);
                    },

                    append: function () {
                        return domManip(this, arguments, function (elem) {
                            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                                var target = manipulationTarget(this, elem);
                                target.appendChild(elem);
                            }
                        });
                    },

                    prepend: function () {
                        return domManip(this, arguments, function (elem) {
                            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                                var target = manipulationTarget(this, elem);
                                target.insertBefore(elem, target.firstChild);
                            }
                        });
                    },

                    before: function () {
                        return domManip(this, arguments, function (elem) {
                            if (this.parentNode) {
                                this.parentNode.insertBefore(elem, this);
                            }
                        });
                    },

                    after: function () {
                        return domManip(this, arguments, function (elem) {
                            if (this.parentNode) {
                                this.parentNode.insertBefore(elem, this.nextSibling);
                            }
                        });
                    },

                    empty: function () {
                        var elem,
                            i = 0;

                        for (; (elem = this[i]) != null; i++) {
                            if (elem.nodeType === 1) {

                                // Prevent memory leaks
                                jQuery.cleanData(getAll(elem, false));

                                // Remove any remaining nodes
                                elem.textContent = "";
                            }
                        }

                        return this;
                    },

                    clone: function (dataAndEvents, deepDataAndEvents) {
                        dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                        deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

                        return this.map(function () {
                            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
                        });
                    },

                    html: function (value) {
                        return access(this, function (value) {
                            var elem = this[0] || {},
                                i = 0,
                                l = this.length;

                            if (value === undefined && elem.nodeType === 1) {
                                return elem.innerHTML;
                            }

                            // See if we can take a shortcut and just use innerHTML
                            if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                                !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                                value = jQuery.htmlPrefilter(value);

                                try {
                                    for (; i < l; i++) {
                                        elem = this[i] || {};

                                        // Remove element nodes and prevent memory leaks
                                        if (elem.nodeType === 1) {
                                            jQuery.cleanData(getAll(elem, false));
                                            elem.innerHTML = value;
                                        }
                                    }

                                    elem = 0;

                                    // If using innerHTML throws an exception, use the fallback method
                                } catch (e) {
                                }
                            }

                            if (elem) {
                                this.empty().append(value);
                            }
                        }, null, value, arguments.length);
                    },

                    replaceWith: function () {
                        var ignored = [];

                        // Make the changes, replacing each non-ignored context element with the new content
                        return domManip(this, arguments, function (elem) {
                            var parent = this.parentNode;

                            if (jQuery.inArray(this, ignored) < 0) {
                                jQuery.cleanData(getAll(this));
                                if (parent) {
                                    parent.replaceChild(elem, this);
                                }
                            }

                            // Force callback invocation
                        }, ignored);
                    }
                });

                jQuery.each({
                    appendTo: "append",
                    prependTo: "prepend",
                    insertBefore: "before",
                    insertAfter: "after",
                    replaceAll: "replaceWith"
                }, function (name, original) {
                    jQuery.fn[name] = function (selector) {
                        var elems,
                            ret = [],
                            insert = jQuery(selector),
                            last = insert.length - 1,
                            i = 0;

                        for (; i <= last; i++) {
                            elems = i === last ? this : this.clone(true);
                            jQuery(insert[i])[original](elems);

                            // Support: Android <=4.0 only, PhantomJS 1 only
                            // .get() because push.apply(_, arraylike) throws on ancient WebKit
                            push.apply(ret, elems.get());
                        }

                        return this.pushStack(ret);
                    };
                });
                var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

                var getStyles = function (elem) {

                    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
                    // IE throws on elements created in popups
                    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
                    var view = elem.ownerDocument.defaultView;

                    if (!view || !view.opener) {
                        view = window;
                    }

                    return view.getComputedStyle(elem);
                };

                var rboxStyle = new RegExp(cssExpand.join("|"), "i");


                (function () {

                    // Executing both pixelPosition & boxSizingReliable tests require only one layout
                    // so they're executed at the same time to save the second computation.
                    function computeStyleTests() {

                        // This is a singleton, we need to execute it only once
                        if (!div) {
                            return;
                        }

                        container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
                            "margin-top:1px;padding:0;border:0";
                        div.style.cssText =
                            "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                            "margin:auto;border:1px;padding:1px;" +
                            "width:60%;top:1%";
                        documentElement.appendChild(container).appendChild(div);

                        var divStyle = window.getComputedStyle(div);
                        pixelPositionVal = divStyle.top !== "1%";

                        // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
                        reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

                        // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
                        // Some styles come back with percentage values, even though they shouldn't
                        div.style.right = "60%";
                        pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

                        // Support: IE 9 - 11 only
                        // Detect misreporting of content dimensions for box-sizing:border-box elements
                        boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

                        // Support: IE 9 only
                        // Detect overflow:scroll screwiness (gh-3699)
                        div.style.position = "absolute";
                        scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

                        documentElement.removeChild(container);

                        // Nullify the div so it wouldn't be stored in the memory and
                        // it will also be a sign that checks already performed
                        div = null;
                    }

                    function roundPixelMeasures(measure) {
                        return Math.round(parseFloat(measure));
                    }

                    var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
                        reliableMarginLeftVal,
                        container = document.createElement("div"),
                        div = document.createElement("div");

                    // Finish early in limited (non-browser) environments
                    if (!div.style) {
                        return;
                    }

                    // Support: IE <=9 - 11 only
                    // Style of cloned element affects source element cloned (#8908)
                    div.style.backgroundClip = "content-box";
                    div.cloneNode(true).style.backgroundClip = "";
                    support.clearCloneStyle = div.style.backgroundClip === "content-box";

                    jQuery.extend(support, {
                        boxSizingReliable: function () {
                            computeStyleTests();
                            return boxSizingReliableVal;
                        },
                        pixelBoxStyles: function () {
                            computeStyleTests();
                            return pixelBoxStylesVal;
                        },
                        pixelPosition: function () {
                            computeStyleTests();
                            return pixelPositionVal;
                        },
                        reliableMarginLeft: function () {
                            computeStyleTests();
                            return reliableMarginLeftVal;
                        },
                        scrollboxSize: function () {
                            computeStyleTests();
                            return scrollboxSizeVal;
                        }
                    });
                })();


                function curCSS(elem, name, computed) {
                    var width, minWidth, maxWidth, ret,

                        // Support: Firefox 51+
                        // Retrieving style before computed somehow
                        // fixes an issue with getting wrong values
                        // on detached elements
                        style = elem.style;

                    computed = computed || getStyles(elem);

                    // getPropertyValue is needed for:
                    //   .css('filter') (IE 9 only, #12537)
                    //   .css('--customProperty) (#3144)
                    if (computed) {
                        ret = computed.getPropertyValue(name) || computed[name];

                        if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                            ret = jQuery.style(elem, name);
                        }

                        // A tribute to the "awesome hack by Dean Edwards"
                        // Android Browser returns percentage for some values,
                        // but width seems to be reliably pixels.
                        // This is against the CSSOM draft spec:
                        // https://drafts.csswg.org/cssom/#resolved-values
                        if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {

                            // Remember the original values
                            width = style.width;
                            minWidth = style.minWidth;
                            maxWidth = style.maxWidth;

                            // Put in the new values to get a computed value out
                            style.minWidth = style.maxWidth = style.width = ret;
                            ret = computed.width;

                            // Revert the changed values
                            style.width = width;
                            style.minWidth = minWidth;
                            style.maxWidth = maxWidth;
                        }
                    }

                    return ret !== undefined ?

                        // Support: IE <=9 - 11 only
                        // IE returns zIndex value as an integer.
                        ret + "" :
                        ret;
                }


                function addGetHookIf(conditionFn, hookFn) {

                    // Define the hook, we'll check on the first run if it's really needed.
                    return {
                        get: function () {
                            if (conditionFn()) {

                                // Hook not needed (or it's not possible to use it due
                                // to missing dependency), remove it.
                                delete this.get;
                                return;
                            }

                            // Hook needed; redefine it so that the support test is not executed again.
                            return (this.get = hookFn).apply(this, arguments);
                        }
                    };
                }


                var

                    // Swappable if display is none or starts with table
                    // except "table", "table-cell", or "table-caption"
                    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
                    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
                    rcustomProp = /^--/,
                    cssShow = {position: "absolute", visibility: "hidden", display: "block"},
                    cssNormalTransform = {
                        letterSpacing: "0",
                        fontWeight: "400"
                    },

                    cssPrefixes = ["Webkit", "Moz", "ms"],
                    emptyStyle = document.createElement("div").style;

// Return a css property mapped to a potentially vendor prefixed property
                function vendorPropName(name) {

                    // Shortcut for names that are not vendor prefixed
                    if (name in emptyStyle) {
                        return name;
                    }

                    // Check for vendor prefixed names
                    var capName = name[0].toUpperCase() + name.slice(1),
                        i = cssPrefixes.length;

                    while (i--) {
                        name = cssPrefixes[i] + capName;
                        if (name in emptyStyle) {
                            return name;
                        }
                    }
                }

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
                function finalPropName(name) {
                    var ret = jQuery.cssProps[name];
                    if (!ret) {
                        ret = jQuery.cssProps[name] = vendorPropName(name) || name;
                    }
                    return ret;
                }

                function setPositiveNumber(elem, value, subtract) {

                    // Any relative (+/-) values have already been
                    // normalized at this point
                    var matches = rcssNum.exec(value);
                    return matches ?

                        // Guard against undefined "subtract", e.g., when used as in cssHooks
                        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") :
                        value;
                }

                function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
                    var i = dimension === "width" ? 1 : 0,
                        extra = 0,
                        delta = 0;

                    // Adjustment may not be necessary
                    if (box === (isBorderBox ? "border" : "content")) {
                        return 0;
                    }

                    for (; i < 4; i += 2) {

                        // Both box models exclude margin
                        if (box === "margin") {
                            delta += jQuery.css(elem, box + cssExpand[i], true, styles);
                        }

                        // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
                        if (!isBorderBox) {

                            // Add padding
                            delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                            // For "border" or "margin", add border
                            if (box !== "padding") {
                                delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);

                                // But still keep track of it otherwise
                            } else {
                                extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                            }

                            // If we get here with a border-box (content + padding + border), we're seeking "content" or
                            // "padding" or "margin"
                        } else {

                            // For "content", subtract padding
                            if (box === "content") {
                                delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                            }

                            // For "content" or "padding", subtract border
                            if (box !== "margin") {
                                delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                            }
                        }
                    }

                    // Account for positive content-box scroll gutter when requested by providing computedVal
                    if (!isBorderBox && computedVal >= 0) {

                        // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
                        // Assuming integer scroll gutter, subtract the rest and round down
                        delta += Math.max(0, Math.ceil(
                            elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] -
                            computedVal -
                            delta -
                            extra -
                            0.5
                        ));
                    }

                    return delta;
                }

                function getWidthOrHeight(elem, dimension, extra) {

                    // Start with computed style
                    var styles = getStyles(elem),
                        val = curCSS(elem, dimension, styles),
                        isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                        valueIsBorderBox = isBorderBox;

                    // Support: Firefox <=54
                    // Return a confounding non-pixel value or feign ignorance, as appropriate.
                    if (rnumnonpx.test(val)) {
                        if (!extra) {
                            return val;
                        }
                        val = "auto";
                    }

                    // Check for style in case a browser which returns unreliable values
                    // for getComputedStyle silently falls back to the reliable elem.style
                    valueIsBorderBox = valueIsBorderBox &&
                        (support.boxSizingReliable() || val === elem.style[dimension]);

                    // Fall back to offsetWidth/offsetHeight when value is "auto"
                    // This happens for inline elements with no explicit setting (gh-3571)
                    // Support: Android <=4.1 - 4.3 only
                    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
                    if (val === "auto" ||
                        !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") {

                        val = elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)];

                        // offsetWidth/offsetHeight provide border-box values
                        valueIsBorderBox = true;
                    }

                    // Normalize "" and auto
                    val = parseFloat(val) || 0;

                    // Adjust for the element's box model
                    return (val +
                        boxModelAdjustment(
                            elem,
                            dimension,
                            extra || (isBorderBox ? "border" : "content"),
                            valueIsBorderBox,
                            styles,

                            // Provide the current computed size to request scroll gutter calculation (gh-3589)
                            val
                        )
                    ) + "px";
                }

                jQuery.extend({

                    // Add in style property hooks for overriding the default
                    // behavior of getting and setting a style property
                    cssHooks: {
                        opacity: {
                            get: function (elem, computed) {
                                if (computed) {

                                    // We should always get a number back from opacity
                                    var ret = curCSS(elem, "opacity");
                                    return ret === "" ? "1" : ret;
                                }
                            }
                        }
                    },

                    // Don't automatically add "px" to these possibly-unitless properties
                    cssNumber: {
                        "animationIterationCount": true,
                        "columnCount": true,
                        "fillOpacity": true,
                        "flexGrow": true,
                        "flexShrink": true,
                        "fontWeight": true,
                        "lineHeight": true,
                        "opacity": true,
                        "order": true,
                        "orphans": true,
                        "widows": true,
                        "zIndex": true,
                        "zoom": true
                    },

                    // Add in properties whose names you wish to fix before
                    // setting or getting the value
                    cssProps: {},

                    // Get and set the style property on a DOM Node
                    style: function (elem, name, value, extra) {

                        // Don't set styles on text and comment nodes
                        if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                            return;
                        }

                        // Make sure that we're working with the right name
                        var ret, type, hooks,
                            origName = camelCase(name),
                            isCustomProp = rcustomProp.test(name),
                            style = elem.style;

                        // Make sure that we're working with the right name. We don't
                        // want to query the value if it is a CSS custom property
                        // since they are user-defined.
                        if (!isCustomProp) {
                            name = finalPropName(origName);
                        }

                        // Gets hook for the prefixed version, then unprefixed version
                        hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                        // Check if we're setting a value
                        if (value !== undefined) {
                            type = typeof value;

                            // Convert "+=" or "-=" to relative numbers (#7345)
                            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                                value = adjustCSS(elem, name, ret);

                                // Fixes bug #9237
                                type = "number";
                            }

                            // Make sure that null and NaN values aren't set (#7116)
                            if (value == null || value !== value) {
                                return;
                            }

                            // If a number was passed in, add the unit (except for certain CSS properties)
                            if (type === "number") {
                                value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                            }

                            // background-* props affect original clone's values
                            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                                style[name] = "inherit";
                            }

                            // If a hook was provided, use that value, otherwise just set the specified value
                            if (!hooks || !("set" in hooks) ||
                                (value = hooks.set(elem, value, extra)) !== undefined) {

                                if (isCustomProp) {
                                    style.setProperty(name, value);
                                } else {
                                    style[name] = value;
                                }
                            }

                        } else {

                            // If a hook was provided get the non-computed value from there
                            if (hooks && "get" in hooks &&
                                (ret = hooks.get(elem, false, extra)) !== undefined) {

                                return ret;
                            }

                            // Otherwise just get the value from the style object
                            return style[name];
                        }
                    },

                    css: function (elem, name, extra, styles) {
                        var val, num, hooks,
                            origName = camelCase(name),
                            isCustomProp = rcustomProp.test(name);

                        // Make sure that we're working with the right name. We don't
                        // want to modify the value if it is a CSS custom property
                        // since they are user-defined.
                        if (!isCustomProp) {
                            name = finalPropName(origName);
                        }

                        // Try prefixed name followed by the unprefixed name
                        hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                        // If a hook was provided get the computed value from there
                        if (hooks && "get" in hooks) {
                            val = hooks.get(elem, true, extra);
                        }

                        // Otherwise, if a way to get the computed value exists, use that
                        if (val === undefined) {
                            val = curCSS(elem, name, styles);
                        }

                        // Convert "normal" to computed value
                        if (val === "normal" && name in cssNormalTransform) {
                            val = cssNormalTransform[name];
                        }

                        // Make numeric if forced or a qualifier was provided and val looks numeric
                        if (extra === "" || extra) {
                            num = parseFloat(val);
                            return extra === true || isFinite(num) ? num || 0 : val;
                        }

                        return val;
                    }
                });

                jQuery.each(["height", "width"], function (i, dimension) {
                    jQuery.cssHooks[dimension] = {
                        get: function (elem, computed, extra) {
                            if (computed) {

                                // Certain elements can have dimension info if we invisibly show them
                                // but it must have a current display style that would benefit
                                return rdisplayswap.test(jQuery.css(elem, "display")) &&

                                // Support: Safari 8+
                                // Table columns in Safari have non-zero offsetWidth & zero
                                // getBoundingClientRect().width unless display is changed.
                                // Support: IE <=11 only
                                // Running getBoundingClientRect on a disconnected node
                                // in IE throws an error.
                                (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ?
                                    swap(elem, cssShow, function () {
                                        return getWidthOrHeight(elem, dimension, extra);
                                    }) :
                                    getWidthOrHeight(elem, dimension, extra);
                            }
                        },

                        set: function (elem, value, extra) {
                            var matches,
                                styles = getStyles(elem),
                                isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                                subtract = extra && boxModelAdjustment(
                                    elem,
                                    dimension,
                                    extra,
                                    isBorderBox,
                                    styles
                                );

                            // Account for unreliable border-box dimensions by comparing offset* to computed and
                            // faking a content-box to get border and padding (gh-3699)
                            if (isBorderBox && support.scrollboxSize() === styles.position) {
                                subtract -= Math.ceil(
                                    elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] -
                                    parseFloat(styles[dimension]) -
                                    boxModelAdjustment(elem, dimension, "border", false, styles) -
                                    0.5
                                );
                            }

                            // Convert to pixels if value adjustment is needed
                            if (subtract && (matches = rcssNum.exec(value)) &&
                                (matches[3] || "px") !== "px") {

                                elem.style[dimension] = value;
                                value = jQuery.css(elem, dimension);
                            }

                            return setPositiveNumber(elem, value, subtract);
                        }
                    };
                });

                jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft,
                    function (elem, computed) {
                        if (computed) {
                            return (parseFloat(curCSS(elem, "marginLeft")) ||
                                elem.getBoundingClientRect().left -
                                swap(elem, {marginLeft: 0}, function () {
                                    return elem.getBoundingClientRect().left;
                                })
                            ) + "px";
                        }
                    }
                );

// These hooks are used by animate to expand properties
                jQuery.each({
                    margin: "",
                    padding: "",
                    border: "Width"
                }, function (prefix, suffix) {
                    jQuery.cssHooks[prefix + suffix] = {
                        expand: function (value) {
                            var i = 0,
                                expanded = {},

                                // Assumes a single number if not a string
                                parts = typeof value === "string" ? value.split(" ") : [value];

                            for (; i < 4; i++) {
                                expanded[prefix + cssExpand[i] + suffix] =
                                    parts[i] || parts[i - 2] || parts[0];
                            }

                            return expanded;
                        }
                    };

                    if (prefix !== "margin") {
                        jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
                    }
                });

                jQuery.fn.extend({
                    css: function (name, value) {
                        return access(this, function (elem, name, value) {
                            var styles, len,
                                map = {},
                                i = 0;

                            if (Array.isArray(name)) {
                                styles = getStyles(elem);
                                len = name.length;

                                for (; i < len; i++) {
                                    map[name[i]] = jQuery.css(elem, name[i], false, styles);
                                }

                                return map;
                            }

                            return value !== undefined ?
                                jQuery.style(elem, name, value) :
                                jQuery.css(elem, name);
                        }, name, value, arguments.length > 1);
                    }
                });


                function Tween(elem, options, prop, end, easing) {
                    return new Tween.prototype.init(elem, options, prop, end, easing);
                }

                jQuery.Tween = Tween;

                Tween.prototype = {
                    constructor: Tween,
                    init: function (elem, options, prop, end, easing, unit) {
                        this.elem = elem;
                        this.prop = prop;
                        this.easing = easing || jQuery.easing._default;
                        this.options = options;
                        this.start = this.now = this.cur();
                        this.end = end;
                        this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
                    },
                    cur: function () {
                        var hooks = Tween.propHooks[this.prop];

                        return hooks && hooks.get ?
                            hooks.get(this) :
                            Tween.propHooks._default.get(this);
                    },
                    run: function (percent) {
                        var eased,
                            hooks = Tween.propHooks[this.prop];

                        if (this.options.duration) {
                            this.pos = eased = jQuery.easing[this.easing](
                                percent, this.options.duration * percent, 0, 1, this.options.duration
                            );
                        } else {
                            this.pos = eased = percent;
                        }
                        this.now = (this.end - this.start) * eased + this.start;

                        if (this.options.step) {
                            this.options.step.call(this.elem, this.now, this);
                        }

                        if (hooks && hooks.set) {
                            hooks.set(this);
                        } else {
                            Tween.propHooks._default.set(this);
                        }
                        return this;
                    }
                };

                Tween.prototype.init.prototype = Tween.prototype;

                Tween.propHooks = {
                    _default: {
                        get: function (tween) {
                            var result;

                            // Use a property on the element directly when it is not a DOM element,
                            // or when there is no matching style property that exists.
                            if (tween.elem.nodeType !== 1 ||
                                tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                                return tween.elem[tween.prop];
                            }

                            // Passing an empty string as a 3rd parameter to .css will automatically
                            // attempt a parseFloat and fallback to a string if the parse fails.
                            // Simple values such as "10px" are parsed to Float;
                            // complex values such as "rotate(1rad)" are returned as-is.
                            result = jQuery.css(tween.elem, tween.prop, "");

                            // Empty strings, null, undefined and "auto" are converted to 0.
                            return !result || result === "auto" ? 0 : result;
                        },
                        set: function (tween) {

                            // Use step hook for back compat.
                            // Use cssHook if its there.
                            // Use .style if available and use plain properties where available.
                            if (jQuery.fx.step[tween.prop]) {
                                jQuery.fx.step[tween.prop](tween);
                            } else if (tween.elem.nodeType === 1 &&
                                (tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
                                    jQuery.cssHooks[tween.prop])) {
                                jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                            } else {
                                tween.elem[tween.prop] = tween.now;
                            }
                        }
                    }
                };

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
                Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
                    set: function (tween) {
                        if (tween.elem.nodeType && tween.elem.parentNode) {
                            tween.elem[tween.prop] = tween.now;
                        }
                    }
                };

                jQuery.easing = {
                    linear: function (p) {
                        return p;
                    },
                    swing: function (p) {
                        return 0.5 - Math.cos(p * Math.PI) / 2;
                    },
                    _default: "swing"
                };

                jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
                jQuery.fx.step = {};


                var
                    fxNow, inProgress,
                    rfxtypes = /^(?:toggle|show|hide)$/,
                    rrun = /queueHooks$/;

                function schedule() {
                    if (inProgress) {
                        if (document.hidden === false && window.requestAnimationFrame) {
                            window.requestAnimationFrame(schedule);
                        } else {
                            window.setTimeout(schedule, jQuery.fx.interval);
                        }

                        jQuery.fx.tick();
                    }
                }

// Animations created synchronously will run synchronously
                function createFxNow() {
                    window.setTimeout(function () {
                        fxNow = undefined;
                    });
                    return (fxNow = Date.now());
                }

// Generate parameters to create a standard animation
                function genFx(type, includeWidth) {
                    var which,
                        i = 0,
                        attrs = {height: type};

                    // If we include width, step value is 1 to do all cssExpand values,
                    // otherwise step value is 2 to skip over Left and Right
                    includeWidth = includeWidth ? 1 : 0;
                    for (; i < 4; i += 2 - includeWidth) {
                        which = cssExpand[i];
                        attrs["margin" + which] = attrs["padding" + which] = type;
                    }

                    if (includeWidth) {
                        attrs.opacity = attrs.width = type;
                    }

                    return attrs;
                }

                function createTween(value, prop, animation) {
                    var tween,
                        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
                        index = 0,
                        length = collection.length;
                    for (; index < length; index++) {
                        if ((tween = collection[index].call(animation, prop, value))) {

                            // We're done with this property
                            return tween;
                        }
                    }
                }

                function defaultPrefilter(elem, props, opts) {
                    var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
                        isBox = "width" in props || "height" in props,
                        anim = this,
                        orig = {},
                        style = elem.style,
                        hidden = elem.nodeType && isHiddenWithinTree(elem),
                        dataShow = dataPriv.get(elem, "fxshow");

                    // Queue-skipping animations hijack the fx hooks
                    if (!opts.queue) {
                        hooks = jQuery._queueHooks(elem, "fx");
                        if (hooks.unqueued == null) {
                            hooks.unqueued = 0;
                            oldfire = hooks.empty.fire;
                            hooks.empty.fire = function () {
                                if (!hooks.unqueued) {
                                    oldfire();
                                }
                            };
                        }
                        hooks.unqueued++;

                        anim.always(function () {

                            // Ensure the complete handler is called before this completes
                            anim.always(function () {
                                hooks.unqueued--;
                                if (!jQuery.queue(elem, "fx").length) {
                                    hooks.empty.fire();
                                }
                            });
                        });
                    }

                    // Detect show/hide animations
                    for (prop in props) {
                        value = props[prop];
                        if (rfxtypes.test(value)) {
                            delete props[prop];
                            toggle = toggle || value === "toggle";
                            if (value === (hidden ? "hide" : "show")) {

                                // Pretend to be hidden if this is a "show" and
                                // there is still data from a stopped show/hide
                                if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                                    hidden = true;

                                    // Ignore all other no-op show/hide data
                                } else {
                                    continue;
                                }
                            }
                            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
                        }
                    }

                    // Bail out if this is a no-op like .hide().hide()
                    propTween = !jQuery.isEmptyObject(props);
                    if (!propTween && jQuery.isEmptyObject(orig)) {
                        return;
                    }

                    // Restrict "overflow" and "display" styles during box animations
                    if (isBox && elem.nodeType === 1) {

                        // Support: IE <=9 - 11, Edge 12 - 15
                        // Record all 3 overflow attributes because IE does not infer the shorthand
                        // from identically-valued overflowX and overflowY and Edge just mirrors
                        // the overflowX value there.
                        opts.overflow = [style.overflow, style.overflowX, style.overflowY];

                        // Identify a display type, preferring old show/hide data over the CSS cascade
                        restoreDisplay = dataShow && dataShow.display;
                        if (restoreDisplay == null) {
                            restoreDisplay = dataPriv.get(elem, "display");
                        }
                        display = jQuery.css(elem, "display");
                        if (display === "none") {
                            if (restoreDisplay) {
                                display = restoreDisplay;
                            } else {

                                // Get nonempty value(s) by temporarily forcing visibility
                                showHide([elem], true);
                                restoreDisplay = elem.style.display || restoreDisplay;
                                display = jQuery.css(elem, "display");
                                showHide([elem]);
                            }
                        }

                        // Animate inline elements as inline-block
                        if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                            if (jQuery.css(elem, "float") === "none") {

                                // Restore the original display value at the end of pure show/hide animations
                                if (!propTween) {
                                    anim.done(function () {
                                        style.display = restoreDisplay;
                                    });
                                    if (restoreDisplay == null) {
                                        display = style.display;
                                        restoreDisplay = display === "none" ? "" : display;
                                    }
                                }
                                style.display = "inline-block";
                            }
                        }
                    }

                    if (opts.overflow) {
                        style.overflow = "hidden";
                        anim.always(function () {
                            style.overflow = opts.overflow[0];
                            style.overflowX = opts.overflow[1];
                            style.overflowY = opts.overflow[2];
                        });
                    }

                    // Implement show/hide animations
                    propTween = false;
                    for (prop in orig) {

                        // General show/hide setup for this element animation
                        if (!propTween) {
                            if (dataShow) {
                                if ("hidden" in dataShow) {
                                    hidden = dataShow.hidden;
                                }
                            } else {
                                dataShow = dataPriv.access(elem, "fxshow", {display: restoreDisplay});
                            }

                            // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                            if (toggle) {
                                dataShow.hidden = !hidden;
                            }

                            // Show elements before animating them
                            if (hidden) {
                                showHide([elem], true);
                            }

                            /* eslint-disable no-loop-func */

                            anim.done(function () {

                                /* eslint-enable no-loop-func */

                                // The final step of a "hide" animation is actually hiding the element
                                if (!hidden) {
                                    showHide([elem]);
                                }
                                dataPriv.remove(elem, "fxshow");
                                for (prop in orig) {
                                    jQuery.style(elem, prop, orig[prop]);
                                }
                            });
                        }

                        // Per-property setup
                        propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                        if (!(prop in dataShow)) {
                            dataShow[prop] = propTween.start;
                            if (hidden) {
                                propTween.end = propTween.start;
                                propTween.start = 0;
                            }
                        }
                    }
                }

                function propFilter(props, specialEasing) {
                    var index, name, easing, value, hooks;

                    // camelCase, specialEasing and expand cssHook pass
                    for (index in props) {
                        name = camelCase(index);
                        easing = specialEasing[name];
                        value = props[index];
                        if (Array.isArray(value)) {
                            easing = value[1];
                            value = props[index] = value[0];
                        }

                        if (index !== name) {
                            props[name] = value;
                            delete props[index];
                        }

                        hooks = jQuery.cssHooks[name];
                        if (hooks && "expand" in hooks) {
                            value = hooks.expand(value);
                            delete props[name];

                            // Not quite $.extend, this won't overwrite existing keys.
                            // Reusing 'index' because we have the correct "name"
                            for (index in value) {
                                if (!(index in props)) {
                                    props[index] = value[index];
                                    specialEasing[index] = easing;
                                }
                            }
                        } else {
                            specialEasing[name] = easing;
                        }
                    }
                }

                function Animation(elem, properties, options) {
                    var result,
                        stopped,
                        index = 0,
                        length = Animation.prefilters.length,
                        deferred = jQuery.Deferred().always(function () {

                            // Don't match elem in the :animated selector
                            delete tick.elem;
                        }),
                        tick = function () {
                            if (stopped) {
                                return false;
                            }
                            var currentTime = fxNow || createFxNow(),
                                remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

                                // Support: Android 2.3 only
                                // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                                temp = remaining / animation.duration || 0,
                                percent = 1 - temp,
                                index = 0,
                                length = animation.tweens.length;

                            for (; index < length; index++) {
                                animation.tweens[index].run(percent);
                            }

                            deferred.notifyWith(elem, [animation, percent, remaining]);

                            // If there's more to do, yield
                            if (percent < 1 && length) {
                                return remaining;
                            }

                            // If this was an empty animation, synthesize a final progress notification
                            if (!length) {
                                deferred.notifyWith(elem, [animation, 1, 0]);
                            }

                            // Resolve the animation and report its conclusion
                            deferred.resolveWith(elem, [animation]);
                            return false;
                        },
                        animation = deferred.promise({
                            elem: elem,
                            props: jQuery.extend({}, properties),
                            opts: jQuery.extend(true, {
                                specialEasing: {},
                                easing: jQuery.easing._default
                            }, options),
                            originalProperties: properties,
                            originalOptions: options,
                            startTime: fxNow || createFxNow(),
                            duration: options.duration,
                            tweens: [],
                            createTween: function (prop, end) {
                                var tween = jQuery.Tween(elem, animation.opts, prop, end,
                                    animation.opts.specialEasing[prop] || animation.opts.easing);
                                animation.tweens.push(tween);
                                return tween;
                            },
                            stop: function (gotoEnd) {
                                var index = 0,

                                    // If we are going to the end, we want to run all the tweens
                                    // otherwise we skip this part
                                    length = gotoEnd ? animation.tweens.length : 0;
                                if (stopped) {
                                    return this;
                                }
                                stopped = true;
                                for (; index < length; index++) {
                                    animation.tweens[index].run(1);
                                }

                                // Resolve when we played the last frame; otherwise, reject
                                if (gotoEnd) {
                                    deferred.notifyWith(elem, [animation, 1, 0]);
                                    deferred.resolveWith(elem, [animation, gotoEnd]);
                                } else {
                                    deferred.rejectWith(elem, [animation, gotoEnd]);
                                }
                                return this;
                            }
                        }),
                        props = animation.props;

                    propFilter(props, animation.opts.specialEasing);

                    for (; index < length; index++) {
                        result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
                        if (result) {
                            if (isFunction(result.stop)) {
                                jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
                                    result.stop.bind(result);
                            }
                            return result;
                        }
                    }

                    jQuery.map(props, createTween, animation);

                    if (isFunction(animation.opts.start)) {
                        animation.opts.start.call(elem, animation);
                    }

                    // Attach callbacks from options
                    animation
                        .progress(animation.opts.progress)
                        .done(animation.opts.done, animation.opts.complete)
                        .fail(animation.opts.fail)
                        .always(animation.opts.always);

                    jQuery.fx.timer(
                        jQuery.extend(tick, {
                            elem: elem,
                            anim: animation,
                            queue: animation.opts.queue
                        })
                    );

                    return animation;
                }

                jQuery.Animation = jQuery.extend(Animation, {

                    tweeners: {
                        "*": [function (prop, value) {
                            var tween = this.createTween(prop, value);
                            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                            return tween;
                        }]
                    },

                    tweener: function (props, callback) {
                        if (isFunction(props)) {
                            callback = props;
                            props = ["*"];
                        } else {
                            props = props.match(rnothtmlwhite);
                        }

                        var prop,
                            index = 0,
                            length = props.length;

                        for (; index < length; index++) {
                            prop = props[index];
                            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                            Animation.tweeners[prop].unshift(callback);
                        }
                    },

                    prefilters: [defaultPrefilter],

                    prefilter: function (callback, prepend) {
                        if (prepend) {
                            Animation.prefilters.unshift(callback);
                        } else {
                            Animation.prefilters.push(callback);
                        }
                    }
                });

                jQuery.speed = function (speed, easing, fn) {
                    var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                        complete: fn || !fn && easing ||
                        isFunction(speed) && speed,
                        duration: speed,
                        easing: fn && easing || easing && !isFunction(easing) && easing
                    };

                    // Go to the end state if fx are off
                    if (jQuery.fx.off) {
                        opt.duration = 0;

                    } else {
                        if (typeof opt.duration !== "number") {
                            if (opt.duration in jQuery.fx.speeds) {
                                opt.duration = jQuery.fx.speeds[opt.duration];

                            } else {
                                opt.duration = jQuery.fx.speeds._default;
                            }
                        }
                    }

                    // Normalize opt.queue - true/undefined/null -> "fx"
                    if (opt.queue == null || opt.queue === true) {
                        opt.queue = "fx";
                    }

                    // Queueing
                    opt.old = opt.complete;

                    opt.complete = function () {
                        if (isFunction(opt.old)) {
                            opt.old.call(this);
                        }

                        if (opt.queue) {
                            jQuery.dequeue(this, opt.queue);
                        }
                    };

                    return opt;
                };

                jQuery.fn.extend({
                    fadeTo: function (speed, to, easing, callback) {

                        // Show any hidden elements after setting opacity to 0
                        return this.filter(isHiddenWithinTree).css("opacity", 0).show()

                        // Animate to the value specified
                            .end().animate({opacity: to}, speed, easing, callback);
                    },
                    animate: function (prop, speed, easing, callback) {
                        var empty = jQuery.isEmptyObject(prop),
                            optall = jQuery.speed(speed, easing, callback),
                            doAnimation = function () {

                                // Operate on a copy of prop so per-property easing won't be lost
                                var anim = Animation(this, jQuery.extend({}, prop), optall);

                                // Empty animations, or finishing resolves immediately
                                if (empty || dataPriv.get(this, "finish")) {
                                    anim.stop(true);
                                }
                            };
                        doAnimation.finish = doAnimation;

                        return empty || optall.queue === false ?
                            this.each(doAnimation) :
                            this.queue(optall.queue, doAnimation);
                    },
                    stop: function (type, clearQueue, gotoEnd) {
                        var stopQueue = function (hooks) {
                            var stop = hooks.stop;
                            delete hooks.stop;
                            stop(gotoEnd);
                        };

                        if (typeof type !== "string") {
                            gotoEnd = clearQueue;
                            clearQueue = type;
                            type = undefined;
                        }
                        if (clearQueue && type !== false) {
                            this.queue(type || "fx", []);
                        }

                        return this.each(function () {
                            var dequeue = true,
                                index = type != null && type + "queueHooks",
                                timers = jQuery.timers,
                                data = dataPriv.get(this);

                            if (index) {
                                if (data[index] && data[index].stop) {
                                    stopQueue(data[index]);
                                }
                            } else {
                                for (index in data) {
                                    if (data[index] && data[index].stop && rrun.test(index)) {
                                        stopQueue(data[index]);
                                    }
                                }
                            }

                            for (index = timers.length; index--;) {
                                if (timers[index].elem === this &&
                                    (type == null || timers[index].queue === type)) {

                                    timers[index].anim.stop(gotoEnd);
                                    dequeue = false;
                                    timers.splice(index, 1);
                                }
                            }

                            // Start the next in the queue if the last step wasn't forced.
                            // Timers currently will call their complete callbacks, which
                            // will dequeue but only if they were gotoEnd.
                            if (dequeue || !gotoEnd) {
                                jQuery.dequeue(this, type);
                            }
                        });
                    },
                    finish: function (type) {
                        if (type !== false) {
                            type = type || "fx";
                        }
                        return this.each(function () {
                            var index,
                                data = dataPriv.get(this),
                                queue = data[type + "queue"],
                                hooks = data[type + "queueHooks"],
                                timers = jQuery.timers,
                                length = queue ? queue.length : 0;

                            // Enable finishing flag on private data
                            data.finish = true;

                            // Empty the queue first
                            jQuery.queue(this, type, []);

                            if (hooks && hooks.stop) {
                                hooks.stop.call(this, true);
                            }

                            // Look for any active animations, and finish them
                            for (index = timers.length; index--;) {
                                if (timers[index].elem === this && timers[index].queue === type) {
                                    timers[index].anim.stop(true);
                                    timers.splice(index, 1);
                                }
                            }

                            // Look for any animations in the old queue and finish them
                            for (index = 0; index < length; index++) {
                                if (queue[index] && queue[index].finish) {
                                    queue[index].finish.call(this);
                                }
                            }

                            // Turn off finishing flag
                            delete data.finish;
                        });
                    }
                });

                jQuery.each(["toggle", "show", "hide"], function (i, name) {
                    var cssFn = jQuery.fn[name];
                    jQuery.fn[name] = function (speed, easing, callback) {
                        return speed == null || typeof speed === "boolean" ?
                            cssFn.apply(this, arguments) :
                            this.animate(genFx(name, true), speed, easing, callback);
                    };
                });

// Generate shortcuts for custom animations
                jQuery.each({
                    slideDown: genFx("show"),
                    slideUp: genFx("hide"),
                    slideToggle: genFx("toggle"),
                    fadeIn: {opacity: "show"},
                    fadeOut: {opacity: "hide"},
                    fadeToggle: {opacity: "toggle"}
                }, function (name, props) {
                    jQuery.fn[name] = function (speed, easing, callback) {
                        return this.animate(props, speed, easing, callback);
                    };
                });

                jQuery.timers = [];
                jQuery.fx.tick = function () {
                    var timer,
                        i = 0,
                        timers = jQuery.timers;

                    fxNow = Date.now();

                    for (; i < timers.length; i++) {
                        timer = timers[i];

                        // Run the timer and safely remove it when done (allowing for external removal)
                        if (!timer() && timers[i] === timer) {
                            timers.splice(i--, 1);
                        }
                    }

                    if (!timers.length) {
                        jQuery.fx.stop();
                    }
                    fxNow = undefined;
                };

                jQuery.fx.timer = function (timer) {
                    jQuery.timers.push(timer);
                    jQuery.fx.start();
                };

                jQuery.fx.interval = 13;
                jQuery.fx.start = function () {
                    if (inProgress) {
                        return;
                    }

                    inProgress = true;
                    schedule();
                };

                jQuery.fx.stop = function () {
                    inProgress = null;
                };

                jQuery.fx.speeds = {
                    slow: 600,
                    fast: 200,

                    // Default speed
                    _default: 400
                };


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
                jQuery.fn.delay = function (time, type) {
                    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
                    type = type || "fx";

                    return this.queue(type, function (next, hooks) {
                        var timeout = window.setTimeout(next, time);
                        hooks.stop = function () {
                            window.clearTimeout(timeout);
                        };
                    });
                };


                (function () {
                    var input = document.createElement("input"),
                        select = document.createElement("select"),
                        opt = select.appendChild(document.createElement("option"));

                    input.type = "checkbox";

                    // Support: Android <=4.3 only
                    // Default value for a checkbox should be "on"
                    support.checkOn = input.value !== "";

                    // Support: IE <=11 only
                    // Must access selectedIndex to make default options select
                    support.optSelected = opt.selected;

                    // Support: IE <=11 only
                    // An input loses its value after becoming a radio
                    input = document.createElement("input");
                    input.value = "t";
                    input.type = "radio";
                    support.radioValue = input.value === "t";
                })();


                var boolHook,
                    attrHandle = jQuery.expr.attrHandle;

                jQuery.fn.extend({
                    attr: function (name, value) {
                        return access(this, jQuery.attr, name, value, arguments.length > 1);
                    },

                    removeAttr: function (name) {
                        return this.each(function () {
                            jQuery.removeAttr(this, name);
                        });
                    }
                });

                jQuery.extend({
                    attr: function (elem, name, value) {
                        var ret, hooks,
                            nType = elem.nodeType;

                        // Don't get/set attributes on text, comment and attribute nodes
                        if (nType === 3 || nType === 8 || nType === 2) {
                            return;
                        }

                        // Fallback to prop when attributes are not supported
                        if (typeof elem.getAttribute === "undefined") {
                            return jQuery.prop(elem, name, value);
                        }

                        // Attribute hooks are determined by the lowercase version
                        // Grab necessary hook if one is defined
                        if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                            hooks = jQuery.attrHooks[name.toLowerCase()] ||
                                (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
                        }

                        if (value !== undefined) {
                            if (value === null) {
                                jQuery.removeAttr(elem, name);
                                return;
                            }

                            if (hooks && "set" in hooks &&
                                (ret = hooks.set(elem, value, name)) !== undefined) {
                                return ret;
                            }

                            elem.setAttribute(name, value + "");
                            return value;
                        }

                        if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                            return ret;
                        }

                        ret = jQuery.find.attr(elem, name);

                        // Non-existent attributes return null, we normalize to undefined
                        return ret == null ? undefined : ret;
                    },

                    attrHooks: {
                        type: {
                            set: function (elem, value) {
                                if (!support.radioValue && value === "radio" &&
                                    nodeName(elem, "input")) {
                                    var val = elem.value;
                                    elem.setAttribute("type", value);
                                    if (val) {
                                        elem.value = val;
                                    }
                                    return value;
                                }
                            }
                        }
                    },

                    removeAttr: function (elem, value) {
                        var name,
                            i = 0,

                            // Attribute names can contain non-HTML whitespace characters
                            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                            attrNames = value && value.match(rnothtmlwhite);

                        if (attrNames && elem.nodeType === 1) {
                            while ((name = attrNames[i++])) {
                                elem.removeAttribute(name);
                            }
                        }
                    }
                });

// Hooks for boolean attributes
                boolHook = {
                    set: function (elem, value, name) {
                        if (value === false) {

                            // Remove boolean attributes when set to false
                            jQuery.removeAttr(elem, name);
                        } else {
                            elem.setAttribute(name, name);
                        }
                        return name;
                    }
                };

                jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
                    var getter = attrHandle[name] || jQuery.find.attr;

                    attrHandle[name] = function (elem, name, isXML) {
                        var ret, handle,
                            lowercaseName = name.toLowerCase();

                        if (!isXML) {

                            // Avoid an infinite loop by temporarily removing this function from the getter
                            handle = attrHandle[lowercaseName];
                            attrHandle[lowercaseName] = ret;
                            ret = getter(elem, name, isXML) != null ?
                                lowercaseName :
                                null;
                            attrHandle[lowercaseName] = handle;
                        }
                        return ret;
                    };
                });


                var rfocusable = /^(?:input|select|textarea|button)$/i,
                    rclickable = /^(?:a|area)$/i;

                jQuery.fn.extend({
                    prop: function (name, value) {
                        return access(this, jQuery.prop, name, value, arguments.length > 1);
                    },

                    removeProp: function (name) {
                        return this.each(function () {
                            delete this[jQuery.propFix[name] || name];
                        });
                    }
                });

                jQuery.extend({
                    prop: function (elem, name, value) {
                        var ret, hooks,
                            nType = elem.nodeType;

                        // Don't get/set properties on text, comment and attribute nodes
                        if (nType === 3 || nType === 8 || nType === 2) {
                            return;
                        }

                        if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

                            // Fix name and attach hooks
                            name = jQuery.propFix[name] || name;
                            hooks = jQuery.propHooks[name];
                        }

                        if (value !== undefined) {
                            if (hooks && "set" in hooks &&
                                (ret = hooks.set(elem, value, name)) !== undefined) {
                                return ret;
                            }

                            return (elem[name] = value);
                        }

                        if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                            return ret;
                        }

                        return elem[name];
                    },

                    propHooks: {
                        tabIndex: {
                            get: function (elem) {

                                // Support: IE <=9 - 11 only
                                // elem.tabIndex doesn't always return the
                                // correct value when it hasn't been explicitly set
                                // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                                // Use proper attribute retrieval(#12072)
                                var tabindex = jQuery.find.attr(elem, "tabindex");

                                if (tabindex) {
                                    return parseInt(tabindex, 10);
                                }

                                if (
                                    rfocusable.test(elem.nodeName) ||
                                    rclickable.test(elem.nodeName) &&
                                    elem.href
                                ) {
                                    return 0;
                                }

                                return -1;
                            }
                        }
                    },

                    propFix: {
                        "for": "htmlFor",
                        "class": "className"
                    }
                });

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
                if (!support.optSelected) {
                    jQuery.propHooks.selected = {
                        get: function (elem) {

                            /* eslint no-unused-expressions: "off" */

                            var parent = elem.parentNode;
                            if (parent && parent.parentNode) {
                                parent.parentNode.selectedIndex;
                            }
                            return null;
                        },
                        set: function (elem) {

                            /* eslint no-unused-expressions: "off" */

                            var parent = elem.parentNode;
                            if (parent) {
                                parent.selectedIndex;

                                if (parent.parentNode) {
                                    parent.parentNode.selectedIndex;
                                }
                            }
                        }
                    };
                }

                jQuery.each([
                    "tabIndex",
                    "readOnly",
                    "maxLength",
                    "cellSpacing",
                    "cellPadding",
                    "rowSpan",
                    "colSpan",
                    "useMap",
                    "frameBorder",
                    "contentEditable"
                ], function () {
                    jQuery.propFix[this.toLowerCase()] = this;
                });


                // Strip and collapse whitespace according to HTML spec
                // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
                function stripAndCollapse(value) {
                    var tokens = value.match(rnothtmlwhite) || [];
                    return tokens.join(" ");
                }


                function getClass(elem) {
                    return elem.getAttribute && elem.getAttribute("class") || "";
                }

                function classesToArray(value) {
                    if (Array.isArray(value)) {
                        return value;
                    }
                    if (typeof value === "string") {
                        return value.match(rnothtmlwhite) || [];
                    }
                    return [];
                }

                jQuery.fn.extend({
                    addClass: function (value) {
                        var classes, elem, cur, curValue, clazz, j, finalValue,
                            i = 0;

                        if (isFunction(value)) {
                            return this.each(function (j) {
                                jQuery(this).addClass(value.call(this, j, getClass(this)));
                            });
                        }

                        classes = classesToArray(value);

                        if (classes.length) {
                            while ((elem = this[i++])) {
                                curValue = getClass(elem);
                                cur = elem.nodeType === 1 && (" " + stripAndCollapse(curValue) + " ");

                                if (cur) {
                                    j = 0;
                                    while ((clazz = classes[j++])) {
                                        if (cur.indexOf(" " + clazz + " ") < 0) {
                                            cur += clazz + " ";
                                        }
                                    }

                                    // Only assign if different to avoid unneeded rendering.
                                    finalValue = stripAndCollapse(cur);
                                    if (curValue !== finalValue) {
                                        elem.setAttribute("class", finalValue);
                                    }
                                }
                            }
                        }

                        return this;
                    },

                    removeClass: function (value) {
                        var classes, elem, cur, curValue, clazz, j, finalValue,
                            i = 0;

                        if (isFunction(value)) {
                            return this.each(function (j) {
                                jQuery(this).removeClass(value.call(this, j, getClass(this)));
                            });
                        }

                        if (!arguments.length) {
                            return this.attr("class", "");
                        }

                        classes = classesToArray(value);

                        if (classes.length) {
                            while ((elem = this[i++])) {
                                curValue = getClass(elem);

                                // This expression is here for better compressibility (see addClass)
                                cur = elem.nodeType === 1 && (" " + stripAndCollapse(curValue) + " ");

                                if (cur) {
                                    j = 0;
                                    while ((clazz = classes[j++])) {

                                        // Remove *all* instances
                                        while (cur.indexOf(" " + clazz + " ") > -1) {
                                            cur = cur.replace(" " + clazz + " ", " ");
                                        }
                                    }

                                    // Only assign if different to avoid unneeded rendering.
                                    finalValue = stripAndCollapse(cur);
                                    if (curValue !== finalValue) {
                                        elem.setAttribute("class", finalValue);
                                    }
                                }
                            }
                        }

                        return this;
                    },

                    toggleClass: function (value, stateVal) {
                        var type = typeof value,
                            isValidValue = type === "string" || Array.isArray(value);

                        if (typeof stateVal === "boolean" && isValidValue) {
                            return stateVal ? this.addClass(value) : this.removeClass(value);
                        }

                        if (isFunction(value)) {
                            return this.each(function (i) {
                                jQuery(this).toggleClass(
                                    value.call(this, i, getClass(this), stateVal),
                                    stateVal
                                );
                            });
                        }

                        return this.each(function () {
                            var className, i, self, classNames;

                            if (isValidValue) {

                                // Toggle individual class names
                                i = 0;
                                self = jQuery(this);
                                classNames = classesToArray(value);

                                while ((className = classNames[i++])) {

                                    // Check each className given, space separated list
                                    if (self.hasClass(className)) {
                                        self.removeClass(className);
                                    } else {
                                        self.addClass(className);
                                    }
                                }

                                // Toggle whole class name
                            } else if (value === undefined || type === "boolean") {
                                className = getClass(this);
                                if (className) {

                                    // Store className if set
                                    dataPriv.set(this, "__className__", className);
                                }

                                // If the element has a class name or if we're passed `false`,
                                // then remove the whole classname (if there was one, the above saved it).
                                // Otherwise bring back whatever was previously saved (if anything),
                                // falling back to the empty string if nothing was stored.
                                if (this.setAttribute) {
                                    this.setAttribute("class",
                                        className || value === false ?
                                            "" :
                                            dataPriv.get(this, "__className__") || ""
                                    );
                                }
                            }
                        });
                    },

                    hasClass: function (selector) {
                        var className, elem,
                            i = 0;

                        className = " " + selector + " ";
                        while ((elem = this[i++])) {
                            if (elem.nodeType === 1 &&
                                (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                                return true;
                            }
                        }

                        return false;
                    }
                });


                var rreturn = /\r/g;

                jQuery.fn.extend({
                    val: function (value) {
                        var hooks, ret, valueIsFunction,
                            elem = this[0];

                        if (!arguments.length) {
                            if (elem) {
                                hooks = jQuery.valHooks[elem.type] ||
                                    jQuery.valHooks[elem.nodeName.toLowerCase()];

                                if (hooks &&
                                    "get" in hooks &&
                                    (ret = hooks.get(elem, "value")) !== undefined
                                ) {
                                    return ret;
                                }

                                ret = elem.value;

                                // Handle most common string cases
                                if (typeof ret === "string") {
                                    return ret.replace(rreturn, "");
                                }

                                // Handle cases where value is null/undef or number
                                return ret == null ? "" : ret;
                            }

                            return;
                        }

                        valueIsFunction = isFunction(value);

                        return this.each(function (i) {
                            var val;

                            if (this.nodeType !== 1) {
                                return;
                            }

                            if (valueIsFunction) {
                                val = value.call(this, i, jQuery(this).val());
                            } else {
                                val = value;
                            }

                            // Treat null/undefined as ""; convert numbers to string
                            if (val == null) {
                                val = "";

                            } else if (typeof val === "number") {
                                val += "";

                            } else if (Array.isArray(val)) {
                                val = jQuery.map(val, function (value) {
                                    return value == null ? "" : value + "";
                                });
                            }

                            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                            // If set returns undefined, fall back to normal setting
                            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                                this.value = val;
                            }
                        });
                    }
                });

                jQuery.extend({
                    valHooks: {
                        option: {
                            get: function (elem) {

                                var val = jQuery.find.attr(elem, "value");
                                return val != null ?
                                    val :

                                    // Support: IE <=10 - 11 only
                                    // option.text throws exceptions (#14686, #14858)
                                    // Strip and collapse whitespace
                                    // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                                    stripAndCollapse(jQuery.text(elem));
                            }
                        },
                        select: {
                            get: function (elem) {
                                var value, option, i,
                                    options = elem.options,
                                    index = elem.selectedIndex,
                                    one = elem.type === "select-one",
                                    values = one ? null : [],
                                    max = one ? index + 1 : options.length;

                                if (index < 0) {
                                    i = max;

                                } else {
                                    i = one ? index : 0;
                                }

                                // Loop through all the selected options
                                for (; i < max; i++) {
                                    option = options[i];

                                    // Support: IE <=9 only
                                    // IE8-9 doesn't update selected after form reset (#2551)
                                    if ((option.selected || i === index) &&

                                        // Don't return options that are disabled or in a disabled optgroup
                                        !option.disabled &&
                                        (!option.parentNode.disabled ||
                                            !nodeName(option.parentNode, "optgroup"))) {

                                        // Get the specific value for the option
                                        value = jQuery(option).val();

                                        // We don't need an array for one selects
                                        if (one) {
                                            return value;
                                        }

                                        // Multi-Selects return an array
                                        values.push(value);
                                    }
                                }

                                return values;
                            },

                            set: function (elem, value) {
                                var optionSet, option,
                                    options = elem.options,
                                    values = jQuery.makeArray(value),
                                    i = options.length;

                                while (i--) {
                                    option = options[i];

                                    /* eslint-disable no-cond-assign */

                                    if (option.selected =
                                        jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1
                                    ) {
                                        optionSet = true;
                                    }

                                    /* eslint-enable no-cond-assign */
                                }

                                // Force browsers to behave consistently when non-matching value is set
                                if (!optionSet) {
                                    elem.selectedIndex = -1;
                                }
                                return values;
                            }
                        }
                    }
                });

// Radios and checkboxes getter/setter
                jQuery.each(["radio", "checkbox"], function () {
                    jQuery.valHooks[this] = {
                        set: function (elem, value) {
                            if (Array.isArray(value)) {
                                return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1);
                            }
                        }
                    };
                    if (!support.checkOn) {
                        jQuery.valHooks[this].get = function (elem) {
                            return elem.getAttribute("value") === null ? "on" : elem.value;
                        };
                    }
                });


// Return jQuery for attributes-only inclusion


                support.focusin = "onfocusin" in window;


                var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
                    stopPropagationCallback = function (e) {
                        e.stopPropagation();
                    };

                jQuery.extend(jQuery.event, {

                    trigger: function (event, data, elem, onlyHandlers) {

                        var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
                            eventPath = [elem || document],
                            type = hasOwn.call(event, "type") ? event.type : event,
                            namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

                        cur = lastElement = tmp = elem = elem || document;

                        // Don't do events on text and comment nodes
                        if (elem.nodeType === 3 || elem.nodeType === 8) {
                            return;
                        }

                        // focus/blur morphs to focusin/out; ensure we're not firing them right now
                        if (rfocusMorph.test(type + jQuery.event.triggered)) {
                            return;
                        }

                        if (type.indexOf(".") > -1) {

                            // Namespaced trigger; create a regexp to match event type in handle()
                            namespaces = type.split(".");
                            type = namespaces.shift();
                            namespaces.sort();
                        }
                        ontype = type.indexOf(":") < 0 && "on" + type;

                        // Caller can pass in a jQuery.Event object, Object, or just an event type string
                        event = event[jQuery.expando] ?
                            event :
                            new jQuery.Event(type, typeof event === "object" && event);

                        // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
                        event.isTrigger = onlyHandlers ? 2 : 3;
                        event.namespace = namespaces.join(".");
                        event.rnamespace = event.namespace ?
                            new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                            null;

                        // Clean up the event in case it is being reused
                        event.result = undefined;
                        if (!event.target) {
                            event.target = elem;
                        }

                        // Clone any incoming data and prepend the event, creating the handler arg list
                        data = data == null ?
                            [event] :
                            jQuery.makeArray(data, [event]);

                        // Allow special events to draw outside the lines
                        special = jQuery.event.special[type] || {};
                        if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                            return;
                        }

                        // Determine event propagation path in advance, per W3C events spec (#9951)
                        // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
                        if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {

                            bubbleType = special.delegateType || type;
                            if (!rfocusMorph.test(bubbleType + type)) {
                                cur = cur.parentNode;
                            }
                            for (; cur; cur = cur.parentNode) {
                                eventPath.push(cur);
                                tmp = cur;
                            }

                            // Only add window if we got to document (e.g., not plain obj or detached DOM)
                            if (tmp === (elem.ownerDocument || document)) {
                                eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                            }
                        }

                        // Fire handlers on the event path
                        i = 0;
                        while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                            lastElement = cur;
                            event.type = i > 1 ?
                                bubbleType :
                                special.bindType || type;

                            // jQuery handler
                            handle = (dataPriv.get(cur, "events") || {})[event.type] &&
                                dataPriv.get(cur, "handle");
                            if (handle) {
                                handle.apply(cur, data);
                            }

                            // Native handler
                            handle = ontype && cur[ontype];
                            if (handle && handle.apply && acceptData(cur)) {
                                event.result = handle.apply(cur, data);
                                if (event.result === false) {
                                    event.preventDefault();
                                }
                            }
                        }
                        event.type = type;

                        // If nobody prevented the default action, do it now
                        if (!onlyHandlers && !event.isDefaultPrevented()) {

                            if ((!special._default ||
                                special._default.apply(eventPath.pop(), data) === false) &&
                                acceptData(elem)) {

                                // Call a native DOM method on the target with the same name as the event.
                                // Don't do default actions on window, that's where global variables be (#6170)
                                if (ontype && isFunction(elem[type]) && !isWindow(elem)) {

                                    // Don't re-trigger an onFOO event when we call its FOO() method
                                    tmp = elem[ontype];

                                    if (tmp) {
                                        elem[ontype] = null;
                                    }

                                    // Prevent re-triggering of the same event, since we already bubbled it above
                                    jQuery.event.triggered = type;

                                    if (event.isPropagationStopped()) {
                                        lastElement.addEventListener(type, stopPropagationCallback);
                                    }

                                    elem[type]();

                                    if (event.isPropagationStopped()) {
                                        lastElement.removeEventListener(type, stopPropagationCallback);
                                    }

                                    jQuery.event.triggered = undefined;

                                    if (tmp) {
                                        elem[ontype] = tmp;
                                    }
                                }
                            }
                        }

                        return event.result;
                    },

                    // Piggyback on a donor event to simulate a different one
                    // Used only for `focus(in | out)` events
                    simulate: function (type, elem, event) {
                        var e = jQuery.extend(
                            new jQuery.Event(),
                            event,
                            {
                                type: type,
                                isSimulated: true
                            }
                        );

                        jQuery.event.trigger(e, null, elem);
                    }

                });

                jQuery.fn.extend({

                    trigger: function (type, data) {
                        return this.each(function () {
                            jQuery.event.trigger(type, data, this);
                        });
                    },
                    triggerHandler: function (type, data) {
                        var elem = this[0];
                        if (elem) {
                            return jQuery.event.trigger(type, data, elem, true);
                        }
                    }
                });


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
                if (!support.focusin) {
                    jQuery.each({focus: "focusin", blur: "focusout"}, function (orig, fix) {

                        // Attach a single capturing handler on the document while someone wants focusin/focusout
                        var handler = function (event) {
                            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
                        };

                        jQuery.event.special[fix] = {
                            setup: function () {
                                var doc = this.ownerDocument || this,
                                    attaches = dataPriv.access(doc, fix);

                                if (!attaches) {
                                    doc.addEventListener(orig, handler, true);
                                }
                                dataPriv.access(doc, fix, (attaches || 0) + 1);
                            },
                            teardown: function () {
                                var doc = this.ownerDocument || this,
                                    attaches = dataPriv.access(doc, fix) - 1;

                                if (!attaches) {
                                    doc.removeEventListener(orig, handler, true);
                                    dataPriv.remove(doc, fix);

                                } else {
                                    dataPriv.access(doc, fix, attaches);
                                }
                            }
                        };
                    });
                }
                var location = window.location;

                var nonce = Date.now();

                var rquery = (/\?/);


// Cross-browser xml parsing
                jQuery.parseXML = function (data) {
                    var xml;
                    if (!data || typeof data !== "string") {
                        return null;
                    }

                    // Support: IE 9 - 11 only
                    // IE throws on parseFromString with invalid input.
                    try {
                        xml = (new window.DOMParser()).parseFromString(data, "text/xml");
                    } catch (e) {
                        xml = undefined;
                    }

                    if (!xml || xml.getElementsByTagName("parsererror").length) {
                        jQuery.error("Invalid XML: " + data);
                    }
                    return xml;
                };


                var
                    rbracket = /\[\]$/,
                    rCRLF = /\r?\n/g,
                    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
                    rsubmittable = /^(?:input|select|textarea|keygen)/i;

                function buildParams(prefix, obj, traditional, add) {
                    var name;

                    if (Array.isArray(obj)) {

                        // Serialize array item.
                        jQuery.each(obj, function (i, v) {
                            if (traditional || rbracket.test(prefix)) {

                                // Treat each array item as a scalar.
                                add(prefix, v);

                            } else {

                                // Item is non-scalar (array or object), encode its numeric index.
                                buildParams(
                                    prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                                    v,
                                    traditional,
                                    add
                                );
                            }
                        });

                    } else if (!traditional && toType(obj) === "object") {

                        // Serialize object item.
                        for (name in obj) {
                            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
                        }

                    } else {

                        // Serialize scalar item.
                        add(prefix, obj);
                    }
                }

// Serialize an array of form elements or a set of
// key/values into a query string
                jQuery.param = function (a, traditional) {
                    var prefix,
                        s = [],
                        add = function (key, valueOrFunction) {

                            // If value is a function, invoke it and use its return value
                            var value = isFunction(valueOrFunction) ?
                                valueOrFunction() :
                                valueOrFunction;

                            s[s.length] = encodeURIComponent(key) + "=" +
                                encodeURIComponent(value == null ? "" : value);
                        };

                    // If an array was passed in, assume that it is an array of form elements.
                    if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {

                        // Serialize the form elements
                        jQuery.each(a, function () {
                            add(this.name, this.value);
                        });

                    } else {

                        // If traditional, encode the "old" way (the way 1.3.2 or older
                        // did it), otherwise encode params recursively.
                        for (prefix in a) {
                            buildParams(prefix, a[prefix], traditional, add);
                        }
                    }

                    // Return the resulting serialization
                    return s.join("&");
                };

                jQuery.fn.extend({
                    serialize: function () {
                        return jQuery.param(this.serializeArray());
                    },
                    serializeArray: function () {
                        return this.map(function () {

                            // Can add propHook for "elements" to filter or add form elements
                            var elements = jQuery.prop(this, "elements");
                            return elements ? jQuery.makeArray(elements) : this;
                        })
                            .filter(function () {
                                var type = this.type;

                                // Use .is( ":disabled" ) so that fieldset[disabled] works
                                return this.name && !jQuery(this).is(":disabled") &&
                                    rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
                                    (this.checked || !rcheckableType.test(type));
                            })
                            .map(function (i, elem) {
                                var val = jQuery(this).val();

                                if (val == null) {
                                    return null;
                                }

                                if (Array.isArray(val)) {
                                    return jQuery.map(val, function (val) {
                                        return {name: elem.name, value: val.replace(rCRLF, "\r\n")};
                                    });
                                }

                                return {name: elem.name, value: val.replace(rCRLF, "\r\n")};
                            }).get();
                    }
                });


                var
                    r20 = /%20/g,
                    rhash = /#.*$/,
                    rantiCache = /([?&])_=[^&]*/,
                    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

                    // #7653, #8125, #8152: local protocol detection
                    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
                    rnoContent = /^(?:GET|HEAD)$/,
                    rprotocol = /^\/\//,

                    /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
                    prefilters = {},

                    /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
                    transports = {},

                    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
                    allTypes = "*/".concat("*"),

                    // Anchor tag for parsing the document origin
                    originAnchor = document.createElement("a");
                originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
                function addToPrefiltersOrTransports(structure) {

                    // dataTypeExpression is optional and defaults to "*"
                    return function (dataTypeExpression, func) {

                        if (typeof dataTypeExpression !== "string") {
                            func = dataTypeExpression;
                            dataTypeExpression = "*";
                        }

                        var dataType,
                            i = 0,
                            dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

                        if (isFunction(func)) {

                            // For each dataType in the dataTypeExpression
                            while ((dataType = dataTypes[i++])) {

                                // Prepend if requested
                                if (dataType[0] === "+") {
                                    dataType = dataType.slice(1) || "*";
                                    (structure[dataType] = structure[dataType] || []).unshift(func);

                                    // Otherwise append
                                } else {
                                    (structure[dataType] = structure[dataType] || []).push(func);
                                }
                            }
                        }
                    };
                }

// Base inspection function for prefilters and transports
                function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

                    var inspected = {},
                        seekingTransport = (structure === transports);

                    function inspect(dataType) {
                        var selected;
                        inspected[dataType] = true;
                        jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                            if (typeof dataTypeOrTransport === "string" &&
                                !seekingTransport && !inspected[dataTypeOrTransport]) {

                                options.dataTypes.unshift(dataTypeOrTransport);
                                inspect(dataTypeOrTransport);
                                return false;
                            } else if (seekingTransport) {
                                return !(selected = dataTypeOrTransport);
                            }
                        });
                        return selected;
                    }

                    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
                }

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
                function ajaxExtend(target, src) {
                    var key, deep,
                        flatOptions = jQuery.ajaxSettings.flatOptions || {};

                    for (key in src) {
                        if (src[key] !== undefined) {
                            (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
                        }
                    }
                    if (deep) {
                        jQuery.extend(true, target, deep);
                    }

                    return target;
                }

                /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
                function ajaxHandleResponses(s, jqXHR, responses) {

                    var ct, type, finalDataType, firstDataType,
                        contents = s.contents,
                        dataTypes = s.dataTypes;

                    // Remove auto dataType and get content-type in the process
                    while (dataTypes[0] === "*") {
                        dataTypes.shift();
                        if (ct === undefined) {
                            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
                        }
                    }

                    // Check if we're dealing with a known content-type
                    if (ct) {
                        for (type in contents) {
                            if (contents[type] && contents[type].test(ct)) {
                                dataTypes.unshift(type);
                                break;
                            }
                        }
                    }

                    // Check to see if we have a response for the expected dataType
                    if (dataTypes[0] in responses) {
                        finalDataType = dataTypes[0];
                    } else {

                        // Try convertible dataTypes
                        for (type in responses) {
                            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                                finalDataType = type;
                                break;
                            }
                            if (!firstDataType) {
                                firstDataType = type;
                            }
                        }

                        // Or just use first one
                        finalDataType = finalDataType || firstDataType;
                    }

                    // If we found a dataType
                    // We add the dataType to the list if needed
                    // and return the corresponding response
                    if (finalDataType) {
                        if (finalDataType !== dataTypes[0]) {
                            dataTypes.unshift(finalDataType);
                        }
                        return responses[finalDataType];
                    }
                }

                /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
                function ajaxConvert(s, response, jqXHR, isSuccess) {
                    var conv2, current, conv, tmp, prev,
                        converters = {},

                        // Work with a copy of dataTypes in case we need to modify it for conversion
                        dataTypes = s.dataTypes.slice();

                    // Create converters map with lowercased keys
                    if (dataTypes[1]) {
                        for (conv in s.converters) {
                            converters[conv.toLowerCase()] = s.converters[conv];
                        }
                    }

                    current = dataTypes.shift();

                    // Convert to each sequential dataType
                    while (current) {

                        if (s.responseFields[current]) {
                            jqXHR[s.responseFields[current]] = response;
                        }

                        // Apply the dataFilter if provided
                        if (!prev && isSuccess && s.dataFilter) {
                            response = s.dataFilter(response, s.dataType);
                        }

                        prev = current;
                        current = dataTypes.shift();

                        if (current) {

                            // There's only work to do if current dataType is non-auto
                            if (current === "*") {

                                current = prev;

                                // Convert response if prev dataType is non-auto and differs from current
                            } else if (prev !== "*" && prev !== current) {

                                // Seek a direct converter
                                conv = converters[prev + " " + current] || converters["* " + current];

                                // If none found, seek a pair
                                if (!conv) {
                                    for (conv2 in converters) {

                                        // If conv2 outputs current
                                        tmp = conv2.split(" ");
                                        if (tmp[1] === current) {

                                            // If prev can be converted to accepted input
                                            conv = converters[prev + " " + tmp[0]] ||
                                                converters["* " + tmp[0]];
                                            if (conv) {

                                                // Condense equivalence converters
                                                if (conv === true) {
                                                    conv = converters[conv2];

                                                    // Otherwise, insert the intermediate dataType
                                                } else if (converters[conv2] !== true) {
                                                    current = tmp[0];
                                                    dataTypes.unshift(tmp[1]);
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }

                                // Apply converter (if not an equivalence)
                                if (conv !== true) {

                                    // Unless errors are allowed to bubble, catch and return them
                                    if (conv && s.throws) {
                                        response = conv(response);
                                    } else {
                                        try {
                                            response = conv(response);
                                        } catch (e) {
                                            return {
                                                state: "parsererror",
                                                error: conv ? e : "No conversion from " + prev + " to " + current
                                            };
                                        }
                                    }
                                }
                            }
                        }
                    }

                    return {state: "success", data: response};
                }

                jQuery.extend({

                    // Counter for holding the number of active queries
                    active: 0,

                    // Last-Modified header cache for next request
                    lastModified: {},
                    etag: {},

                    ajaxSettings: {
                        url: location.href,
                        type: "GET",
                        isLocal: rlocalProtocol.test(location.protocol),
                        global: true,
                        processData: true,
                        async: true,
                        contentType: "application/x-www-form-urlencoded; charset=UTF-8",

                        /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

                        accepts: {
                            "*": allTypes,
                            text: "text/plain",
                            html: "text/html",
                            xml: "application/xml, text/xml",
                            json: "application/json, text/javascript"
                        },

                        contents: {
                            xml: /\bxml\b/,
                            html: /\bhtml/,
                            json: /\bjson\b/
                        },

                        responseFields: {
                            xml: "responseXML",
                            text: "responseText",
                            json: "responseJSON"
                        },

                        // Data converters
                        // Keys separate source (or catchall "*") and destination types with a single space
                        converters: {

                            // Convert anything to text
                            "* text": String,

                            // Text to html (true = no transformation)
                            "text html": true,

                            // Evaluate text as a json expression
                            "text json": JSON.parse,

                            // Parse text as xml
                            "text xml": jQuery.parseXML
                        },

                        // For options that shouldn't be deep extended:
                        // you can add your own custom options here if
                        // and when you create one that shouldn't be
                        // deep extended (see ajaxExtend)
                        flatOptions: {
                            url: true,
                            context: true
                        }
                    },

                    // Creates a full fledged settings object into target
                    // with both ajaxSettings and settings fields.
                    // If target is omitted, writes into ajaxSettings.
                    ajaxSetup: function (target, settings) {
                        return settings ?

                            // Building a settings object
                            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

                            // Extending ajaxSettings
                            ajaxExtend(jQuery.ajaxSettings, target);
                    },

                    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
                    ajaxTransport: addToPrefiltersOrTransports(transports),

                    // Main method
                    ajax: function (url, options) {

                        // If url is an object, simulate pre-1.5 signature
                        if (typeof url === "object") {
                            options = url;
                            url = undefined;
                        }

                        // Force options to be an object
                        options = options || {};

                        var transport,

                            // URL without anti-cache param
                            cacheURL,

                            // Response headers
                            responseHeadersString,
                            responseHeaders,

                            // timeout handle
                            timeoutTimer,

                            // Url cleanup var
                            urlAnchor,

                            // Request state (becomes false upon send and true upon completion)
                            completed,

                            // To know if global events are to be dispatched
                            fireGlobals,

                            // Loop variable
                            i,

                            // uncached part of the url
                            uncached,

                            // Create the final options object
                            s = jQuery.ajaxSetup({}, options),

                            // Callbacks context
                            callbackContext = s.context || s,

                            // Context for global events is callbackContext if it is a DOM node or jQuery collection
                            globalEventContext = s.context &&
                            (callbackContext.nodeType || callbackContext.jquery) ?
                                jQuery(callbackContext) :
                                jQuery.event,

                            // Deferreds
                            deferred = jQuery.Deferred(),
                            completeDeferred = jQuery.Callbacks("once memory"),

                            // Status-dependent callbacks
                            statusCode = s.statusCode || {},

                            // Headers (they are sent all at once)
                            requestHeaders = {},
                            requestHeadersNames = {},

                            // Default abort message
                            strAbort = "canceled",

                            // Fake xhr
                            jqXHR = {
                                readyState: 0,

                                // Builds headers hashtable if needed
                                getResponseHeader: function (key) {
                                    var match;
                                    if (completed) {
                                        if (!responseHeaders) {
                                            responseHeaders = {};
                                            while ((match = rheaders.exec(responseHeadersString))) {
                                                responseHeaders[match[1].toLowerCase()] = match[2];
                                            }
                                        }
                                        match = responseHeaders[key.toLowerCase()];
                                    }
                                    return match == null ? null : match;
                                },

                                // Raw string
                                getAllResponseHeaders: function () {
                                    return completed ? responseHeadersString : null;
                                },

                                // Caches the header
                                setRequestHeader: function (name, value) {
                                    if (completed == null) {
                                        name = requestHeadersNames[name.toLowerCase()] =
                                            requestHeadersNames[name.toLowerCase()] || name;
                                        requestHeaders[name] = value;
                                    }
                                    return this;
                                },

                                // Overrides response content-type header
                                overrideMimeType: function (type) {
                                    if (completed == null) {
                                        s.mimeType = type;
                                    }
                                    return this;
                                },

                                // Status-dependent callbacks
                                statusCode: function (map) {
                                    var code;
                                    if (map) {
                                        if (completed) {

                                            // Execute the appropriate callbacks
                                            jqXHR.always(map[jqXHR.status]);
                                        } else {

                                            // Lazy-add the new callbacks in a way that preserves old ones
                                            for (code in map) {
                                                statusCode[code] = [statusCode[code], map[code]];
                                            }
                                        }
                                    }
                                    return this;
                                },

                                // Cancel the request
                                abort: function (statusText) {
                                    var finalText = statusText || strAbort;
                                    if (transport) {
                                        transport.abort(finalText);
                                    }
                                    done(0, finalText);
                                    return this;
                                }
                            };

                        // Attach deferreds
                        deferred.promise(jqXHR);

                        // Add protocol if not provided (prefilters might expect it)
                        // Handle falsy url in the settings object (#10093: consistency with old signature)
                        // We also use the url parameter if available
                        s.url = ((url || s.url || location.href) + "")
                            .replace(rprotocol, location.protocol + "//");

                        // Alias method option to type as per ticket #12004
                        s.type = options.method || options.type || s.method || s.type;

                        // Extract dataTypes list
                        s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

                        // A cross-domain request is in order when the origin doesn't match the current origin.
                        if (s.crossDomain == null) {
                            urlAnchor = document.createElement("a");

                            // Support: IE <=8 - 11, Edge 12 - 15
                            // IE throws exception on accessing the href property if url is malformed,
                            // e.g. http://example.com:80x/
                            try {
                                urlAnchor.href = s.url;

                                // Support: IE <=8 - 11 only
                                // Anchor's host property isn't correctly set when s.url is relative
                                urlAnchor.href = urlAnchor.href;
                                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                                    urlAnchor.protocol + "//" + urlAnchor.host;
                            } catch (e) {

                                // If there is an error parsing the URL, assume it is crossDomain,
                                // it can be rejected by the transport if it is invalid
                                s.crossDomain = true;
                            }
                        }

                        // Convert data if not already a string
                        if (s.data && s.processData && typeof s.data !== "string") {
                            s.data = jQuery.param(s.data, s.traditional);
                        }

                        // Apply prefilters
                        inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

                        // If request was aborted inside a prefilter, stop there
                        if (completed) {
                            return jqXHR;
                        }

                        // We can fire global events as of now if asked to
                        // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
                        fireGlobals = jQuery.event && s.global;

                        // Watch for a new set of requests
                        if (fireGlobals && jQuery.active++ === 0) {
                            jQuery.event.trigger("ajaxStart");
                        }

                        // Uppercase the type
                        s.type = s.type.toUpperCase();

                        // Determine if request has content
                        s.hasContent = !rnoContent.test(s.type);

                        // Save the URL in case we're toying with the If-Modified-Since
                        // and/or If-None-Match header later on
                        // Remove hash to simplify url manipulation
                        cacheURL = s.url.replace(rhash, "");

                        // More options handling for requests with no content
                        if (!s.hasContent) {

                            // Remember the hash so we can put it back
                            uncached = s.url.slice(cacheURL.length);

                            // If data is available and should be processed, append data to url
                            if (s.data && (s.processData || typeof s.data === "string")) {
                                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                                // #9682: remove data so that it's not used in an eventual retry
                                delete s.data;
                            }

                            // Add or update anti-cache param if needed
                            if (s.cache === false) {
                                cacheURL = cacheURL.replace(rantiCache, "$1");
                                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + (nonce++) + uncached;
                            }

                            // Put hash and anti-cache on the URL that will be requested (gh-1732)
                            s.url = cacheURL + uncached;

                            // Change '%20' to '+' if this is encoded form body content (gh-2658)
                        } else if (s.data && s.processData &&
                            (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
                            s.data = s.data.replace(r20, "+");
                        }

                        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                        if (s.ifModified) {
                            if (jQuery.lastModified[cacheURL]) {
                                jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                            }
                            if (jQuery.etag[cacheURL]) {
                                jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                            }
                        }

                        // Set the correct header, if data is being sent
                        if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                            jqXHR.setRequestHeader("Content-Type", s.contentType);
                        }

                        // Set the Accepts header for the server, depending on the dataType
                        jqXHR.setRequestHeader(
                            "Accept",
                            s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                                s.accepts[s.dataTypes[0]] +
                                (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                                s.accepts["*"]
                        );

                        // Check for headers option
                        for (i in s.headers) {
                            jqXHR.setRequestHeader(i, s.headers[i]);
                        }

                        // Allow custom headers/mimetypes and early abort
                        if (s.beforeSend &&
                            (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

                            // Abort if not done already and return
                            return jqXHR.abort();
                        }

                        // Aborting is no longer a cancellation
                        strAbort = "abort";

                        // Install callbacks on deferreds
                        completeDeferred.add(s.complete);
                        jqXHR.done(s.success);
                        jqXHR.fail(s.error);

                        // Get transport
                        transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

                        // If no transport, we auto-abort
                        if (!transport) {
                            done(-1, "No Transport");
                        } else {
                            jqXHR.readyState = 1;

                            // Send global event
                            if (fireGlobals) {
                                globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                            }

                            // If request was aborted inside ajaxSend, stop there
                            if (completed) {
                                return jqXHR;
                            }

                            // Timeout
                            if (s.async && s.timeout > 0) {
                                timeoutTimer = window.setTimeout(function () {
                                    jqXHR.abort("timeout");
                                }, s.timeout);
                            }

                            try {
                                completed = false;
                                transport.send(requestHeaders, done);
                            } catch (e) {

                                // Rethrow post-completion exceptions
                                if (completed) {
                                    throw e;
                                }

                                // Propagate others as results
                                done(-1, e);
                            }
                        }

                        // Callback for when everything is done
                        function done(status, nativeStatusText, responses, headers) {
                            var isSuccess, success, error, response, modified,
                                statusText = nativeStatusText;

                            // Ignore repeat invocations
                            if (completed) {
                                return;
                            }

                            completed = true;

                            // Clear timeout if it exists
                            if (timeoutTimer) {
                                window.clearTimeout(timeoutTimer);
                            }

                            // Dereference transport for early garbage collection
                            // (no matter how long the jqXHR object will be used)
                            transport = undefined;

                            // Cache response headers
                            responseHeadersString = headers || "";

                            // Set readyState
                            jqXHR.readyState = status > 0 ? 4 : 0;

                            // Determine if successful
                            isSuccess = status >= 200 && status < 300 || status === 304;

                            // Get response data
                            if (responses) {
                                response = ajaxHandleResponses(s, jqXHR, responses);
                            }

                            // Convert no matter what (that way responseXXX fields are always set)
                            response = ajaxConvert(s, response, jqXHR, isSuccess);

                            // If successful, handle type chaining
                            if (isSuccess) {

                                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                                if (s.ifModified) {
                                    modified = jqXHR.getResponseHeader("Last-Modified");
                                    if (modified) {
                                        jQuery.lastModified[cacheURL] = modified;
                                    }
                                    modified = jqXHR.getResponseHeader("etag");
                                    if (modified) {
                                        jQuery.etag[cacheURL] = modified;
                                    }
                                }

                                // if no content
                                if (status === 204 || s.type === "HEAD") {
                                    statusText = "nocontent";

                                    // if not modified
                                } else if (status === 304) {
                                    statusText = "notmodified";

                                    // If we have data, let's convert it
                                } else {
                                    statusText = response.state;
                                    success = response.data;
                                    error = response.error;
                                    isSuccess = !error;
                                }
                            } else {

                                // Extract error from statusText and normalize for non-aborts
                                error = statusText;
                                if (status || !statusText) {
                                    statusText = "error";
                                    if (status < 0) {
                                        status = 0;
                                    }
                                }
                            }

                            // Set data for the fake xhr object
                            jqXHR.status = status;
                            jqXHR.statusText = (nativeStatusText || statusText) + "";

                            // Success/Error
                            if (isSuccess) {
                                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                            } else {
                                deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                            }

                            // Status-dependent callbacks
                            jqXHR.statusCode(statusCode);
                            statusCode = undefined;

                            if (fireGlobals) {
                                globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError",
                                    [jqXHR, s, isSuccess ? success : error]);
                            }

                            // Complete
                            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                            if (fireGlobals) {
                                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                                // Handle the global AJAX counter
                                if (!(--jQuery.active)) {
                                    jQuery.event.trigger("ajaxStop");
                                }
                            }
                        }

                        return jqXHR;
                    },

                    getJSON: function (url, data, callback) {
                        return jQuery.get(url, data, callback, "json");
                    },

                    getScript: function (url, callback) {
                        return jQuery.get(url, undefined, callback, "script");
                    }
                });

                jQuery.each(["get", "post"], function (i, method) {
                    jQuery[method] = function (url, data, callback, type) {

                        // Shift arguments if data argument was omitted
                        if (isFunction(data)) {
                            type = type || callback;
                            callback = data;
                            data = undefined;
                        }

                        // The url can be an options object (which then must have .url)
                        return jQuery.ajax(jQuery.extend({
                            url: url,
                            type: method,
                            dataType: type,
                            data: data,
                            success: callback
                        }, jQuery.isPlainObject(url) && url));
                    };
                });


                jQuery._evalUrl = function (url) {
                    return jQuery.ajax({
                        url: url,

                        // Make this explicit, since user can override this through ajaxSetup (#11264)
                        type: "GET",
                        dataType: "script",
                        cache: true,
                        async: false,
                        global: false,
                        "throws": true
                    });
                };


                jQuery.fn.extend({
                    wrapAll: function (html) {
                        var wrap;

                        if (this[0]) {
                            if (isFunction(html)) {
                                html = html.call(this[0]);
                            }

                            // The elements to wrap the target around
                            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                            if (this[0].parentNode) {
                                wrap.insertBefore(this[0]);
                            }

                            wrap.map(function () {
                                var elem = this;

                                while (elem.firstElementChild) {
                                    elem = elem.firstElementChild;
                                }

                                return elem;
                            }).append(this);
                        }

                        return this;
                    },

                    wrapInner: function (html) {
                        if (isFunction(html)) {
                            return this.each(function (i) {
                                jQuery(this).wrapInner(html.call(this, i));
                            });
                        }

                        return this.each(function () {
                            var self = jQuery(this),
                                contents = self.contents();

                            if (contents.length) {
                                contents.wrapAll(html);

                            } else {
                                self.append(html);
                            }
                        });
                    },

                    wrap: function (html) {
                        var htmlIsFunction = isFunction(html);

                        return this.each(function (i) {
                            jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
                        });
                    },

                    unwrap: function (selector) {
                        this.parent(selector).not("body").each(function () {
                            jQuery(this).replaceWith(this.childNodes);
                        });
                        return this;
                    }
                });


                jQuery.expr.pseudos.hidden = function (elem) {
                    return !jQuery.expr.pseudos.visible(elem);
                };
                jQuery.expr.pseudos.visible = function (elem) {
                    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
                };


                jQuery.ajaxSettings.xhr = function () {
                    try {
                        return new window.XMLHttpRequest();
                    } catch (e) {
                    }
                };

                var xhrSuccessStatus = {

                        // File protocol always yields status code 0, assume 200
                        0: 200,

                        // Support: IE <=9 only
                        // #1450: sometimes IE returns 1223 when it should be 204
                        1223: 204
                    },
                    xhrSupported = jQuery.ajaxSettings.xhr();

                support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
                support.ajax = xhrSupported = !!xhrSupported;

                jQuery.ajaxTransport(function (options) {
                    var callback, errorCallback;

                    // Cross domain only allowed if supported through XMLHttpRequest
                    if (support.cors || xhrSupported && !options.crossDomain) {
                        return {
                            send: function (headers, complete) {
                                var i,
                                    xhr = options.xhr();

                                xhr.open(
                                    options.type,
                                    options.url,
                                    options.async,
                                    options.username,
                                    options.password
                                );

                                // Apply custom fields if provided
                                if (options.xhrFields) {
                                    for (i in options.xhrFields) {
                                        xhr[i] = options.xhrFields[i];
                                    }
                                }

                                // Override mime type if needed
                                if (options.mimeType && xhr.overrideMimeType) {
                                    xhr.overrideMimeType(options.mimeType);
                                }

                                // X-Requested-With header
                                // For cross-domain requests, seeing as conditions for a preflight are
                                // akin to a jigsaw puzzle, we simply never set it to be sure.
                                // (it can always be set on a per-request basis or even using ajaxSetup)
                                // For same-domain requests, won't change header if already provided.
                                if (!options.crossDomain && !headers["X-Requested-With"]) {
                                    headers["X-Requested-With"] = "XMLHttpRequest";
                                }

                                // Set headers
                                for (i in headers) {
                                    xhr.setRequestHeader(i, headers[i]);
                                }

                                // Callback
                                callback = function (type) {
                                    return function () {
                                        if (callback) {
                                            callback = errorCallback = xhr.onload =
                                                xhr.onerror = xhr.onabort = xhr.ontimeout =
                                                    xhr.onreadystatechange = null;

                                            if (type === "abort") {
                                                xhr.abort();
                                            } else if (type === "error") {

                                                // Support: IE <=9 only
                                                // On a manual native abort, IE9 throws
                                                // errors on any property access that is not readyState
                                                if (typeof xhr.status !== "number") {
                                                    complete(0, "error");
                                                } else {
                                                    complete(
                                                        // File: protocol always yields status 0; see #8605, #14207
                                                        xhr.status,
                                                        xhr.statusText
                                                    );
                                                }
                                            } else {
                                                complete(
                                                    xhrSuccessStatus[xhr.status] || xhr.status,
                                                    xhr.statusText,

                                                    // Support: IE <=9 only
                                                    // IE9 has no XHR2 but throws on binary (trac-11426)
                                                    // For XHR2 non-text, let the caller handle it (gh-2498)
                                                    (xhr.responseType || "text") !== "text" ||
                                                    typeof xhr.responseText !== "string" ?
                                                        {binary: xhr.response} :
                                                        {text: xhr.responseText},
                                                    xhr.getAllResponseHeaders()
                                                );
                                            }
                                        }
                                    };
                                };

                                // Listen to events
                                xhr.onload = callback();
                                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");

                                // Support: IE 9 only
                                // Use onreadystatechange to replace onabort
                                // to handle uncaught aborts
                                if (xhr.onabort !== undefined) {
                                    xhr.onabort = errorCallback;
                                } else {
                                    xhr.onreadystatechange = function () {

                                        // Check readyState before timeout as it changes
                                        if (xhr.readyState === 4) {

                                            // Allow onerror to be called first,
                                            // but that will not handle a native abort
                                            // Also, save errorCallback to a variable
                                            // as xhr.onerror cannot be accessed
                                            window.setTimeout(function () {
                                                if (callback) {
                                                    errorCallback();
                                                }
                                            });
                                        }
                                    };
                                }

                                // Create the abort callback
                                callback = callback("abort");

                                try {

                                    // Do send the request (this may raise an exception)
                                    xhr.send(options.hasContent && options.data || null);
                                } catch (e) {

                                    // #14683: Only rethrow if this hasn't been notified as an error yet
                                    if (callback) {
                                        throw e;
                                    }
                                }
                            },

                            abort: function () {
                                if (callback) {
                                    callback();
                                }
                            }
                        };
                    }
                });


// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
                jQuery.ajaxPrefilter(function (s) {
                    if (s.crossDomain) {
                        s.contents.script = false;
                    }
                });

// Install script dataType
                jQuery.ajaxSetup({
                    accepts: {
                        script: "text/javascript, application/javascript, " +
                        "application/ecmascript, application/x-ecmascript"
                    },
                    contents: {
                        script: /\b(?:java|ecma)script\b/
                    },
                    converters: {
                        "text script": function (text) {
                            jQuery.globalEval(text);
                            return text;
                        }
                    }
                });

// Handle cache's special case and crossDomain
                jQuery.ajaxPrefilter("script", function (s) {
                    if (s.cache === undefined) {
                        s.cache = false;
                    }
                    if (s.crossDomain) {
                        s.type = "GET";
                    }
                });

// Bind script tag hack transport
                jQuery.ajaxTransport("script", function (s) {

                    // This transport only deals with cross domain requests
                    if (s.crossDomain) {
                        var script, callback;
                        return {
                            send: function (_, complete) {
                                script = jQuery("<script>").prop({
                                    charset: s.scriptCharset,
                                    src: s.url
                                }).on(
                                    "load error",
                                    callback = function (evt) {
                                        script.remove();
                                        callback = null;
                                        if (evt) {
                                            complete(evt.type === "error" ? 404 : 200, evt.type);
                                        }
                                    }
                                );

                                // Use native DOM manipulation to avoid our domManip AJAX trickery
                                document.head.appendChild(script[0]);
                            },
                            abort: function () {
                                if (callback) {
                                    callback();
                                }
                            }
                        };
                    }
                });


                var oldCallbacks = [],
                    rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
                jQuery.ajaxSetup({
                    jsonp: "callback",
                    jsonpCallback: function () {
                        var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
                        this[callback] = true;
                        return callback;
                    }
                });

// Detect, normalize options and install callbacks for jsonp requests
                jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

                    var callbackName, overwritten, responseContainer,
                        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
                                "url" :
                                typeof s.data === "string" &&
                                (s.contentType || "")
                                    .indexOf("application/x-www-form-urlencoded") === 0 &&
                                rjsonp.test(s.data) && "data"
                        );

                    // Handle iff the expected data type is "jsonp" or we have a parameter to set
                    if (jsonProp || s.dataTypes[0] === "jsonp") {

                        // Get callback name, remembering preexisting value associated with it
                        callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ?
                            s.jsonpCallback() :
                            s.jsonpCallback;

                        // Insert callback into url or form data
                        if (jsonProp) {
                            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
                        } else if (s.jsonp !== false) {
                            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
                        }

                        // Use data converter to retrieve json after script execution
                        s.converters["script json"] = function () {
                            if (!responseContainer) {
                                jQuery.error(callbackName + " was not called");
                            }
                            return responseContainer[0];
                        };

                        // Force json dataType
                        s.dataTypes[0] = "json";

                        // Install callback
                        overwritten = window[callbackName];
                        window[callbackName] = function () {
                            responseContainer = arguments;
                        };

                        // Clean-up function (fires after converters)
                        jqXHR.always(function () {

                            // If previous value didn't exist - remove it
                            if (overwritten === undefined) {
                                jQuery(window).removeProp(callbackName);

                                // Otherwise restore preexisting value
                            } else {
                                window[callbackName] = overwritten;
                            }

                            // Save back as free
                            if (s[callbackName]) {

                                // Make sure that re-using the options doesn't screw things around
                                s.jsonpCallback = originalSettings.jsonpCallback;

                                // Save the callback name for future use
                                oldCallbacks.push(callbackName);
                            }

                            // Call if it was a function and we have a response
                            if (responseContainer && isFunction(overwritten)) {
                                overwritten(responseContainer[0]);
                            }

                            responseContainer = overwritten = undefined;
                        });

                        // Delegate to script
                        return "script";
                    }
                });


// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
                support.createHTMLDocument = (function () {
                    var body = document.implementation.createHTMLDocument("").body;
                    body.innerHTML = "<form></form><form></form>";
                    return body.childNodes.length === 2;
                })();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
                jQuery.parseHTML = function (data, context, keepScripts) {
                    if (typeof data !== "string") {
                        return [];
                    }
                    if (typeof context === "boolean") {
                        keepScripts = context;
                        context = false;
                    }

                    var base, parsed, scripts;

                    if (!context) {

                        // Stop scripts or inline event handlers from being executed immediately
                        // by using document.implementation
                        if (support.createHTMLDocument) {
                            context = document.implementation.createHTMLDocument("");

                            // Set the base href for the created document
                            // so any parsed elements with URLs
                            // are based on the document's URL (gh-2965)
                            base = context.createElement("base");
                            base.href = document.location.href;
                            context.head.appendChild(base);
                        } else {
                            context = document;
                        }
                    }

                    parsed = rsingleTag.exec(data);
                    scripts = !keepScripts && [];

                    // Single tag
                    if (parsed) {
                        return [context.createElement(parsed[1])];
                    }

                    parsed = buildFragment([data], context, scripts);

                    if (scripts && scripts.length) {
                        jQuery(scripts).remove();
                    }

                    return jQuery.merge([], parsed.childNodes);
                };


                /**
                 * Load a url into a page
                 */
                jQuery.fn.load = function (url, params, callback) {
                    var selector, type, response,
                        self = this,
                        off = url.indexOf(" ");

                    if (off > -1) {
                        selector = stripAndCollapse(url.slice(off));
                        url = url.slice(0, off);
                    }

                    // If it's a function
                    if (isFunction(params)) {

                        // We assume that it's the callback
                        callback = params;
                        params = undefined;

                        // Otherwise, build a param string
                    } else if (params && typeof params === "object") {
                        type = "POST";
                    }

                    // If we have elements to modify, make the request
                    if (self.length > 0) {
                        jQuery.ajax({
                            url: url,

                            // If "type" variable is undefined, then "GET" method will be used.
                            // Make value of this field explicit since
                            // user can override it through ajaxSetup method
                            type: type || "GET",
                            dataType: "html",
                            data: params
                        }).done(function (responseText) {

                            // Save response for use in complete callback
                            response = arguments;

                            self.html(selector ?

                                // If a selector was specified, locate the right elements in a dummy div
                                // Exclude scripts to avoid IE 'Permission Denied' errors
                                jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

                                // Otherwise use the full result
                                responseText);

                            // If the request succeeds, this function gets "data", "status", "jqXHR"
                            // but they are ignored because response was set above.
                            // If it fails, this function gets "jqXHR", "status", "error"
                        }).always(callback && function (jqXHR, status) {
                            self.each(function () {
                                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
                            });
                        });
                    }

                    return this;
                };


// Attach a bunch of functions for handling common AJAX events
                jQuery.each([
                    "ajaxStart",
                    "ajaxStop",
                    "ajaxComplete",
                    "ajaxError",
                    "ajaxSuccess",
                    "ajaxSend"
                ], function (i, type) {
                    jQuery.fn[type] = function (fn) {
                        return this.on(type, fn);
                    };
                });


                jQuery.expr.pseudos.animated = function (elem) {
                    return jQuery.grep(jQuery.timers, function (fn) {
                        return elem === fn.elem;
                    }).length;
                };


                jQuery.offset = {
                    setOffset: function (elem, options, i) {
                        var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                            position = jQuery.css(elem, "position"),
                            curElem = jQuery(elem),
                            props = {};

                        // Set position first, in-case top/left are set even on static elem
                        if (position === "static") {
                            elem.style.position = "relative";
                        }

                        curOffset = curElem.offset();
                        curCSSTop = jQuery.css(elem, "top");
                        curCSSLeft = jQuery.css(elem, "left");
                        calculatePosition = (position === "absolute" || position === "fixed") &&
                            (curCSSTop + curCSSLeft).indexOf("auto") > -1;

                        // Need to be able to calculate position if either
                        // top or left is auto and position is either absolute or fixed
                        if (calculatePosition) {
                            curPosition = curElem.position();
                            curTop = curPosition.top;
                            curLeft = curPosition.left;

                        } else {
                            curTop = parseFloat(curCSSTop) || 0;
                            curLeft = parseFloat(curCSSLeft) || 0;
                        }

                        if (isFunction(options)) {

                            // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                            options = options.call(elem, i, jQuery.extend({}, curOffset));
                        }

                        if (options.top != null) {
                            props.top = (options.top - curOffset.top) + curTop;
                        }
                        if (options.left != null) {
                            props.left = (options.left - curOffset.left) + curLeft;
                        }

                        if ("using" in options) {
                            options.using.call(elem, props);

                        } else {
                            curElem.css(props);
                        }
                    }
                };

                jQuery.fn.extend({

                    // offset() relates an element's border box to the document origin
                    offset: function (options) {

                        // Preserve chaining for setter
                        if (arguments.length) {
                            return options === undefined ?
                                this :
                                this.each(function (i) {
                                    jQuery.offset.setOffset(this, options, i);
                                });
                        }

                        var rect, win,
                            elem = this[0];

                        if (!elem) {
                            return;
                        }

                        // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
                        // Support: IE <=11 only
                        // Running getBoundingClientRect on a
                        // disconnected node in IE throws an error
                        if (!elem.getClientRects().length) {
                            return {top: 0, left: 0};
                        }

                        // Get document-relative position by adding viewport scroll to viewport-relative gBCR
                        rect = elem.getBoundingClientRect();
                        win = elem.ownerDocument.defaultView;
                        return {
                            top: rect.top + win.pageYOffset,
                            left: rect.left + win.pageXOffset
                        };
                    },

                    // position() relates an element's margin box to its offset parent's padding box
                    // This corresponds to the behavior of CSS absolute positioning
                    position: function () {
                        if (!this[0]) {
                            return;
                        }

                        var offsetParent, offset, doc,
                            elem = this[0],
                            parentOffset = {top: 0, left: 0};

                        // position:fixed elements are offset from the viewport, which itself always has zero offset
                        if (jQuery.css(elem, "position") === "fixed") {

                            // Assume position:fixed implies availability of getBoundingClientRect
                            offset = elem.getBoundingClientRect();

                        } else {
                            offset = this.offset();

                            // Account for the *real* offset parent, which can be the document or its root element
                            // when a statically positioned element is identified
                            doc = elem.ownerDocument;
                            offsetParent = elem.offsetParent || doc.documentElement;
                            while (offsetParent &&
                            (offsetParent === doc.body || offsetParent === doc.documentElement) &&
                            jQuery.css(offsetParent, "position") === "static") {

                                offsetParent = offsetParent.parentNode;
                            }
                            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {

                                // Incorporate borders into its offset, since they are outside its content origin
                                parentOffset = jQuery(offsetParent).offset();
                                parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                                parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
                            }
                        }

                        // Subtract parent offsets and element margins
                        return {
                            top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                            left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
                        };
                    },

                    // This method will return documentElement in the following cases:
                    // 1) For the element inside the iframe without offsetParent, this method will return
                    //    documentElement of the parent window
                    // 2) For the hidden or detached element
                    // 3) For body or html element, i.e. in case of the html node - it will return itself
                    //
                    // but those exceptions were never presented as a real life use-cases
                    // and might be considered as more preferable results.
                    //
                    // This logic, however, is not guaranteed and can change at any point in the future
                    offsetParent: function () {
                        return this.map(function () {
                            var offsetParent = this.offsetParent;

                            while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                                offsetParent = offsetParent.offsetParent;
                            }

                            return offsetParent || documentElement;
                        });
                    }
                });

// Create scrollLeft and scrollTop methods
                jQuery.each({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function (method, prop) {
                    var top = "pageYOffset" === prop;

                    jQuery.fn[method] = function (val) {
                        return access(this, function (elem, method, val) {

                            // Coalesce documents and windows
                            var win;
                            if (isWindow(elem)) {
                                win = elem;
                            } else if (elem.nodeType === 9) {
                                win = elem.defaultView;
                            }

                            if (val === undefined) {
                                return win ? win[prop] : elem[method];
                            }

                            if (win) {
                                win.scrollTo(
                                    !top ? val : win.pageXOffset,
                                    top ? val : win.pageYOffset
                                );

                            } else {
                                elem[method] = val;
                            }
                        }, method, val, arguments.length);
                    };
                });

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
                jQuery.each(["top", "left"], function (i, prop) {
                    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
                        function (elem, computed) {
                            if (computed) {
                                computed = curCSS(elem, prop);

                                // If curCSS returns percentage, fallback to offset
                                return rnumnonpx.test(computed) ?
                                    jQuery(elem).position()[prop] + "px" :
                                    computed;
                            }
                        }
                    );
                });


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
                jQuery.each({Height: "height", Width: "width"}, function (name, type) {
                    jQuery.each({padding: "inner" + name, content: type, "": "outer" + name},
                        function (defaultExtra, funcName) {

                            // Margin is only for outerHeight, outerWidth
                            jQuery.fn[funcName] = function (margin, value) {
                                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                                    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

                                return access(this, function (elem, type, value) {
                                    var doc;

                                    if (isWindow(elem)) {

                                        // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                                        return funcName.indexOf("outer") === 0 ?
                                            elem["inner" + name] :
                                            elem.document.documentElement["client" + name];
                                    }

                                    // Get document width or height
                                    if (elem.nodeType === 9) {
                                        doc = elem.documentElement;

                                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                                        // whichever is greatest
                                        return Math.max(
                                            elem.body["scroll" + name], doc["scroll" + name],
                                            elem.body["offset" + name], doc["offset" + name],
                                            doc["client" + name]
                                        );
                                    }

                                    return value === undefined ?

                                        // Get width or height on the element, requesting but not forcing parseFloat
                                        jQuery.css(elem, type, extra) :

                                        // Set width or height on the element
                                        jQuery.style(elem, type, value, extra);
                                }, type, chainable ? margin : undefined, chainable);
                            };
                        });
                });


                jQuery.each(("blur focus focusin focusout resize scroll click dblclick " +
                    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
                    "change select submit keydown keypress keyup contextmenu").split(" "),
                    function (i, name) {

                        // Handle event binding
                        jQuery.fn[name] = function (data, fn) {
                            return arguments.length > 0 ?
                                this.on(name, null, data, fn) :
                                this.trigger(name);
                        };
                    });

                jQuery.fn.extend({
                    hover: function (fnOver, fnOut) {
                        return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
                    }
                });


                jQuery.fn.extend({

                    bind: function (types, data, fn) {
                        return this.on(types, null, data, fn);
                    },
                    unbind: function (types, fn) {
                        return this.off(types, null, fn);
                    },

                    delegate: function (selector, types, data, fn) {
                        return this.on(types, selector, data, fn);
                    },
                    undelegate: function (selector, types, fn) {

                        // ( namespace ) or ( selector, types [, fn] )
                        return arguments.length === 1 ?
                            this.off(selector, "**") :
                            this.off(types, selector || "**", fn);
                    }
                });

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
                jQuery.proxy = function (fn, context) {
                    var tmp, args, proxy;

                    if (typeof context === "string") {
                        tmp = fn[context];
                        context = fn;
                        fn = tmp;
                    }

                    // Quick check to determine if target is callable, in the spec
                    // this throws a TypeError, but we will just return undefined.
                    if (!isFunction(fn)) {
                        return undefined;
                    }

                    // Simulated bind
                    args = slice.call(arguments, 2);
                    proxy = function () {
                        return fn.apply(context || this, args.concat(slice.call(arguments)));
                    };

                    // Set the guid of unique handler to the same of original handler, so it can be removed
                    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

                    return proxy;
                };

                jQuery.holdReady = function (hold) {
                    if (hold) {
                        jQuery.readyWait++;
                    } else {
                        jQuery.ready(true);
                    }
                };
                jQuery.isArray = Array.isArray;
                jQuery.parseJSON = JSON.parse;
                jQuery.nodeName = nodeName;
                jQuery.isFunction = isFunction;
                jQuery.isWindow = isWindow;
                jQuery.camelCase = camelCase;
                jQuery.type = toType;

                jQuery.now = Date.now;

                jQuery.isNumeric = function (obj) {

                    // As of jQuery 3.0, isNumeric is limited to
                    // strings and numbers (primitives or objects)
                    // that can be coerced to finite numbers (gh-2662)
                    var type = jQuery.type(obj);
                    return (type === "number" || type === "string") &&

                        // parseFloat NaNs numeric-cast false positives ("")
                        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
                        // subtraction forces infinities to NaN
                        !isNaN(obj - parseFloat(obj));
                };


// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

                if (typeof define === "function" && define.amd) {
                    define("jquery", [], function () {
                        return jQuery;
                    });
                }


                var

                    // Map over jQuery in case of overwrite
                    _jQuery = window.jQuery,

                    // Map over the $ in case of overwrite
                    _$ = window.$;

                jQuery.noConflict = function (deep) {
                    if (window.$ === jQuery) {
                        window.$ = _$;
                    }

                    if (deep && window.jQuery === jQuery) {
                        window.jQuery = _jQuery;
                    }

                    return jQuery;
                };

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
                if (!noGlobal) {
                    window.jQuery = window.$ = jQuery;
                }


                return jQuery;
            });

        }, {}],
        10: [function (require, module, exports) {
            module.exports = {
                "version": "2018e",
                "zones": [
                    "Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5",
                    "Africa/Accra|LMT GMT +0020|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5",
                    "Africa/Nairobi|LMT EAT +0230 +0245|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5",
                    "Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5",
                    "Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6",
                    "Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldX0 2xoo0|39e4",
                    "Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5",
                    "Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6",
                    "Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|0121212121212121213121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|32e5",
                    "Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3",
                    "Africa/El_Aaiun|LMT -01 WET WEST|Q.M 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|20e4",
                    "Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5",
                    "Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|01212121212121212121212121212121213|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0",
                    "Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5",
                    "Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5",
                    "Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5",
                    "Africa/Sao_Tome|LMT GMT WAT|A.J 0 -10|012|-2le00 4i6N0",
                    "Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5",
                    "Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5",
                    "Africa/Windhoek|+0130 SAST SAST CAT WAT|-1u -20 -30 -20 -10|01213434343434343434343434343434343434343434343434343|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4",
                    "America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326",
                    "America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4",
                    "America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3",
                    "America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4",
                    "America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0",
                    "America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0",
                    "America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0",
                    "America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0",
                    "America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0",
                    "America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0",
                    "America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0",
                    "America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0",
                    "America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0",
                    "America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0",
                    "America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0",
                    "America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0",
                    "America/Curacao|LMT -0430 AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4",
                    "America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5",
                    "America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2",
                    "America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3",
                    "America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5",
                    "America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4",
                    "America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5",
                    "America/Belize|LMT CST -0530 CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3",
                    "America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2",
                    "America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2",
                    "America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5",
                    "America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4",
                    "America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2",
                    "America/Campo_Grande|LMT -04 -03|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0 IL0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1Kp0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0|77e4",
                    "America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4",
                    "America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5",
                    "America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3",
                    "America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5",
                    "America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5",
                    "America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4",
                    "America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5",
                    "America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2",
                    "America/Cuiaba|LMT -04 -03|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0 IL0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1Kp0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0|54e4",
                    "America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8",
                    "America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3",
                    "America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|13e2",
                    "America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5",
                    "America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|012342525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 XQp0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5",
                    "America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5",
                    "America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3",
                    "America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5",
                    "America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5",
                    "America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2",
                    "America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5",
                    "America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
                    "America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3",
                    "America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2",
                    "America/Grand_Turk|KMT EST EDT AST|57.a 50 40 40|01212121212121212121212121212121212121212121212121212121212121212121212121232121212121212121212121212121212121212121|-2l1uQ.O 2HHBQ.O 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2",
                    "America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5",
                    "America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5",
                    "America/Guyana|LMT -0345 -03 -04|3Q.E 3J 30 40|0123|-2dvU7.k 2r6LQ.k Bxbf|80e4",
                    "America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4",
                    "America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5",
                    "America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4",
                    "America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2",
                    "America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2",
                    "America/Jamaica|KMT EST EDT|57.a 50 40|0121212121212121212121|-2l1uQ.O 2uM1Q.O 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4",
                    "America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3",
                    "America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/La_Paz|CMT BST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5",
                    "America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6",
                    "America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6",
                    "America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4",
                    "America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5",
                    "America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5",
                    "America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4",
                    "America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4",
                    "America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4",
                    "America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2",
                    "America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5",
                    "America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|0120303030303030303030303030303030454545454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
                    "America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6",
                    "America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2",
                    "America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3",
                    "America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5",
                    "America/Montevideo|LMT MMT -04 -03 -0330 -0230 -02 -0130|3I.P 3I.P 40 30 3u 2u 20 1u|012343434343434343434343435353636353636375363636363636363636363636363636363636363636363|-2tRUf.9 sVc0 8jcf.9 1db0 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1fAu 1cLu 1o0u 11zu NAu 3jXu zXu Dq0u 19Xu pcu jz0 cm10 19X0 6tB0 1fbu 3o0u jX0 4vB0 xz0 3Cp0 mmu 1a10 IMu Db0 4c10 uL0 1Nd0 An0 1SN0 uL0 mp0 28L0 iPB0 un0 1SN0 xz0 1zd0 Lz0 1zd0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5",
                    "America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5",
                    "America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4",
                    "America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6",
                    "America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2",
                    "America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2",
                    "America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2",
                    "America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
                    "America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
                    "America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4",
                    "America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5",
                    "America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
                    "America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4",
                    "America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4",
                    "America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5",
                    "America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0",
                    "America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842",
                    "America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2",
                    "America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5",
                    "America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4",
                    "America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229",
                    "America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4",
                    "America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|62e5",
                    "America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5",
                    "America/Sao_Paulo|LMT -03 -02|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0 IL0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1Kp0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0|20e6",
                    "America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452",
                    "America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2",
                    "America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
                    "America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3",
                    "America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5",
                    "America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656",
                    "America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
                    "America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
                    "America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
                    "America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4",
                    "America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642",
                    "America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
                    "Antarctica/Casey|-00 +08 +11|0 -80 -b0|01212121|-2q00 1DjS0 T90 40P0 KL0 blz0 3m10|10",
                    "Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70",
                    "Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80",
                    "Antarctica/Macquarie|AEST AEDT -00 +11|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1",
                    "Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60",
                    "Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5",
                    "Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40",
                    "Antarctica/Rothera|-00 -03|0 30|01|gOo0|130",
                    "Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20",
                    "Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40",
                    "Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25",
                    "Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4",
                    "Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5",
                    "Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5",
                    "Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5",
                    "Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3",
                    "Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4",
                    "Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4",
                    "Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4",
                    "Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0",
                    "Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5",
                    "Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4",
                    "Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5",
                    "Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6",
                    "Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
                    "Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5",
                    "Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4",
                    "Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4",
                    "Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6",
                    "Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4",
                    "Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3",
                    "Asia/Shanghai|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6",
                    "Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5",
                    "Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6",
                    "Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5",
                    "Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4",
                    "Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5",
                    "Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4",
                    "Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
                    "Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101012323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0|18e5",
                    "Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|01010101010101010101010101010101232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0|25e4",
                    "Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5",
                    "Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5",
                    "Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3",
                    "Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
                    "Europe/Istanbul|IMT EET EEST +04 +03|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212124|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1de0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6",
                    "Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6",
                    "Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4",
                    "Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4",
                    "Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5",
                    "Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4",
                    "Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6",
                    "Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5",
                    "Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5",
                    "Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2",
                    "Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
                    "Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5",
                    "Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4",
                    "Asia/Macau|LMT CST CDT|-7y.k -80 -90|012121212121212121212121212121212121212121|-2le80 1XO3u 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0|57e4",
                    "Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3",
                    "Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5",
                    "Asia/Manila|+08 +09|-80 -90|010101010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6",
                    "Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4",
                    "Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4",
                    "Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5",
                    "Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5",
                    "Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4",
                    "Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4",
                    "Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|012313|-2um8n 97XR 1lTzu 2Onc0 6BAu|29e5",
                    "Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|0123232323232323232323232323232323232323232323|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|73e4",
                    "Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5",
                    "Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4",
                    "Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4",
                    "Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -9u -a0|0123141414141414135353|-2um8r.Q 97XV.Q 1m1zu kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6",
                    "Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2",
                    "Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5",
                    "Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5",
                    "Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5",
                    "Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6",
                    "Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3",
                    "Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJJ0 Rb0 1ld0 14n0 1zd0 On0 1zd0 On0|38e6",
                    "Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5",
                    "Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5",
                    "Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2",
                    "Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
                    "Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4",
                    "Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5",
                    "Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5",
                    "Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4",
                    "Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3",
                    "Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
                    "Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2ldW0 1eEo0 7zX0 1djf0|50e4",
                    "Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3",
                    "Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldX0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4",
                    "Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4",
                    "Atlantic/South_Georgia|-02|20|0||30",
                    "Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2",
                    "Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5",
                    "Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5",
                    "Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5",
                    "Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3",
                    "Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746",
                    "Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4",
                    "Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368",
                    "Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4",
                    "Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347",
                    "Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10",
                    "Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5",
                    "Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5",
                    "CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
                    "Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|30e2",
                    "CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
                    "Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                    "EST|EST|50|0|",
                    "EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "Etc/GMT-0|GMT|0|0|",
                    "Etc/GMT-1|+01|-10|0|",
                    "Pacific/Port_Moresby|+10|-a0|0||25e4",
                    "Pacific/Pohnpei|+11|-b0|0||34e3",
                    "Pacific/Tarawa|+12|-c0|0||29e3",
                    "Etc/GMT-13|+13|-d0|0|",
                    "Etc/GMT-14|+14|-e0|0|",
                    "Etc/GMT-2|+02|-20|0|",
                    "Etc/GMT-3|+03|-30|0|",
                    "Etc/GMT-4|+04|-40|0|",
                    "Etc/GMT-5|+05|-50|0|",
                    "Etc/GMT-6|+06|-60|0|",
                    "Indian/Christmas|+07|-70|0||21e2",
                    "Etc/GMT-8|+08|-80|0|",
                    "Pacific/Palau|+09|-90|0||21e3",
                    "Etc/GMT+1|-01|10|0|",
                    "Etc/GMT+10|-10|a0|0|",
                    "Etc/GMT+11|-11|b0|0|",
                    "Etc/GMT+12|-12|c0|0|",
                    "Etc/GMT+3|-03|30|0|",
                    "Etc/GMT+4|-04|40|0|",
                    "Etc/GMT+5|-05|50|0|",
                    "Etc/GMT+6|-06|60|0|",
                    "Etc/GMT+7|-07|70|0|",
                    "Etc/GMT+8|-08|80|0|",
                    "Etc/GMT+9|-09|90|0|",
                    "Etc/UCT|UCT|0|0|",
                    "Etc/UTC|UTC|0|0|",
                    "Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5",
                    "Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3",
                    "Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
                    "Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5",
                    "Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6",
                    "Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                    "Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5",
                    "Europe/Prague|CET CEST GMT|-10 -20 0|01010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 1qM0 11c0 mp0 xA0 mn0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5",
                    "Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5",
                    "Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5",
                    "Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
                    "Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4",
                    "Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4",
                    "Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                    "Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3",
                    "Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                    "Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET +03|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454546767676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4",
                    "Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5",
                    "Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4",
                    "Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2le00 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5",
                    "Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
                    "Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5",
                    "Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
                    "Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5",
                    "Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3",
                    "Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6",
                    "Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6",
                    "Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4",
                    "Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5",
                    "Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5",
                    "Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810",
                    "Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4",
                    "Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                    "Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5",
                    "Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4",
                    "Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
                    "Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
                    "Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4",
                    "Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5",
                    "Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
                    "Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|01232323232323232121212121212121212121212121212121212121212121|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
                    "Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
                    "Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4",
                    "HST|HST|a0|0|",
                    "Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2",
                    "Indian/Cocos|+0630|-6u|0||596",
                    "Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130",
                    "Indian/Mahe|LMT +04|-3F.M -40|01|-2yO3F.M|79e3",
                    "Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4",
                    "Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4",
                    "Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4",
                    "Pacific/Kwajalein|+11 -12 +12|-b0 c0 -c0|012|-AX0 W9X0|14e3",
                    "MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
                    "MST|MST|70|0|",
                    "MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600",
                    "Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3",
                    "Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4",
                    "Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3",
                    "Pacific/Enderbury|-12 -11 +13|c0 b0 -d0|012|nIc0 B7X0|1",
                    "Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483",
                    "Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0|88e4",
                    "Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3",
                    "Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125",
                    "Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4",
                    "Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0|17e4",
                    "Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0|37e4",
                    "Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B7Xk|51e2",
                    "Pacific/Kosrae|+11 +12|-b0 -c0|010|-AX0 1bdz0|66e2",
                    "Pacific/Majuro|+11 +12|-b0 -c0|01|-AX0|28e3",
                    "Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2",
                    "Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2",
                    "Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu|10e3",
                    "Pacific/Niue|-1120 -1130 -11|bk bu b0|012|-KfME 17y0a|12e2",
                    "Pacific/Norfolk|+1112 +1130 +1230 +11|-bc -bu -cu -b0|01213|-Kgbc W01G On0 1COp0|25e4",
                    "Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3",
                    "Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56",
                    "Pacific/Rarotonga|-1030 -0930 -10|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3",
                    "Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4",
                    "Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3",
                    "PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
                    "WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"
                ],
                "links": [
                    "Africa/Abidjan|Africa/Bamako",
                    "Africa/Abidjan|Africa/Banjul",
                    "Africa/Abidjan|Africa/Conakry",
                    "Africa/Abidjan|Africa/Dakar",
                    "Africa/Abidjan|Africa/Freetown",
                    "Africa/Abidjan|Africa/Lome",
                    "Africa/Abidjan|Africa/Nouakchott",
                    "Africa/Abidjan|Africa/Ouagadougou",
                    "Africa/Abidjan|Africa/Timbuktu",
                    "Africa/Abidjan|Atlantic/St_Helena",
                    "Africa/Cairo|Egypt",
                    "Africa/Johannesburg|Africa/Maseru",
                    "Africa/Johannesburg|Africa/Mbabane",
                    "Africa/Lagos|Africa/Bangui",
                    "Africa/Lagos|Africa/Brazzaville",
                    "Africa/Lagos|Africa/Douala",
                    "Africa/Lagos|Africa/Kinshasa",
                    "Africa/Lagos|Africa/Libreville",
                    "Africa/Lagos|Africa/Luanda",
                    "Africa/Lagos|Africa/Malabo",
                    "Africa/Lagos|Africa/Niamey",
                    "Africa/Lagos|Africa/Porto-Novo",
                    "Africa/Maputo|Africa/Blantyre",
                    "Africa/Maputo|Africa/Bujumbura",
                    "Africa/Maputo|Africa/Gaborone",
                    "Africa/Maputo|Africa/Harare",
                    "Africa/Maputo|Africa/Kigali",
                    "Africa/Maputo|Africa/Lubumbashi",
                    "Africa/Maputo|Africa/Lusaka",
                    "Africa/Nairobi|Africa/Addis_Ababa",
                    "Africa/Nairobi|Africa/Asmara",
                    "Africa/Nairobi|Africa/Asmera",
                    "Africa/Nairobi|Africa/Dar_es_Salaam",
                    "Africa/Nairobi|Africa/Djibouti",
                    "Africa/Nairobi|Africa/Kampala",
                    "Africa/Nairobi|Africa/Mogadishu",
                    "Africa/Nairobi|Indian/Antananarivo",
                    "Africa/Nairobi|Indian/Comoro",
                    "Africa/Nairobi|Indian/Mayotte",
                    "Africa/Tripoli|Libya",
                    "America/Adak|America/Atka",
                    "America/Adak|US/Aleutian",
                    "America/Anchorage|US/Alaska",
                    "America/Argentina/Buenos_Aires|America/Buenos_Aires",
                    "America/Argentina/Catamarca|America/Argentina/ComodRivadavia",
                    "America/Argentina/Catamarca|America/Catamarca",
                    "America/Argentina/Cordoba|America/Cordoba",
                    "America/Argentina/Cordoba|America/Rosario",
                    "America/Argentina/Jujuy|America/Jujuy",
                    "America/Argentina/Mendoza|America/Mendoza",
                    "America/Atikokan|America/Coral_Harbour",
                    "America/Chicago|US/Central",
                    "America/Curacao|America/Aruba",
                    "America/Curacao|America/Kralendijk",
                    "America/Curacao|America/Lower_Princes",
                    "America/Denver|America/Shiprock",
                    "America/Denver|Navajo",
                    "America/Denver|US/Mountain",
                    "America/Detroit|US/Michigan",
                    "America/Edmonton|Canada/Mountain",
                    "America/Fort_Wayne|America/Indiana/Indianapolis",
                    "America/Fort_Wayne|America/Indianapolis",
                    "America/Fort_Wayne|US/East-Indiana",
                    "America/Halifax|Canada/Atlantic",
                    "America/Havana|Cuba",
                    "America/Indiana/Knox|America/Knox_IN",
                    "America/Indiana/Knox|US/Indiana-Starke",
                    "America/Jamaica|Jamaica",
                    "America/Kentucky/Louisville|America/Louisville",
                    "America/Los_Angeles|US/Pacific",
                    "America/Los_Angeles|US/Pacific-New",
                    "America/Manaus|Brazil/West",
                    "America/Mazatlan|Mexico/BajaSur",
                    "America/Mexico_City|Mexico/General",
                    "America/New_York|US/Eastern",
                    "America/Noronha|Brazil/DeNoronha",
                    "America/Panama|America/Cayman",
                    "America/Phoenix|US/Arizona",
                    "America/Port_of_Spain|America/Anguilla",
                    "America/Port_of_Spain|America/Antigua",
                    "America/Port_of_Spain|America/Dominica",
                    "America/Port_of_Spain|America/Grenada",
                    "America/Port_of_Spain|America/Guadeloupe",
                    "America/Port_of_Spain|America/Marigot",
                    "America/Port_of_Spain|America/Montserrat",
                    "America/Port_of_Spain|America/St_Barthelemy",
                    "America/Port_of_Spain|America/St_Kitts",
                    "America/Port_of_Spain|America/St_Lucia",
                    "America/Port_of_Spain|America/St_Thomas",
                    "America/Port_of_Spain|America/St_Vincent",
                    "America/Port_of_Spain|America/Tortola",
                    "America/Port_of_Spain|America/Virgin",
                    "America/Regina|Canada/Saskatchewan",
                    "America/Rio_Branco|America/Porto_Acre",
                    "America/Rio_Branco|Brazil/Acre",
                    "America/Santiago|Chile/Continental",
                    "America/Sao_Paulo|Brazil/East",
                    "America/St_Johns|Canada/Newfoundland",
                    "America/Tijuana|America/Ensenada",
                    "America/Tijuana|America/Santa_Isabel",
                    "America/Tijuana|Mexico/BajaNorte",
                    "America/Toronto|America/Montreal",
                    "America/Toronto|Canada/Eastern",
                    "America/Vancouver|Canada/Pacific",
                    "America/Whitehorse|Canada/Yukon",
                    "America/Winnipeg|Canada/Central",
                    "Asia/Ashgabat|Asia/Ashkhabad",
                    "Asia/Bangkok|Asia/Phnom_Penh",
                    "Asia/Bangkok|Asia/Vientiane",
                    "Asia/Dhaka|Asia/Dacca",
                    "Asia/Dubai|Asia/Muscat",
                    "Asia/Ho_Chi_Minh|Asia/Saigon",
                    "Asia/Hong_Kong|Hongkong",
                    "Asia/Jerusalem|Asia/Tel_Aviv",
                    "Asia/Jerusalem|Israel",
                    "Asia/Kathmandu|Asia/Katmandu",
                    "Asia/Kolkata|Asia/Calcutta",
                    "Asia/Kuala_Lumpur|Asia/Singapore",
                    "Asia/Kuala_Lumpur|Singapore",
                    "Asia/Macau|Asia/Macao",
                    "Asia/Makassar|Asia/Ujung_Pandang",
                    "Asia/Nicosia|Europe/Nicosia",
                    "Asia/Qatar|Asia/Bahrain",
                    "Asia/Rangoon|Asia/Yangon",
                    "Asia/Riyadh|Asia/Aden",
                    "Asia/Riyadh|Asia/Kuwait",
                    "Asia/Seoul|ROK",
                    "Asia/Shanghai|Asia/Chongqing",
                    "Asia/Shanghai|Asia/Chungking",
                    "Asia/Shanghai|Asia/Harbin",
                    "Asia/Shanghai|PRC",
                    "Asia/Taipei|ROC",
                    "Asia/Tehran|Iran",
                    "Asia/Thimphu|Asia/Thimbu",
                    "Asia/Tokyo|Japan",
                    "Asia/Ulaanbaatar|Asia/Ulan_Bator",
                    "Asia/Urumqi|Asia/Kashgar",
                    "Atlantic/Faroe|Atlantic/Faeroe",
                    "Atlantic/Reykjavik|Iceland",
                    "Atlantic/South_Georgia|Etc/GMT+2",
                    "Australia/Adelaide|Australia/South",
                    "Australia/Brisbane|Australia/Queensland",
                    "Australia/Broken_Hill|Australia/Yancowinna",
                    "Australia/Darwin|Australia/North",
                    "Australia/Hobart|Australia/Tasmania",
                    "Australia/Lord_Howe|Australia/LHI",
                    "Australia/Melbourne|Australia/Victoria",
                    "Australia/Perth|Australia/West",
                    "Australia/Sydney|Australia/ACT",
                    "Australia/Sydney|Australia/Canberra",
                    "Australia/Sydney|Australia/NSW",
                    "Etc/GMT-0|Etc/GMT",
                    "Etc/GMT-0|Etc/GMT+0",
                    "Etc/GMT-0|Etc/GMT0",
                    "Etc/GMT-0|Etc/Greenwich",
                    "Etc/GMT-0|GMT",
                    "Etc/GMT-0|GMT+0",
                    "Etc/GMT-0|GMT-0",
                    "Etc/GMT-0|GMT0",
                    "Etc/GMT-0|Greenwich",
                    "Etc/UCT|UCT",
                    "Etc/UTC|Etc/Universal",
                    "Etc/UTC|Etc/Zulu",
                    "Etc/UTC|UTC",
                    "Etc/UTC|Universal",
                    "Etc/UTC|Zulu",
                    "Europe/Belgrade|Europe/Ljubljana",
                    "Europe/Belgrade|Europe/Podgorica",
                    "Europe/Belgrade|Europe/Sarajevo",
                    "Europe/Belgrade|Europe/Skopje",
                    "Europe/Belgrade|Europe/Zagreb",
                    "Europe/Chisinau|Europe/Tiraspol",
                    "Europe/Dublin|Eire",
                    "Europe/Helsinki|Europe/Mariehamn",
                    "Europe/Istanbul|Asia/Istanbul",
                    "Europe/Istanbul|Turkey",
                    "Europe/Lisbon|Portugal",
                    "Europe/London|Europe/Belfast",
                    "Europe/London|Europe/Guernsey",
                    "Europe/London|Europe/Isle_of_Man",
                    "Europe/London|Europe/Jersey",
                    "Europe/London|GB",
                    "Europe/London|GB-Eire",
                    "Europe/Moscow|W-SU",
                    "Europe/Oslo|Arctic/Longyearbyen",
                    "Europe/Oslo|Atlantic/Jan_Mayen",
                    "Europe/Prague|Europe/Bratislava",
                    "Europe/Rome|Europe/San_Marino",
                    "Europe/Rome|Europe/Vatican",
                    "Europe/Warsaw|Poland",
                    "Europe/Zurich|Europe/Busingen",
                    "Europe/Zurich|Europe/Vaduz",
                    "Indian/Christmas|Etc/GMT-7",
                    "Pacific/Auckland|Antarctica/McMurdo",
                    "Pacific/Auckland|Antarctica/South_Pole",
                    "Pacific/Auckland|NZ",
                    "Pacific/Chatham|NZ-CHAT",
                    "Pacific/Easter|Chile/EasterIsland",
                    "Pacific/Guam|Pacific/Saipan",
                    "Pacific/Honolulu|Pacific/Johnston",
                    "Pacific/Honolulu|US/Hawaii",
                    "Pacific/Kwajalein|Kwajalein",
                    "Pacific/Pago_Pago|Pacific/Midway",
                    "Pacific/Pago_Pago|Pacific/Samoa",
                    "Pacific/Pago_Pago|US/Samoa",
                    "Pacific/Palau|Etc/GMT-9",
                    "Pacific/Pohnpei|Etc/GMT-11",
                    "Pacific/Pohnpei|Pacific/Ponape",
                    "Pacific/Port_Moresby|Etc/GMT-10",
                    "Pacific/Port_Moresby|Pacific/Chuuk",
                    "Pacific/Port_Moresby|Pacific/Truk",
                    "Pacific/Port_Moresby|Pacific/Yap",
                    "Pacific/Tarawa|Etc/GMT-12",
                    "Pacific/Tarawa|Pacific/Funafuti",
                    "Pacific/Tarawa|Pacific/Wake",
                    "Pacific/Tarawa|Pacific/Wallis"
                ]
            }
        }, {}],
        11: [function (require, module, exports) {
            var moment = module.exports = require("./moment-timezone");
            moment.tz.load(require('./data/packed/latest.json'));

        }, {"./data/packed/latest.json": 10, "./moment-timezone": 12}],
        12: [function (require, module, exports) {
//! moment-timezone.js
//! version : 0.5.21
//! Copyright (c) JS Foundation and other contributors
//! license : MIT
//! github.com/moment/moment-timezone

            (function (root, factory) {
                "use strict";

                /*global define*/
                if (typeof module === 'object' && module.exports) {
                    module.exports = factory(require('moment')); // Node
                } else if (typeof define === 'function' && define.amd) {
                    define(['moment'], factory);                 // AMD
                } else {
                    factory(root.moment);                        // Browser
                }
            }(this, function (moment) {
                "use strict";

                // Do not load moment-timezone a second time.
                // if (moment.tz !== undefined) {
                // 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
                // 	return moment;
                // }

                var VERSION = "0.5.21",
                    zones = {},
                    links = {},
                    names = {},
                    guesses = {},
                    cachedGuess;

                if (!moment || typeof moment.version !== 'string') {
                    logError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');
                }

                var momentVersion = moment.version.split('.'),
                    major = +momentVersion[0],
                    minor = +momentVersion[1];

                // Moment.js version check
                if (major < 2 || (major === 2 && minor < 6)) {
                    logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
                }

                /************************************
                 Unpacking
                 ************************************/

                function charCodeToInt(charCode) {
                    if (charCode > 96) {
                        return charCode - 87;
                    } else if (charCode > 64) {
                        return charCode - 29;
                    }
                    return charCode - 48;
                }

                function unpackBase60(string) {
                    var i = 0,
                        parts = string.split('.'),
                        whole = parts[0],
                        fractional = parts[1] || '',
                        multiplier = 1,
                        num,
                        out = 0,
                        sign = 1;

                    // handle negative numbers
                    if (string.charCodeAt(0) === 45) {
                        i = 1;
                        sign = -1;
                    }

                    // handle digits before the decimal
                    for (i; i < whole.length; i++) {
                        num = charCodeToInt(whole.charCodeAt(i));
                        out = 60 * out + num;
                    }

                    // handle digits after the decimal
                    for (i = 0; i < fractional.length; i++) {
                        multiplier = multiplier / 60;
                        num = charCodeToInt(fractional.charCodeAt(i));
                        out += num * multiplier;
                    }

                    return out * sign;
                }

                function arrayToInt(array) {
                    for (var i = 0; i < array.length; i++) {
                        array[i] = unpackBase60(array[i]);
                    }
                }

                function intToUntil(array, length) {
                    for (var i = 0; i < length; i++) {
                        array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
                    }

                    array[length - 1] = Infinity;
                }

                function mapIndices(source, indices) {
                    var out = [], i;

                    for (i = 0; i < indices.length; i++) {
                        out[i] = source[indices[i]];
                    }

                    return out;
                }

                function unpack(string) {
                    var data = string.split('|'),
                        offsets = data[2].split(' '),
                        indices = data[3].split(''),
                        untils = data[4].split(' ');

                    arrayToInt(offsets);
                    arrayToInt(indices);
                    arrayToInt(untils);

                    intToUntil(untils, indices.length);

                    return {
                        name: data[0],
                        abbrs: mapIndices(data[1].split(' '), indices),
                        offsets: mapIndices(offsets, indices),
                        untils: untils,
                        population: data[5] | 0
                    };
                }

                /************************************
                 Zone object
                 ************************************/

                function Zone(packedString) {
                    if (packedString) {
                        this._set(unpack(packedString));
                    }
                }

                Zone.prototype = {
                    _set: function (unpacked) {
                        this.name = unpacked.name;
                        this.abbrs = unpacked.abbrs;
                        this.untils = unpacked.untils;
                        this.offsets = unpacked.offsets;
                        this.population = unpacked.population;
                    },

                    _index: function (timestamp) {
                        var target = +timestamp,
                            untils = this.untils,
                            i;

                        for (i = 0; i < untils.length; i++) {
                            if (target < untils[i]) {
                                return i;
                            }
                        }
                    },

                    parse: function (timestamp) {
                        var target = +timestamp,
                            offsets = this.offsets,
                            untils = this.untils,
                            max = untils.length - 1,
                            offset, offsetNext, offsetPrev, i;

                        for (i = 0; i < max; i++) {
                            offset = offsets[i];
                            offsetNext = offsets[i + 1];
                            offsetPrev = offsets[i ? i - 1 : i];

                            if (offset < offsetNext && tz.moveAmbiguousForward) {
                                offset = offsetNext;
                            } else if (offset > offsetPrev && tz.moveInvalidForward) {
                                offset = offsetPrev;
                            }

                            if (target < untils[i] - (offset * 60000)) {
                                return offsets[i];
                            }
                        }

                        return offsets[max];
                    },

                    abbr: function (mom) {
                        return this.abbrs[this._index(mom)];
                    },

                    offset: function (mom) {
                        logError("zone.offset has been deprecated in favor of zone.utcOffset");
                        return this.offsets[this._index(mom)];
                    },

                    utcOffset: function (mom) {
                        return this.offsets[this._index(mom)];
                    }
                };

                /************************************
                 Current Timezone
                 ************************************/

                function OffsetAt(at) {
                    var timeString = at.toTimeString();
                    var abbr = timeString.match(/\([a-z ]+\)/i);
                    if (abbr && abbr[0]) {
                        // 17:56:31 GMT-0600 (CST)
                        // 17:56:31 GMT-0600 (Central Standard Time)
                        abbr = abbr[0].match(/[A-Z]/g);
                        abbr = abbr ? abbr.join('') : undefined;
                    } else {
                        // 17:56:31 CST
                        // 17:56:31 GMT+0800 (台北標準時間)
                        abbr = timeString.match(/[A-Z]{3,5}/g);
                        abbr = abbr ? abbr[0] : undefined;
                    }

                    if (abbr === 'GMT') {
                        abbr = undefined;
                    }

                    this.at = +at;
                    this.abbr = abbr;
                    this.offset = at.getTimezoneOffset();
                }

                function ZoneScore(zone) {
                    this.zone = zone;
                    this.offsetScore = 0;
                    this.abbrScore = 0;
                }

                ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
                    this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
                    if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
                        this.abbrScore++;
                    }
                };

                function findChange(low, high) {
                    var mid, diff;

                    while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
                        mid = new OffsetAt(new Date(low.at + diff));
                        if (mid.offset === low.offset) {
                            low = mid;
                        } else {
                            high = mid;
                        }
                    }

                    return low;
                }

                function userOffsets() {
                    var startYear = new Date().getFullYear() - 2,
                        last = new OffsetAt(new Date(startYear, 0, 1)),
                        offsets = [last],
                        change, next, i;

                    for (i = 1; i < 48; i++) {
                        next = new OffsetAt(new Date(startYear, i, 1));
                        if (next.offset !== last.offset) {
                            change = findChange(last, next);
                            offsets.push(change);
                            offsets.push(new OffsetAt(new Date(change.at + 6e4)));
                        }
                        last = next;
                    }

                    for (i = 0; i < 4; i++) {
                        offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
                        offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
                    }

                    return offsets;
                }

                function sortZoneScores(a, b) {
                    if (a.offsetScore !== b.offsetScore) {
                        return a.offsetScore - b.offsetScore;
                    }
                    if (a.abbrScore !== b.abbrScore) {
                        return a.abbrScore - b.abbrScore;
                    }
                    return b.zone.population - a.zone.population;
                }

                function addToGuesses(name, offsets) {
                    var i, offset;
                    arrayToInt(offsets);
                    for (i = 0; i < offsets.length; i++) {
                        offset = offsets[i];
                        guesses[offset] = guesses[offset] || {};
                        guesses[offset][name] = true;
                    }
                }

                function guessesForUserOffsets(offsets) {
                    var offsetsLength = offsets.length,
                        filteredGuesses = {},
                        out = [],
                        i, j, guessesOffset;

                    for (i = 0; i < offsetsLength; i++) {
                        guessesOffset = guesses[offsets[i].offset] || {};
                        for (j in guessesOffset) {
                            if (guessesOffset.hasOwnProperty(j)) {
                                filteredGuesses[j] = true;
                            }
                        }
                    }

                    for (i in filteredGuesses) {
                        if (filteredGuesses.hasOwnProperty(i)) {
                            out.push(names[i]);
                        }
                    }

                    return out;
                }

                function rebuildGuess() {

                    // use Intl API when available and returning valid time zone
                    try {
                        var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        if (intlName && intlName.length > 3) {
                            var name = names[normalizeName(intlName)];
                            if (name) {
                                return name;
                            }
                            logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
                        }
                    } catch (e) {
                        // Intl unavailable, fall back to manual guessing.
                    }

                    var offsets = userOffsets(),
                        offsetsLength = offsets.length,
                        guesses = guessesForUserOffsets(offsets),
                        zoneScores = [],
                        zoneScore, i, j;

                    for (i = 0; i < guesses.length; i++) {
                        zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
                        for (j = 0; j < offsetsLength; j++) {
                            zoneScore.scoreOffsetAt(offsets[j]);
                        }
                        zoneScores.push(zoneScore);
                    }

                    zoneScores.sort(sortZoneScores);

                    return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
                }

                function guess(ignoreCache) {
                    if (!cachedGuess || ignoreCache) {
                        cachedGuess = rebuildGuess();
                    }
                    return cachedGuess;
                }

                /************************************
                 Global Methods
                 ************************************/

                function normalizeName(name) {
                    return (name || '').toLowerCase().replace(/\//g, '_');
                }

                function addZone(packed) {
                    var i, name, split, normalized;

                    if (typeof packed === "string") {
                        packed = [packed];
                    }

                    for (i = 0; i < packed.length; i++) {
                        split = packed[i].split('|');
                        name = split[0];
                        normalized = normalizeName(name);
                        zones[normalized] = packed[i];
                        names[normalized] = name;
                        addToGuesses(normalized, split[2].split(' '));
                    }
                }

                function getZone(name, caller) {

                    name = normalizeName(name);

                    var zone = zones[name];
                    var link;

                    if (zone instanceof Zone) {
                        return zone;
                    }

                    if (typeof zone === 'string') {
                        zone = new Zone(zone);
                        zones[name] = zone;
                        return zone;
                    }

                    // Pass getZone to prevent recursion more than 1 level deep
                    if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
                        zone = zones[name] = new Zone();
                        zone._set(link);
                        zone.name = names[name];
                        return zone;
                    }

                    return null;
                }

                function getNames() {
                    var i, out = [];

                    for (i in names) {
                        if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
                            out.push(names[i]);
                        }
                    }

                    return out.sort();
                }

                function addLink(aliases) {
                    var i, alias, normal0, normal1;

                    if (typeof aliases === "string") {
                        aliases = [aliases];
                    }

                    for (i = 0; i < aliases.length; i++) {
                        alias = aliases[i].split('|');

                        normal0 = normalizeName(alias[0]);
                        normal1 = normalizeName(alias[1]);

                        links[normal0] = normal1;
                        names[normal0] = alias[0];

                        links[normal1] = normal0;
                        names[normal1] = alias[1];
                    }
                }

                function loadData(data) {
                    addZone(data.zones);
                    addLink(data.links);
                    tz.dataVersion = data.version;
                }

                function zoneExists(name) {
                    if (!zoneExists.didShowError) {
                        zoneExists.didShowError = true;
                        logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
                    }
                    return !!getZone(name);
                }

                function needsOffset(m) {
                    var isUnixTimestamp = (m._f === 'X' || m._f === 'x');
                    return !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);
                }

                function logError(message) {
                    if (typeof console !== 'undefined' && typeof console.error === 'function') {
                        console.error(message);
                    }
                }

                /************************************
                 moment.tz namespace
                 ************************************/

                function tz(input) {
                    var args = Array.prototype.slice.call(arguments, 0, -1),
                        name = arguments[arguments.length - 1],
                        zone = getZone(name),
                        out = moment.utc.apply(null, args);

                    if (zone && !moment.isMoment(input) && needsOffset(out)) {
                        out.add(zone.parse(out), 'minutes');
                    }

                    out.tz(name);

                    return out;
                }

                tz.version = VERSION;
                tz.dataVersion = '';
                tz._zones = zones;
                tz._links = links;
                tz._names = names;
                tz.add = addZone;
                tz.link = addLink;
                tz.load = loadData;
                tz.zone = getZone;
                tz.zoneExists = zoneExists; // deprecated in 0.1.0
                tz.guess = guess;
                tz.names = getNames;
                tz.Zone = Zone;
                tz.unpack = unpack;
                tz.unpackBase60 = unpackBase60;
                tz.needsOffset = needsOffset;
                tz.moveInvalidForward = true;
                tz.moveAmbiguousForward = false;

                /************************************
                 Interface with Moment.js
                 ************************************/

                var fn = moment.fn;

                moment.tz = tz;

                moment.defaultZone = null;

                moment.updateOffset = function (mom, keepTime) {
                    var zone = moment.defaultZone,
                        offset;

                    if (mom._z === undefined) {
                        if (zone && needsOffset(mom) && !mom._isUTC) {
                            mom._d = moment.utc(mom._a)._d;
                            mom.utc().add(zone.parse(mom), 'minutes');
                        }
                        mom._z = zone;
                    }
                    if (mom._z) {
                        offset = mom._z.utcOffset(mom);
                        if (Math.abs(offset) < 16) {
                            offset = offset / 60;
                        }
                        if (mom.utcOffset !== undefined) {
                            mom.utcOffset(-offset, keepTime);
                        } else {
                            mom.zone(offset, keepTime);
                        }
                    }
                };

                fn.tz = function (name, keepTime) {
                    if (name) {
                        if (typeof name !== 'string') {
                            throw new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');
                        }
                        this._z = getZone(name);
                        if (this._z) {
                            moment.updateOffset(this, keepTime);
                        } else {
                            logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
                        }
                        return this;
                    }
                    if (this._z) {
                        return this._z.name;
                    }
                };

                function abbrWrap(old) {
                    return function () {
                        if (this._z) {
                            return this._z.abbr(this);
                        }
                        return old.call(this);
                    };
                }

                function resetZoneWrap(old) {
                    return function () {
                        this._z = null;
                        return old.apply(this, arguments);
                    };
                }

                fn.zoneName = abbrWrap(fn.zoneName);
                fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
                fn.utc = resetZoneWrap(fn.utc);

                moment.tz.setDefault = function (name) {
                    if (major < 2 || (major === 2 && minor < 9)) {
                        logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
                    }
                    moment.defaultZone = name ? getZone(name) : null;
                    return moment;
                };

                // Cloning a moment should include the _z property.
                var momentProperties = moment.momentProperties;
                if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
                    // moment 2.8.1+
                    momentProperties.push('_z');
                    momentProperties.push('_a');
                } else if (momentProperties) {
                    // moment 2.7.0
                    momentProperties._z = null;
                }

                // INJECT DATA

                return moment;
            }));

        }, {"moment": 13}],
        13: [function (require, module, exports) {
//! moment.js

            ;(function (global, factory) {
                typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
                    typeof define === 'function' && define.amd ? define(factory) :
                        global.moment = factory()
            }(this, (function () {
                'use strict';

                var hookCallback;

                function hooks() {
                    return hookCallback.apply(null, arguments);
                }

                // This is done to register the method called with moment()
                // without creating circular dependencies.
                function setHookCallback(callback) {
                    hookCallback = callback;
                }

                function isArray(input) {
                    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
                }

                function isObject(input) {
                    // IE8 will treat undefined and null as object if it wasn't for
                    // input != null
                    return input != null && Object.prototype.toString.call(input) === '[object Object]';
                }

                function isObjectEmpty(obj) {
                    if (Object.getOwnPropertyNames) {
                        return (Object.getOwnPropertyNames(obj).length === 0);
                    } else {
                        var k;
                        for (k in obj) {
                            if (obj.hasOwnProperty(k)) {
                                return false;
                            }
                        }
                        return true;
                    }
                }

                function isUndefined(input) {
                    return input === void 0;
                }

                function isNumber(input) {
                    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
                }

                function isDate(input) {
                    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
                }

                function map(arr, fn) {
                    var res = [], i;
                    for (i = 0; i < arr.length; ++i) {
                        res.push(fn(arr[i], i));
                    }
                    return res;
                }

                function hasOwnProp(a, b) {
                    return Object.prototype.hasOwnProperty.call(a, b);
                }

                function extend(a, b) {
                    for (var i in b) {
                        if (hasOwnProp(b, i)) {
                            a[i] = b[i];
                        }
                    }

                    if (hasOwnProp(b, 'toString')) {
                        a.toString = b.toString;
                    }

                    if (hasOwnProp(b, 'valueOf')) {
                        a.valueOf = b.valueOf;
                    }

                    return a;
                }

                function createUTC(input, format, locale, strict) {
                    return createLocalOrUTC(input, format, locale, strict, true).utc();
                }

                function defaultParsingFlags() {
                    // We need to deep clone this object.
                    return {
                        empty: false,
                        unusedTokens: [],
                        unusedInput: [],
                        overflow: -2,
                        charsLeftOver: 0,
                        nullInput: false,
                        invalidMonth: null,
                        invalidFormat: false,
                        userInvalidated: false,
                        iso: false,
                        parsedDateParts: [],
                        meridiem: null,
                        rfc2822: false,
                        weekdayMismatch: false
                    };
                }

                function getParsingFlags(m) {
                    if (m._pf == null) {
                        m._pf = defaultParsingFlags();
                    }
                    return m._pf;
                }

                var some;
                if (Array.prototype.some) {
                    some = Array.prototype.some;
                } else {
                    some = function (fun) {
                        var t = Object(this);
                        var len = t.length >>> 0;

                        for (var i = 0; i < len; i++) {
                            if (i in t && fun.call(this, t[i], i, t)) {
                                return true;
                            }
                        }

                        return false;
                    };
                }

                function isValid(m) {
                    if (m._isValid == null) {
                        var flags = getParsingFlags(m);
                        var parsedParts = some.call(flags.parsedDateParts, function (i) {
                            return i != null;
                        });
                        var isNowValid = !isNaN(m._d.getTime()) &&
                            flags.overflow < 0 &&
                            !flags.empty &&
                            !flags.invalidMonth &&
                            !flags.invalidWeekday &&
                            !flags.weekdayMismatch &&
                            !flags.nullInput &&
                            !flags.invalidFormat &&
                            !flags.userInvalidated &&
                            (!flags.meridiem || (flags.meridiem && parsedParts));

                        if (m._strict) {
                            isNowValid = isNowValid &&
                                flags.charsLeftOver === 0 &&
                                flags.unusedTokens.length === 0 &&
                                flags.bigHour === undefined;
                        }

                        if (Object.isFrozen == null || !Object.isFrozen(m)) {
                            m._isValid = isNowValid;
                        }
                        else {
                            return isNowValid;
                        }
                    }
                    return m._isValid;
                }

                function createInvalid(flags) {
                    var m = createUTC(NaN);
                    if (flags != null) {
                        extend(getParsingFlags(m), flags);
                    }
                    else {
                        getParsingFlags(m).userInvalidated = true;
                    }

                    return m;
                }

                // Plugins that add properties should also add the key here (null value),
                // so we can properly clone ourselves.
                var momentProperties = hooks.momentProperties = [];

                function copyConfig(to, from) {
                    var i, prop, val;

                    if (!isUndefined(from._isAMomentObject)) {
                        to._isAMomentObject = from._isAMomentObject;
                    }
                    if (!isUndefined(from._i)) {
                        to._i = from._i;
                    }
                    if (!isUndefined(from._f)) {
                        to._f = from._f;
                    }
                    if (!isUndefined(from._l)) {
                        to._l = from._l;
                    }
                    if (!isUndefined(from._strict)) {
                        to._strict = from._strict;
                    }
                    if (!isUndefined(from._tzm)) {
                        to._tzm = from._tzm;
                    }
                    if (!isUndefined(from._isUTC)) {
                        to._isUTC = from._isUTC;
                    }
                    if (!isUndefined(from._offset)) {
                        to._offset = from._offset;
                    }
                    if (!isUndefined(from._pf)) {
                        to._pf = getParsingFlags(from);
                    }
                    if (!isUndefined(from._locale)) {
                        to._locale = from._locale;
                    }

                    if (momentProperties.length > 0) {
                        for (i = 0; i < momentProperties.length; i++) {
                            prop = momentProperties[i];
                            val = from[prop];
                            if (!isUndefined(val)) {
                                to[prop] = val;
                            }
                        }
                    }

                    return to;
                }

                var updateInProgress = false;

                // Moment prototype object
                function Moment(config) {
                    copyConfig(this, config);
                    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
                    if (!this.isValid()) {
                        this._d = new Date(NaN);
                    }
                    // Prevent infinite loop in case updateOffset creates new moment
                    // objects.
                    if (updateInProgress === false) {
                        updateInProgress = true;
                        hooks.updateOffset(this);
                        updateInProgress = false;
                    }
                }

                function isMoment(obj) {
                    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
                }

                function absFloor(number) {
                    if (number < 0) {
                        // -0 -> 0
                        return Math.ceil(number) || 0;
                    } else {
                        return Math.floor(number);
                    }
                }

                function toInt(argumentForCoercion) {
                    var coercedNumber = +argumentForCoercion,
                        value = 0;

                    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                        value = absFloor(coercedNumber);
                    }

                    return value;
                }

                // compare two arrays, return the number of differences
                function compareArrays(array1, array2, dontConvert) {
                    var len = Math.min(array1.length, array2.length),
                        lengthDiff = Math.abs(array1.length - array2.length),
                        diffs = 0,
                        i;
                    for (i = 0; i < len; i++) {
                        if ((dontConvert && array1[i] !== array2[i]) ||
                            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                            diffs++;
                        }
                    }
                    return diffs + lengthDiff;
                }

                function warn(msg) {
                    if (hooks.suppressDeprecationWarnings === false &&
                        (typeof console !== 'undefined') && console.warn) {
                        console.warn('Deprecation warning: ' + msg);
                    }
                }

                function deprecate(msg, fn) {
                    var firstTime = true;

                    return extend(function () {
                        if (hooks.deprecationHandler != null) {
                            hooks.deprecationHandler(null, msg);
                        }
                        if (firstTime) {
                            var args = [];
                            var arg;
                            for (var i = 0; i < arguments.length; i++) {
                                arg = '';
                                if (typeof arguments[i] === 'object') {
                                    arg += '\n[' + i + '] ';
                                    for (var key in arguments[0]) {
                                        arg += key + ': ' + arguments[0][key] + ', ';
                                    }
                                    arg = arg.slice(0, -2); // Remove trailing comma and space
                                } else {
                                    arg = arguments[i];
                                }
                                args.push(arg);
                            }
                            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                            firstTime = false;
                        }
                        return fn.apply(this, arguments);
                    }, fn);
                }

                var deprecations = {};

                function deprecateSimple(name, msg) {
                    if (hooks.deprecationHandler != null) {
                        hooks.deprecationHandler(name, msg);
                    }
                    if (!deprecations[name]) {
                        warn(msg);
                        deprecations[name] = true;
                    }
                }

                hooks.suppressDeprecationWarnings = false;
                hooks.deprecationHandler = null;

                function isFunction(input) {
                    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
                }

                function set(config) {
                    var prop, i;
                    for (i in config) {
                        prop = config[i];
                        if (isFunction(prop)) {
                            this[i] = prop;
                        } else {
                            this['_' + i] = prop;
                        }
                    }
                    this._config = config;
                    // Lenient ordinal parsing accepts just a number in addition to
                    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
                    // TODO: Remove "ordinalParse" fallback in next major release.
                    this._dayOfMonthOrdinalParseLenient = new RegExp(
                        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                        '|' + (/\d{1,2}/).source);
                }

                function mergeConfigs(parentConfig, childConfig) {
                    var res = extend({}, parentConfig), prop;
                    for (prop in childConfig) {
                        if (hasOwnProp(childConfig, prop)) {
                            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                                res[prop] = {};
                                extend(res[prop], parentConfig[prop]);
                                extend(res[prop], childConfig[prop]);
                            } else if (childConfig[prop] != null) {
                                res[prop] = childConfig[prop];
                            } else {
                                delete res[prop];
                            }
                        }
                    }
                    for (prop in parentConfig) {
                        if (hasOwnProp(parentConfig, prop) &&
                            !hasOwnProp(childConfig, prop) &&
                            isObject(parentConfig[prop])) {
                            // make sure changes to properties don't modify parent config
                            res[prop] = extend({}, res[prop]);
                        }
                    }
                    return res;
                }

                function Locale(config) {
                    if (config != null) {
                        this.set(config);
                    }
                }

                var keys;

                if (Object.keys) {
                    keys = Object.keys;
                } else {
                    keys = function (obj) {
                        var i, res = [];
                        for (i in obj) {
                            if (hasOwnProp(obj, i)) {
                                res.push(i);
                            }
                        }
                        return res;
                    };
                }

                var defaultCalendar = {
                    sameDay: '[Today at] LT',
                    nextDay: '[Tomorrow at] LT',
                    nextWeek: 'dddd [at] LT',
                    lastDay: '[Yesterday at] LT',
                    lastWeek: '[Last] dddd [at] LT',
                    sameElse: 'L'
                };

                function calendar(key, mom, now) {
                    var output = this._calendar[key] || this._calendar['sameElse'];
                    return isFunction(output) ? output.call(mom, now) : output;
                }

                var defaultLongDateFormat = {
                    LTS: 'h:mm:ss A',
                    LT: 'h:mm A',
                    L: 'MM/DD/YYYY',
                    LL: 'MMMM D, YYYY',
                    LLL: 'MMMM D, YYYY h:mm A',
                    LLLL: 'dddd, MMMM D, YYYY h:mm A'
                };

                function longDateFormat(key) {
                    var format = this._longDateFormat[key],
                        formatUpper = this._longDateFormat[key.toUpperCase()];

                    if (format || !formatUpper) {
                        return format;
                    }

                    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
                        return val.slice(1);
                    });

                    return this._longDateFormat[key];
                }

                var defaultInvalidDate = 'Invalid date';

                function invalidDate() {
                    return this._invalidDate;
                }

                var defaultOrdinal = '%d';
                var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

                function ordinal(number) {
                    return this._ordinal.replace('%d', number);
                }

                var defaultRelativeTime = {
                    future: 'in %s',
                    past: '%s ago',
                    s: 'a few seconds',
                    ss: '%d seconds',
                    m: 'a minute',
                    mm: '%d minutes',
                    h: 'an hour',
                    hh: '%d hours',
                    d: 'a day',
                    dd: '%d days',
                    M: 'a month',
                    MM: '%d months',
                    y: 'a year',
                    yy: '%d years'
                };

                function relativeTime(number, withoutSuffix, string, isFuture) {
                    var output = this._relativeTime[string];
                    return (isFunction(output)) ?
                        output(number, withoutSuffix, string, isFuture) :
                        output.replace(/%d/i, number);
                }

                function pastFuture(diff, output) {
                    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
                    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
                }

                var aliases = {};

                function addUnitAlias(unit, shorthand) {
                    var lowerCase = unit.toLowerCase();
                    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
                }

                function normalizeUnits(units) {
                    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
                }

                function normalizeObjectUnits(inputObject) {
                    var normalizedInput = {},
                        normalizedProp,
                        prop;

                    for (prop in inputObject) {
                        if (hasOwnProp(inputObject, prop)) {
                            normalizedProp = normalizeUnits(prop);
                            if (normalizedProp) {
                                normalizedInput[normalizedProp] = inputObject[prop];
                            }
                        }
                    }

                    return normalizedInput;
                }

                var priorities = {};

                function addUnitPriority(unit, priority) {
                    priorities[unit] = priority;
                }

                function getPrioritizedUnits(unitsObj) {
                    var units = [];
                    for (var u in unitsObj) {
                        units.push({unit: u, priority: priorities[u]});
                    }
                    units.sort(function (a, b) {
                        return a.priority - b.priority;
                    });
                    return units;
                }

                function zeroFill(number, targetLength, forceSign) {
                    var absNumber = '' + Math.abs(number),
                        zerosToFill = targetLength - absNumber.length,
                        sign = number >= 0;
                    return (sign ? (forceSign ? '+' : '') : '-') +
                        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
                }

                var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

                var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

                var formatFunctions = {};

                var formatTokenFunctions = {};

                // token:    'M'
                // padded:   ['MM', 2]
                // ordinal:  'Mo'
                // callback: function () { this.month() + 1 }
                function addFormatToken(token, padded, ordinal, callback) {
                    var func = callback;
                    if (typeof callback === 'string') {
                        func = function () {
                            return this[callback]();
                        };
                    }
                    if (token) {
                        formatTokenFunctions[token] = func;
                    }
                    if (padded) {
                        formatTokenFunctions[padded[0]] = function () {
                            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                        };
                    }
                    if (ordinal) {
                        formatTokenFunctions[ordinal] = function () {
                            return this.localeData().ordinal(func.apply(this, arguments), token);
                        };
                    }
                }

                function removeFormattingTokens(input) {
                    if (input.match(/\[[\s\S]/)) {
                        return input.replace(/^\[|\]$/g, '');
                    }
                    return input.replace(/\\/g, '');
                }

                function makeFormatFunction(format) {
                    var array = format.match(formattingTokens), i, length;

                    for (i = 0, length = array.length; i < length; i++) {
                        if (formatTokenFunctions[array[i]]) {
                            array[i] = formatTokenFunctions[array[i]];
                        } else {
                            array[i] = removeFormattingTokens(array[i]);
                        }
                    }

                    return function (mom) {
                        var output = '', i;
                        for (i = 0; i < length; i++) {
                            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
                        }
                        return output;
                    };
                }

                // format date using native date object
                function formatMoment(m, format) {
                    if (!m.isValid()) {
                        return m.localeData().invalidDate();
                    }

                    format = expandFormat(format, m.localeData());
                    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

                    return formatFunctions[format](m);
                }

                function expandFormat(format, locale) {
                    var i = 5;

                    function replaceLongDateFormatTokens(input) {
                        return locale.longDateFormat(input) || input;
                    }

                    localFormattingTokens.lastIndex = 0;
                    while (i >= 0 && localFormattingTokens.test(format)) {
                        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                        localFormattingTokens.lastIndex = 0;
                        i -= 1;
                    }

                    return format;
                }

                var match1 = /\d/;            //       0 - 9
                var match2 = /\d\d/;          //      00 - 99
                var match3 = /\d{3}/;         //     000 - 999
                var match4 = /\d{4}/;         //    0000 - 9999
                var match6 = /[+-]?\d{6}/;    // -999999 - 999999
                var match1to2 = /\d\d?/;         //       0 - 99
                var match3to4 = /\d\d\d\d?/;     //     999 - 9999
                var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
                var match1to3 = /\d{1,3}/;       //       0 - 999
                var match1to4 = /\d{1,4}/;       //       0 - 9999
                var match1to6 = /[+-]?\d{1,6}/;  // -999999 - 999999

                var matchUnsigned = /\d+/;           //       0 - inf
                var matchSigned = /[+-]?\d+/;      //    -inf - inf

                var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
                var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

                var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

                // any word (or two) characters or numbers including two/three word month in arabic.
                // includes scottish gaelic two word and hyphenated months
                var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

                var regexes = {};

                function addRegexToken(token, regex, strictRegex) {
                    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
                        return (isStrict && strictRegex) ? strictRegex : regex;
                    };
                }

                function getParseRegexForToken(token, config) {
                    if (!hasOwnProp(regexes, token)) {
                        return new RegExp(unescapeFormat(token));
                    }

                    return regexes[token](config._strict, config._locale);
                }

                // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
                function unescapeFormat(s) {
                    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
                        return p1 || p2 || p3 || p4;
                    }));
                }

                function regexEscape(s) {
                    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                }

                var tokens = {};

                function addParseToken(token, callback) {
                    var i, func = callback;
                    if (typeof token === 'string') {
                        token = [token];
                    }
                    if (isNumber(callback)) {
                        func = function (input, array) {
                            array[callback] = toInt(input);
                        };
                    }
                    for (i = 0; i < token.length; i++) {
                        tokens[token[i]] = func;
                    }
                }

                function addWeekParseToken(token, callback) {
                    addParseToken(token, function (input, array, config, token) {
                        config._w = config._w || {};
                        callback(input, config._w, config, token);
                    });
                }

                function addTimeToArrayFromToken(token, input, config) {
                    if (input != null && hasOwnProp(tokens, token)) {
                        tokens[token](input, config._a, config, token);
                    }
                }

                var YEAR = 0;
                var MONTH = 1;
                var DATE = 2;
                var HOUR = 3;
                var MINUTE = 4;
                var SECOND = 5;
                var MILLISECOND = 6;
                var WEEK = 7;
                var WEEKDAY = 8;

                // FORMATTING

                addFormatToken('Y', 0, 0, function () {
                    var y = this.year();
                    return y <= 9999 ? '' + y : '+' + y;
                });

                addFormatToken(0, ['YY', 2], 0, function () {
                    return this.year() % 100;
                });

                addFormatToken(0, ['YYYY', 4], 0, 'year');
                addFormatToken(0, ['YYYYY', 5], 0, 'year');
                addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

                // ALIASES

                addUnitAlias('year', 'y');

                // PRIORITIES

                addUnitPriority('year', 1);

                // PARSING

                addRegexToken('Y', matchSigned);
                addRegexToken('YY', match1to2, match2);
                addRegexToken('YYYY', match1to4, match4);
                addRegexToken('YYYYY', match1to6, match6);
                addRegexToken('YYYYYY', match1to6, match6);

                addParseToken(['YYYYY', 'YYYYYY'], YEAR);
                addParseToken('YYYY', function (input, array) {
                    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
                });
                addParseToken('YY', function (input, array) {
                    array[YEAR] = hooks.parseTwoDigitYear(input);
                });
                addParseToken('Y', function (input, array) {
                    array[YEAR] = parseInt(input, 10);
                });

                // HELPERS

                function daysInYear(year) {
                    return isLeapYear(year) ? 366 : 365;
                }

                function isLeapYear(year) {
                    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
                }

                // HOOKS

                hooks.parseTwoDigitYear = function (input) {
                    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
                };

                // MOMENTS

                var getSetYear = makeGetSet('FullYear', true);

                function getIsLeapYear() {
                    return isLeapYear(this.year());
                }

                function makeGetSet(unit, keepTime) {
                    return function (value) {
                        if (value != null) {
                            set$1(this, unit, value);
                            hooks.updateOffset(this, keepTime);
                            return this;
                        } else {
                            return get(this, unit);
                        }
                    };
                }

                function get(mom, unit) {
                    return mom.isValid() ?
                        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
                }

                function set$1(mom, unit, value) {
                    if (mom.isValid() && !isNaN(value)) {
                        if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
                        }
                        else {
                            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                        }
                    }
                }

                // MOMENTS

                function stringGet(units) {
                    units = normalizeUnits(units);
                    if (isFunction(this[units])) {
                        return this[units]();
                    }
                    return this;
                }


                function stringSet(units, value) {
                    if (typeof units === 'object') {
                        units = normalizeObjectUnits(units);
                        var prioritized = getPrioritizedUnits(units);
                        for (var i = 0; i < prioritized.length; i++) {
                            this[prioritized[i].unit](units[prioritized[i].unit]);
                        }
                    } else {
                        units = normalizeUnits(units);
                        if (isFunction(this[units])) {
                            return this[units](value);
                        }
                    }
                    return this;
                }

                function mod(n, x) {
                    return ((n % x) + x) % x;
                }

                var indexOf;

                if (Array.prototype.indexOf) {
                    indexOf = Array.prototype.indexOf;
                } else {
                    indexOf = function (o) {
                        // I know
                        var i;
                        for (i = 0; i < this.length; ++i) {
                            if (this[i] === o) {
                                return i;
                            }
                        }
                        return -1;
                    };
                }

                function daysInMonth(year, month) {
                    if (isNaN(year) || isNaN(month)) {
                        return NaN;
                    }
                    var modMonth = mod(month, 12);
                    year += (month - modMonth) / 12;
                    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
                }

                // FORMATTING

                addFormatToken('M', ['MM', 2], 'Mo', function () {
                    return this.month() + 1;
                });

                addFormatToken('MMM', 0, 0, function (format) {
                    return this.localeData().monthsShort(this, format);
                });

                addFormatToken('MMMM', 0, 0, function (format) {
                    return this.localeData().months(this, format);
                });

                // ALIASES

                addUnitAlias('month', 'M');

                // PRIORITY

                addUnitPriority('month', 8);

                // PARSING

                addRegexToken('M', match1to2);
                addRegexToken('MM', match1to2, match2);
                addRegexToken('MMM', function (isStrict, locale) {
                    return locale.monthsShortRegex(isStrict);
                });
                addRegexToken('MMMM', function (isStrict, locale) {
                    return locale.monthsRegex(isStrict);
                });

                addParseToken(['M', 'MM'], function (input, array) {
                    array[MONTH] = toInt(input) - 1;
                });

                addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
                    var month = config._locale.monthsParse(input, token, config._strict);
                    // if we didn't find a month name, mark the date as invalid.
                    if (month != null) {
                        array[MONTH] = month;
                    } else {
                        getParsingFlags(config).invalidMonth = input;
                    }
                });

                // LOCALES

                var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
                var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

                function localeMonths(m, format) {
                    if (!m) {
                        return isArray(this._months) ? this._months :
                            this._months['standalone'];
                    }
                    return isArray(this._months) ? this._months[m.month()] :
                        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
                }

                var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

                function localeMonthsShort(m, format) {
                    if (!m) {
                        return isArray(this._monthsShort) ? this._monthsShort :
                            this._monthsShort['standalone'];
                    }
                    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
                        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
                }

                function handleStrictParse(monthName, format, strict) {
                    var i, ii, mom, llc = monthName.toLocaleLowerCase();
                    if (!this._monthsParse) {
                        // this is not used
                        this._monthsParse = [];
                        this._longMonthsParse = [];
                        this._shortMonthsParse = [];
                        for (i = 0; i < 12; ++i) {
                            mom = createUTC([2000, i]);
                            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                        }
                    }

                    if (strict) {
                        if (format === 'MMM') {
                            ii = indexOf.call(this._shortMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._longMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    } else {
                        if (format === 'MMM') {
                            ii = indexOf.call(this._shortMonthsParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._longMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._longMonthsParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._shortMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    }
                }

                function localeMonthsParse(monthName, format, strict) {
                    var i, mom, regex;

                    if (this._monthsParseExact) {
                        return handleStrictParse.call(this, monthName, format, strict);
                    }

                    if (!this._monthsParse) {
                        this._monthsParse = [];
                        this._longMonthsParse = [];
                        this._shortMonthsParse = [];
                    }

                    // TODO: add sorting
                    // Sorting makes sure if one month (or abbr) is a prefix of another
                    // see sorting in computeMonthsParse
                    for (i = 0; i < 12; i++) {
                        // make the regex if we don't have it already
                        mom = createUTC([2000, i]);
                        if (strict && !this._longMonthsParse[i]) {
                            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                        }
                        if (!strict && !this._monthsParse[i]) {
                            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                        }
                        // test the regex
                        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                            return i;
                        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                            return i;
                        } else if (!strict && this._monthsParse[i].test(monthName)) {
                            return i;
                        }
                    }
                }

                // MOMENTS

                function setMonth(mom, value) {
                    var dayOfMonth;

                    if (!mom.isValid()) {
                        // No op
                        return mom;
                    }

                    if (typeof value === 'string') {
                        if (/^\d+$/.test(value)) {
                            value = toInt(value);
                        } else {
                            value = mom.localeData().monthsParse(value);
                            // TODO: Another silent failure?
                            if (!isNumber(value)) {
                                return mom;
                            }
                        }
                    }

                    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
                    return mom;
                }

                function getSetMonth(value) {
                    if (value != null) {
                        setMonth(this, value);
                        hooks.updateOffset(this, true);
                        return this;
                    } else {
                        return get(this, 'Month');
                    }
                }

                function getDaysInMonth() {
                    return daysInMonth(this.year(), this.month());
                }

                var defaultMonthsShortRegex = matchWord;

                function monthsShortRegex(isStrict) {
                    if (this._monthsParseExact) {
                        if (!hasOwnProp(this, '_monthsRegex')) {
                            computeMonthsParse.call(this);
                        }
                        if (isStrict) {
                            return this._monthsShortStrictRegex;
                        } else {
                            return this._monthsShortRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_monthsShortRegex')) {
                            this._monthsShortRegex = defaultMonthsShortRegex;
                        }
                        return this._monthsShortStrictRegex && isStrict ?
                            this._monthsShortStrictRegex : this._monthsShortRegex;
                    }
                }

                var defaultMonthsRegex = matchWord;

                function monthsRegex(isStrict) {
                    if (this._monthsParseExact) {
                        if (!hasOwnProp(this, '_monthsRegex')) {
                            computeMonthsParse.call(this);
                        }
                        if (isStrict) {
                            return this._monthsStrictRegex;
                        } else {
                            return this._monthsRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_monthsRegex')) {
                            this._monthsRegex = defaultMonthsRegex;
                        }
                        return this._monthsStrictRegex && isStrict ?
                            this._monthsStrictRegex : this._monthsRegex;
                    }
                }

                function computeMonthsParse() {
                    function cmpLenRev(a, b) {
                        return b.length - a.length;
                    }

                    var shortPieces = [], longPieces = [], mixedPieces = [],
                        i, mom;
                    for (i = 0; i < 12; i++) {
                        // make the regex if we don't have it already
                        mom = createUTC([2000, i]);
                        shortPieces.push(this.monthsShort(mom, ''));
                        longPieces.push(this.months(mom, ''));
                        mixedPieces.push(this.months(mom, ''));
                        mixedPieces.push(this.monthsShort(mom, ''));
                    }
                    // Sorting makes sure if one month (or abbr) is a prefix of another it
                    // will match the longer piece.
                    shortPieces.sort(cmpLenRev);
                    longPieces.sort(cmpLenRev);
                    mixedPieces.sort(cmpLenRev);
                    for (i = 0; i < 12; i++) {
                        shortPieces[i] = regexEscape(shortPieces[i]);
                        longPieces[i] = regexEscape(longPieces[i]);
                    }
                    for (i = 0; i < 24; i++) {
                        mixedPieces[i] = regexEscape(mixedPieces[i]);
                    }

                    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                    this._monthsShortRegex = this._monthsRegex;
                    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
                    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
                }

                function createDate(y, m, d, h, M, s, ms) {
                    // can't just apply() to create a date:
                    // https://stackoverflow.com/q/181348
                    var date = new Date(y, m, d, h, M, s, ms);

                    // the date constructor remaps years 0-99 to 1900-1999
                    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
                        date.setFullYear(y);
                    }
                    return date;
                }

                function createUTCDate(y) {
                    var date = new Date(Date.UTC.apply(null, arguments));

                    // the Date.UTC function remaps years 0-99 to 1900-1999
                    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
                        date.setUTCFullYear(y);
                    }
                    return date;
                }

                // start-of-first-week - start-of-year
                function firstWeekOffset(year, dow, doy) {
                    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                        fwd = 7 + dow - doy,
                        // first-week day local weekday -- which local weekday is fwd
                        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

                    return -fwdlw + fwd - 1;
                }

                // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
                function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
                    var localWeekday = (7 + weekday - dow) % 7,
                        weekOffset = firstWeekOffset(year, dow, doy),
                        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                        resYear, resDayOfYear;

                    if (dayOfYear <= 0) {
                        resYear = year - 1;
                        resDayOfYear = daysInYear(resYear) + dayOfYear;
                    } else if (dayOfYear > daysInYear(year)) {
                        resYear = year + 1;
                        resDayOfYear = dayOfYear - daysInYear(year);
                    } else {
                        resYear = year;
                        resDayOfYear = dayOfYear;
                    }

                    return {
                        year: resYear,
                        dayOfYear: resDayOfYear
                    };
                }

                function weekOfYear(mom, dow, doy) {
                    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                        resWeek, resYear;

                    if (week < 1) {
                        resYear = mom.year() - 1;
                        resWeek = week + weeksInYear(resYear, dow, doy);
                    } else if (week > weeksInYear(mom.year(), dow, doy)) {
                        resWeek = week - weeksInYear(mom.year(), dow, doy);
                        resYear = mom.year() + 1;
                    } else {
                        resYear = mom.year();
                        resWeek = week;
                    }

                    return {
                        week: resWeek,
                        year: resYear
                    };
                }

                function weeksInYear(year, dow, doy) {
                    var weekOffset = firstWeekOffset(year, dow, doy),
                        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
                    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
                }

                // FORMATTING

                addFormatToken('w', ['ww', 2], 'wo', 'week');
                addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

                // ALIASES

                addUnitAlias('week', 'w');
                addUnitAlias('isoWeek', 'W');

                // PRIORITIES

                addUnitPriority('week', 5);
                addUnitPriority('isoWeek', 5);

                // PARSING

                addRegexToken('w', match1to2);
                addRegexToken('ww', match1to2, match2);
                addRegexToken('W', match1to2);
                addRegexToken('WW', match1to2, match2);

                addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
                    week[token.substr(0, 1)] = toInt(input);
                });

                // HELPERS

                // LOCALES

                function localeWeek(mom) {
                    return weekOfYear(mom, this._week.dow, this._week.doy).week;
                }

                var defaultLocaleWeek = {
                    dow: 0, // Sunday is the first day of the week.
                    doy: 6  // The week that contains Jan 1st is the first week of the year.
                };

                function localeFirstDayOfWeek() {
                    return this._week.dow;
                }

                function localeFirstDayOfYear() {
                    return this._week.doy;
                }

                // MOMENTS

                function getSetWeek(input) {
                    var week = this.localeData().week(this);
                    return input == null ? week : this.add((input - week) * 7, 'd');
                }

                function getSetISOWeek(input) {
                    var week = weekOfYear(this, 1, 4).week;
                    return input == null ? week : this.add((input - week) * 7, 'd');
                }

                // FORMATTING

                addFormatToken('d', 0, 'do', 'day');

                addFormatToken('dd', 0, 0, function (format) {
                    return this.localeData().weekdaysMin(this, format);
                });

                addFormatToken('ddd', 0, 0, function (format) {
                    return this.localeData().weekdaysShort(this, format);
                });

                addFormatToken('dddd', 0, 0, function (format) {
                    return this.localeData().weekdays(this, format);
                });

                addFormatToken('e', 0, 0, 'weekday');
                addFormatToken('E', 0, 0, 'isoWeekday');

                // ALIASES

                addUnitAlias('day', 'd');
                addUnitAlias('weekday', 'e');
                addUnitAlias('isoWeekday', 'E');

                // PRIORITY
                addUnitPriority('day', 11);
                addUnitPriority('weekday', 11);
                addUnitPriority('isoWeekday', 11);

                // PARSING

                addRegexToken('d', match1to2);
                addRegexToken('e', match1to2);
                addRegexToken('E', match1to2);
                addRegexToken('dd', function (isStrict, locale) {
                    return locale.weekdaysMinRegex(isStrict);
                });
                addRegexToken('ddd', function (isStrict, locale) {
                    return locale.weekdaysShortRegex(isStrict);
                });
                addRegexToken('dddd', function (isStrict, locale) {
                    return locale.weekdaysRegex(isStrict);
                });

                addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
                    var weekday = config._locale.weekdaysParse(input, token, config._strict);
                    // if we didn't get a weekday name, mark the date as invalid
                    if (weekday != null) {
                        week.d = weekday;
                    } else {
                        getParsingFlags(config).invalidWeekday = input;
                    }
                });

                addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
                    week[token] = toInt(input);
                });

                // HELPERS

                function parseWeekday(input, locale) {
                    if (typeof input !== 'string') {
                        return input;
                    }

                    if (!isNaN(input)) {
                        return parseInt(input, 10);
                    }

                    input = locale.weekdaysParse(input);
                    if (typeof input === 'number') {
                        return input;
                    }

                    return null;
                }

                function parseIsoWeekday(input, locale) {
                    if (typeof input === 'string') {
                        return locale.weekdaysParse(input) % 7 || 7;
                    }
                    return isNaN(input) ? null : input;
                }

                // LOCALES

                var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

                function localeWeekdays(m, format) {
                    if (!m) {
                        return isArray(this._weekdays) ? this._weekdays :
                            this._weekdays['standalone'];
                    }
                    return isArray(this._weekdays) ? this._weekdays[m.day()] :
                        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
                }

                var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

                function localeWeekdaysShort(m) {
                    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
                }

                var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

                function localeWeekdaysMin(m) {
                    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
                }

                function handleStrictParse$1(weekdayName, format, strict) {
                    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
                    if (!this._weekdaysParse) {
                        this._weekdaysParse = [];
                        this._shortWeekdaysParse = [];
                        this._minWeekdaysParse = [];

                        for (i = 0; i < 7; ++i) {
                            mom = createUTC([2000, 1]).day(i);
                            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                        }
                    }

                    if (strict) {
                        if (format === 'dddd') {
                            ii = indexOf.call(this._weekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        } else if (format === 'ddd') {
                            ii = indexOf.call(this._shortWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._minWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    } else {
                        if (format === 'dddd') {
                            ii = indexOf.call(this._weekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._shortWeekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._minWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        } else if (format === 'ddd') {
                            ii = indexOf.call(this._shortWeekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._weekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._minWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._minWeekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._weekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._shortWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    }
                }

                function localeWeekdaysParse(weekdayName, format, strict) {
                    var i, mom, regex;

                    if (this._weekdaysParseExact) {
                        return handleStrictParse$1.call(this, weekdayName, format, strict);
                    }

                    if (!this._weekdaysParse) {
                        this._weekdaysParse = [];
                        this._minWeekdaysParse = [];
                        this._shortWeekdaysParse = [];
                        this._fullWeekdaysParse = [];
                    }

                    for (i = 0; i < 7; i++) {
                        // make the regex if we don't have it already

                        mom = createUTC([2000, 1]).day(i);
                        if (strict && !this._fullWeekdaysParse[i]) {
                            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
                        }
                        if (!this._weekdaysParse[i]) {
                            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                        }
                        // test the regex
                        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                            return i;
                        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                            return i;
                        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                            return i;
                        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                            return i;
                        }
                    }
                }

                // MOMENTS

                function getSetDayOfWeek(input) {
                    if (!this.isValid()) {
                        return input != null ? this : NaN;
                    }
                    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                    if (input != null) {
                        input = parseWeekday(input, this.localeData());
                        return this.add(input - day, 'd');
                    } else {
                        return day;
                    }
                }

                function getSetLocaleDayOfWeek(input) {
                    if (!this.isValid()) {
                        return input != null ? this : NaN;
                    }
                    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                    return input == null ? weekday : this.add(input - weekday, 'd');
                }

                function getSetISODayOfWeek(input) {
                    if (!this.isValid()) {
                        return input != null ? this : NaN;
                    }

                    // behaves the same as moment#day except
                    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
                    // as a setter, sunday should belong to the previous week.

                    if (input != null) {
                        var weekday = parseIsoWeekday(input, this.localeData());
                        return this.day(this.day() % 7 ? weekday : weekday - 7);
                    } else {
                        return this.day() || 7;
                    }
                }

                var defaultWeekdaysRegex = matchWord;

                function weekdaysRegex(isStrict) {
                    if (this._weekdaysParseExact) {
                        if (!hasOwnProp(this, '_weekdaysRegex')) {
                            computeWeekdaysParse.call(this);
                        }
                        if (isStrict) {
                            return this._weekdaysStrictRegex;
                        } else {
                            return this._weekdaysRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_weekdaysRegex')) {
                            this._weekdaysRegex = defaultWeekdaysRegex;
                        }
                        return this._weekdaysStrictRegex && isStrict ?
                            this._weekdaysStrictRegex : this._weekdaysRegex;
                    }
                }

                var defaultWeekdaysShortRegex = matchWord;

                function weekdaysShortRegex(isStrict) {
                    if (this._weekdaysParseExact) {
                        if (!hasOwnProp(this, '_weekdaysRegex')) {
                            computeWeekdaysParse.call(this);
                        }
                        if (isStrict) {
                            return this._weekdaysShortStrictRegex;
                        } else {
                            return this._weekdaysShortRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                        }
                        return this._weekdaysShortStrictRegex && isStrict ?
                            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
                    }
                }

                var defaultWeekdaysMinRegex = matchWord;

                function weekdaysMinRegex(isStrict) {
                    if (this._weekdaysParseExact) {
                        if (!hasOwnProp(this, '_weekdaysRegex')) {
                            computeWeekdaysParse.call(this);
                        }
                        if (isStrict) {
                            return this._weekdaysMinStrictRegex;
                        } else {
                            return this._weekdaysMinRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                        }
                        return this._weekdaysMinStrictRegex && isStrict ?
                            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
                    }
                }


                function computeWeekdaysParse() {
                    function cmpLenRev(a, b) {
                        return b.length - a.length;
                    }

                    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
                        i, mom, minp, shortp, longp;
                    for (i = 0; i < 7; i++) {
                        // make the regex if we don't have it already
                        mom = createUTC([2000, 1]).day(i);
                        minp = this.weekdaysMin(mom, '');
                        shortp = this.weekdaysShort(mom, '');
                        longp = this.weekdays(mom, '');
                        minPieces.push(minp);
                        shortPieces.push(shortp);
                        longPieces.push(longp);
                        mixedPieces.push(minp);
                        mixedPieces.push(shortp);
                        mixedPieces.push(longp);
                    }
                    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
                    // will match the longer piece.
                    minPieces.sort(cmpLenRev);
                    shortPieces.sort(cmpLenRev);
                    longPieces.sort(cmpLenRev);
                    mixedPieces.sort(cmpLenRev);
                    for (i = 0; i < 7; i++) {
                        shortPieces[i] = regexEscape(shortPieces[i]);
                        longPieces[i] = regexEscape(longPieces[i]);
                        mixedPieces[i] = regexEscape(mixedPieces[i]);
                    }

                    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                    this._weekdaysShortRegex = this._weekdaysRegex;
                    this._weekdaysMinRegex = this._weekdaysRegex;

                    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
                    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
                    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
                }

                // FORMATTING

                function hFormat() {
                    return this.hours() % 12 || 12;
                }

                function kFormat() {
                    return this.hours() || 24;
                }

                addFormatToken('H', ['HH', 2], 0, 'hour');
                addFormatToken('h', ['hh', 2], 0, hFormat);
                addFormatToken('k', ['kk', 2], 0, kFormat);

                addFormatToken('hmm', 0, 0, function () {
                    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
                });

                addFormatToken('hmmss', 0, 0, function () {
                    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
                        zeroFill(this.seconds(), 2);
                });

                addFormatToken('Hmm', 0, 0, function () {
                    return '' + this.hours() + zeroFill(this.minutes(), 2);
                });

                addFormatToken('Hmmss', 0, 0, function () {
                    return '' + this.hours() + zeroFill(this.minutes(), 2) +
                        zeroFill(this.seconds(), 2);
                });

                function meridiem(token, lowercase) {
                    addFormatToken(token, 0, 0, function () {
                        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
                    });
                }

                meridiem('a', true);
                meridiem('A', false);

                // ALIASES

                addUnitAlias('hour', 'h');

                // PRIORITY
                addUnitPriority('hour', 13);

                // PARSING

                function matchMeridiem(isStrict, locale) {
                    return locale._meridiemParse;
                }

                addRegexToken('a', matchMeridiem);
                addRegexToken('A', matchMeridiem);
                addRegexToken('H', match1to2);
                addRegexToken('h', match1to2);
                addRegexToken('k', match1to2);
                addRegexToken('HH', match1to2, match2);
                addRegexToken('hh', match1to2, match2);
                addRegexToken('kk', match1to2, match2);

                addRegexToken('hmm', match3to4);
                addRegexToken('hmmss', match5to6);
                addRegexToken('Hmm', match3to4);
                addRegexToken('Hmmss', match5to6);

                addParseToken(['H', 'HH'], HOUR);
                addParseToken(['k', 'kk'], function (input, array, config) {
                    var kInput = toInt(input);
                    array[HOUR] = kInput === 24 ? 0 : kInput;
                });
                addParseToken(['a', 'A'], function (input, array, config) {
                    config._isPm = config._locale.isPM(input);
                    config._meridiem = input;
                });
                addParseToken(['h', 'hh'], function (input, array, config) {
                    array[HOUR] = toInt(input);
                    getParsingFlags(config).bigHour = true;
                });
                addParseToken('hmm', function (input, array, config) {
                    var pos = input.length - 2;
                    array[HOUR] = toInt(input.substr(0, pos));
                    array[MINUTE] = toInt(input.substr(pos));
                    getParsingFlags(config).bigHour = true;
                });
                addParseToken('hmmss', function (input, array, config) {
                    var pos1 = input.length - 4;
                    var pos2 = input.length - 2;
                    array[HOUR] = toInt(input.substr(0, pos1));
                    array[MINUTE] = toInt(input.substr(pos1, 2));
                    array[SECOND] = toInt(input.substr(pos2));
                    getParsingFlags(config).bigHour = true;
                });
                addParseToken('Hmm', function (input, array, config) {
                    var pos = input.length - 2;
                    array[HOUR] = toInt(input.substr(0, pos));
                    array[MINUTE] = toInt(input.substr(pos));
                });
                addParseToken('Hmmss', function (input, array, config) {
                    var pos1 = input.length - 4;
                    var pos2 = input.length - 2;
                    array[HOUR] = toInt(input.substr(0, pos1));
                    array[MINUTE] = toInt(input.substr(pos1, 2));
                    array[SECOND] = toInt(input.substr(pos2));
                });

                // LOCALES

                function localeIsPM(input) {
                    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
                    // Using charAt should be more compatible.
                    return ((input + '').toLowerCase().charAt(0) === 'p');
                }

                var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

                function localeMeridiem(hours, minutes, isLower) {
                    if (hours > 11) {
                        return isLower ? 'pm' : 'PM';
                    } else {
                        return isLower ? 'am' : 'AM';
                    }
                }


                // MOMENTS

                // Setting the hour should keep the time, because the user explicitly
                // specified which hour they want. So trying to maintain the same hour (in
                // a new timezone) makes sense. Adding/subtracting hours does not follow
                // this rule.
                var getSetHour = makeGetSet('Hours', true);

                var baseConfig = {
                    calendar: defaultCalendar,
                    longDateFormat: defaultLongDateFormat,
                    invalidDate: defaultInvalidDate,
                    ordinal: defaultOrdinal,
                    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
                    relativeTime: defaultRelativeTime,

                    months: defaultLocaleMonths,
                    monthsShort: defaultLocaleMonthsShort,

                    week: defaultLocaleWeek,

                    weekdays: defaultLocaleWeekdays,
                    weekdaysMin: defaultLocaleWeekdaysMin,
                    weekdaysShort: defaultLocaleWeekdaysShort,

                    meridiemParse: defaultLocaleMeridiemParse
                };

                // internal storage for locale config files
                var locales = {};
                var localeFamilies = {};
                var globalLocale;

                function normalizeLocale(key) {
                    return key ? key.toLowerCase().replace('_', '-') : key;
                }

                // pick the locale from the array
                // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
                // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
                function chooseLocale(names) {
                    var i = 0, j, next, locale, split;

                    while (i < names.length) {
                        split = normalizeLocale(names[i]).split('-');
                        j = split.length;
                        next = normalizeLocale(names[i + 1]);
                        next = next ? next.split('-') : null;
                        while (j > 0) {
                            locale = loadLocale(split.slice(0, j).join('-'));
                            if (locale) {
                                return locale;
                            }
                            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                                //the next array item is better than a shallower substring of this one
                                break;
                            }
                            j--;
                        }
                        i++;
                    }
                    return globalLocale;
                }

                function loadLocale(name) {
                    var oldLocale = null;
                    // TODO: Find a better way to register and load all the locales in Node
                    if (!locales[name] && (typeof module !== 'undefined') &&
                        module && module.exports) {
                        try {
                            oldLocale = globalLocale._abbr;
                            var aliasedRequire = require;
                            aliasedRequire('./locale/' + name);
                            getSetGlobalLocale(oldLocale);
                        } catch (e) {
                        }
                    }
                    return locales[name];
                }

                // This function will load locale and then set the global locale.  If
                // no arguments are passed in, it will simply return the current global
                // locale key.
                function getSetGlobalLocale(key, values) {
                    var data;
                    if (key) {
                        if (isUndefined(values)) {
                            data = getLocale(key);
                        }
                        else {
                            data = defineLocale(key, values);
                        }

                        if (data) {
                            // moment.duration._locale = moment._locale = data;
                            globalLocale = data;
                        }
                        else {
                            if ((typeof console !== 'undefined') && console.warn) {
                                //warn user if arguments are passed but the locale could not be set
                                console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                            }
                        }
                    }

                    return globalLocale._abbr;
                }

                function defineLocale(name, config) {
                    if (config !== null) {
                        var locale, parentConfig = baseConfig;
                        config.abbr = name;
                        if (locales[name] != null) {
                            deprecateSimple('defineLocaleOverride',
                                'use moment.updateLocale(localeName, config) to change ' +
                                'an existing locale. moment.defineLocale(localeName, ' +
                                'config) should only be used for creating a new locale ' +
                                'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                            parentConfig = locales[name]._config;
                        } else if (config.parentLocale != null) {
                            if (locales[config.parentLocale] != null) {
                                parentConfig = locales[config.parentLocale]._config;
                            } else {
                                locale = loadLocale(config.parentLocale);
                                if (locale != null) {
                                    parentConfig = locale._config;
                                } else {
                                    if (!localeFamilies[config.parentLocale]) {
                                        localeFamilies[config.parentLocale] = [];
                                    }
                                    localeFamilies[config.parentLocale].push({
                                        name: name,
                                        config: config
                                    });
                                    return null;
                                }
                            }
                        }
                        locales[name] = new Locale(mergeConfigs(parentConfig, config));

                        if (localeFamilies[name]) {
                            localeFamilies[name].forEach(function (x) {
                                defineLocale(x.name, x.config);
                            });
                        }

                        // backwards compat for now: also set the locale
                        // make sure we set the locale AFTER all child locales have been
                        // created, so we won't end up with the child locale set.
                        getSetGlobalLocale(name);


                        return locales[name];
                    } else {
                        // useful for testing
                        delete locales[name];
                        return null;
                    }
                }

                function updateLocale(name, config) {
                    if (config != null) {
                        var locale, tmpLocale, parentConfig = baseConfig;
                        // MERGE
                        tmpLocale = loadLocale(name);
                        if (tmpLocale != null) {
                            parentConfig = tmpLocale._config;
                        }
                        config = mergeConfigs(parentConfig, config);
                        locale = new Locale(config);
                        locale.parentLocale = locales[name];
                        locales[name] = locale;

                        // backwards compat for now: also set the locale
                        getSetGlobalLocale(name);
                    } else {
                        // pass null for config to unupdate, useful for tests
                        if (locales[name] != null) {
                            if (locales[name].parentLocale != null) {
                                locales[name] = locales[name].parentLocale;
                            } else if (locales[name] != null) {
                                delete locales[name];
                            }
                        }
                    }
                    return locales[name];
                }

                // returns locale data
                function getLocale(key) {
                    var locale;

                    if (key && key._locale && key._locale._abbr) {
                        key = key._locale._abbr;
                    }

                    if (!key) {
                        return globalLocale;
                    }

                    if (!isArray(key)) {
                        //short-circuit everything else
                        locale = loadLocale(key);
                        if (locale) {
                            return locale;
                        }
                        key = [key];
                    }

                    return chooseLocale(key);
                }

                function listLocales() {
                    return keys(locales);
                }

                function checkOverflow(m) {
                    var overflow;
                    var a = m._a;

                    if (a && getParsingFlags(m).overflow === -2) {
                        overflow =
                            a[MONTH] < 0 || a[MONTH] > 11 ? MONTH :
                                a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                                    a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                                        a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE :
                                            a[SECOND] < 0 || a[SECOND] > 59 ? SECOND :
                                                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                                                    -1;

                        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                            overflow = DATE;
                        }
                        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                            overflow = WEEK;
                        }
                        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                            overflow = WEEKDAY;
                        }

                        getParsingFlags(m).overflow = overflow;
                    }

                    return m;
                }

                // Pick the first defined of two or three arguments.
                function defaults(a, b, c) {
                    if (a != null) {
                        return a;
                    }
                    if (b != null) {
                        return b;
                    }
                    return c;
                }

                function currentDateArray(config) {
                    // hooks is actually the exported moment object
                    var nowValue = new Date(hooks.now());
                    if (config._useUTC) {
                        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
                    }
                    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
                }

                // convert an array to a date.
                // the array should mirror the parameters below
                // note: all values past the year are optional and will default to the lowest possible value.
                // [year, month, day , hour, minute, second, millisecond]
                function configFromArray(config) {
                    var i, date, input = [], currentDate, expectedWeekday, yearToUse;

                    if (config._d) {
                        return;
                    }

                    currentDate = currentDateArray(config);

                    //compute day of the year from weeks and weekdays
                    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                        dayOfYearFromWeekInfo(config);
                    }

                    //if the day of the year is set, figure out what it is
                    if (config._dayOfYear != null) {
                        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                            getParsingFlags(config)._overflowDayOfYear = true;
                        }

                        date = createUTCDate(yearToUse, 0, config._dayOfYear);
                        config._a[MONTH] = date.getUTCMonth();
                        config._a[DATE] = date.getUTCDate();
                    }

                    // Default to current date.
                    // * if no year, month, day of month are given, default to today
                    // * if day of month is given, default month and year
                    // * if month is given, default only year
                    // * if year is given, don't default anything
                    for (i = 0; i < 3 && config._a[i] == null; ++i) {
                        config._a[i] = input[i] = currentDate[i];
                    }

                    // Zero out whatever was not defaulted, including time
                    for (; i < 7; i++) {
                        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
                    }

                    // Check for 24:00:00.000
                    if (config._a[HOUR] === 24 &&
                        config._a[MINUTE] === 0 &&
                        config._a[SECOND] === 0 &&
                        config._a[MILLISECOND] === 0) {
                        config._nextDay = true;
                        config._a[HOUR] = 0;
                    }

                    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
                    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

                    // Apply timezone offset from input. The actual utcOffset can be changed
                    // with parseZone.
                    if (config._tzm != null) {
                        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
                    }

                    if (config._nextDay) {
                        config._a[HOUR] = 24;
                    }

                    // check for mismatching day of week
                    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
                        getParsingFlags(config).weekdayMismatch = true;
                    }
                }

                function dayOfYearFromWeekInfo(config) {
                    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

                    w = config._w;
                    if (w.GG != null || w.W != null || w.E != null) {
                        dow = 1;
                        doy = 4;

                        // TODO: We need to take the current isoWeekYear, but that depends on
                        // how we interpret now (local, utc, fixed offset). So create
                        // a now version of current config (take local/utc/offset flags, and
                        // create now).
                        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                        week = defaults(w.W, 1);
                        weekday = defaults(w.E, 1);
                        if (weekday < 1 || weekday > 7) {
                            weekdayOverflow = true;
                        }
                    } else {
                        dow = config._locale._week.dow;
                        doy = config._locale._week.doy;

                        var curWeek = weekOfYear(createLocal(), dow, doy);

                        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                        // Default to current week.
                        week = defaults(w.w, curWeek.week);

                        if (w.d != null) {
                            // weekday -- low day numbers are considered next week
                            weekday = w.d;
                            if (weekday < 0 || weekday > 6) {
                                weekdayOverflow = true;
                            }
                        } else if (w.e != null) {
                            // local weekday -- counting starts from begining of week
                            weekday = w.e + dow;
                            if (w.e < 0 || w.e > 6) {
                                weekdayOverflow = true;
                            }
                        } else {
                            // default to begining of week
                            weekday = dow;
                        }
                    }
                    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                        getParsingFlags(config)._overflowWeeks = true;
                    } else if (weekdayOverflow != null) {
                        getParsingFlags(config)._overflowWeekday = true;
                    } else {
                        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                        config._a[YEAR] = temp.year;
                        config._dayOfYear = temp.dayOfYear;
                    }
                }

                // iso 8601 regex
                // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
                var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
                var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

                var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

                var isoDates = [
                    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                    ['YYYY-DDD', /\d{4}-\d{3}/],
                    ['YYYY-MM', /\d{4}-\d\d/, false],
                    ['YYYYYYMMDD', /[+-]\d{10}/],
                    ['YYYYMMDD', /\d{8}/],
                    // YYYYMM is NOT allowed by the standard
                    ['GGGG[W]WWE', /\d{4}W\d{3}/],
                    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                    ['YYYYDDD', /\d{7}/]
                ];

                // iso time formats and regexes
                var isoTimes = [
                    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                    ['HH:mm', /\d\d:\d\d/],
                    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                    ['HHmmss', /\d\d\d\d\d\d/],
                    ['HHmm', /\d\d\d\d/],
                    ['HH', /\d\d/]
                ];

                var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

                // date from iso format
                function configFromISO(config) {
                    var i, l,
                        string = config._i,
                        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                        allowTime, dateFormat, timeFormat, tzFormat;

                    if (match) {
                        getParsingFlags(config).iso = true;

                        for (i = 0, l = isoDates.length; i < l; i++) {
                            if (isoDates[i][1].exec(match[1])) {
                                dateFormat = isoDates[i][0];
                                allowTime = isoDates[i][2] !== false;
                                break;
                            }
                        }
                        if (dateFormat == null) {
                            config._isValid = false;
                            return;
                        }
                        if (match[3]) {
                            for (i = 0, l = isoTimes.length; i < l; i++) {
                                if (isoTimes[i][1].exec(match[3])) {
                                    // match[2] should be 'T' or space
                                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                                    break;
                                }
                            }
                            if (timeFormat == null) {
                                config._isValid = false;
                                return;
                            }
                        }
                        if (!allowTime && timeFormat != null) {
                            config._isValid = false;
                            return;
                        }
                        if (match[4]) {
                            if (tzRegex.exec(match[4])) {
                                tzFormat = 'Z';
                            } else {
                                config._isValid = false;
                                return;
                            }
                        }
                        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                        configFromStringAndFormat(config);
                    } else {
                        config._isValid = false;
                    }
                }

                // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
                var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

                function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
                    var result = [
                        untruncateYear(yearStr),
                        defaultLocaleMonthsShort.indexOf(monthStr),
                        parseInt(dayStr, 10),
                        parseInt(hourStr, 10),
                        parseInt(minuteStr, 10)
                    ];

                    if (secondStr) {
                        result.push(parseInt(secondStr, 10));
                    }

                    return result;
                }

                function untruncateYear(yearStr) {
                    var year = parseInt(yearStr, 10);
                    if (year <= 49) {
                        return 2000 + year;
                    } else if (year <= 999) {
                        return 1900 + year;
                    }
                    return year;
                }

                function preprocessRFC2822(s) {
                    // Remove comments and folding whitespace and replace multiple-spaces with a single space
                    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
                }

                function checkWeekday(weekdayStr, parsedInput, config) {
                    if (weekdayStr) {
                        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
                        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
                        if (weekdayProvided !== weekdayActual) {
                            getParsingFlags(config).weekdayMismatch = true;
                            config._isValid = false;
                            return false;
                        }
                    }
                    return true;
                }

                var obsOffsets = {
                    UT: 0,
                    GMT: 0,
                    EDT: -4 * 60,
                    EST: -5 * 60,
                    CDT: -5 * 60,
                    CST: -6 * 60,
                    MDT: -6 * 60,
                    MST: -7 * 60,
                    PDT: -7 * 60,
                    PST: -8 * 60
                };

                function calculateOffset(obsOffset, militaryOffset, numOffset) {
                    if (obsOffset) {
                        return obsOffsets[obsOffset];
                    } else if (militaryOffset) {
                        // the only allowed military tz is Z
                        return 0;
                    } else {
                        var hm = parseInt(numOffset, 10);
                        var m = hm % 100, h = (hm - m) / 100;
                        return h * 60 + m;
                    }
                }

                // date and time from ref 2822 format
                function configFromRFC2822(config) {
                    var match = rfc2822.exec(preprocessRFC2822(config._i));
                    if (match) {
                        var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
                        if (!checkWeekday(match[1], parsedArray, config)) {
                            return;
                        }

                        config._a = parsedArray;
                        config._tzm = calculateOffset(match[8], match[9], match[10]);

                        config._d = createUTCDate.apply(null, config._a);
                        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                        getParsingFlags(config).rfc2822 = true;
                    } else {
                        config._isValid = false;
                    }
                }

                // date from iso format or fallback
                function configFromString(config) {
                    var matched = aspNetJsonRegex.exec(config._i);

                    if (matched !== null) {
                        config._d = new Date(+matched[1]);
                        return;
                    }

                    configFromISO(config);
                    if (config._isValid === false) {
                        delete config._isValid;
                    } else {
                        return;
                    }

                    configFromRFC2822(config);
                    if (config._isValid === false) {
                        delete config._isValid;
                    } else {
                        return;
                    }

                    // Final attempt, use Input Fallback
                    hooks.createFromInputFallback(config);
                }

                hooks.createFromInputFallback = deprecate(
                    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                    'discouraged and will be removed in an upcoming major release. Please refer to ' +
                    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
                    function (config) {
                        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
                    }
                );

                // constant that refers to the ISO standard
                hooks.ISO_8601 = function () {
                };

                // constant that refers to the RFC 2822 form
                hooks.RFC_2822 = function () {
                };

                // date from string and format string
                function configFromStringAndFormat(config) {
                    // TODO: Move this to another part of the creation flow to prevent circular deps
                    if (config._f === hooks.ISO_8601) {
                        configFromISO(config);
                        return;
                    }
                    if (config._f === hooks.RFC_2822) {
                        configFromRFC2822(config);
                        return;
                    }
                    config._a = [];
                    getParsingFlags(config).empty = true;

                    // This array is used to make a Date, either with `new Date` or `Date.UTC`
                    var string = '' + config._i,
                        i, parsedInput, tokens, token, skipped,
                        stringLength = string.length,
                        totalParsedInputLength = 0;

                    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

                    for (i = 0; i < tokens.length; i++) {
                        token = tokens[i];
                        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                        // console.log('token', token, 'parsedInput', parsedInput,
                        //         'regex', getParseRegexForToken(token, config));
                        if (parsedInput) {
                            skipped = string.substr(0, string.indexOf(parsedInput));
                            if (skipped.length > 0) {
                                getParsingFlags(config).unusedInput.push(skipped);
                            }
                            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                            totalParsedInputLength += parsedInput.length;
                        }
                        // don't parse if it's not a known token
                        if (formatTokenFunctions[token]) {
                            if (parsedInput) {
                                getParsingFlags(config).empty = false;
                            }
                            else {
                                getParsingFlags(config).unusedTokens.push(token);
                            }
                            addTimeToArrayFromToken(token, parsedInput, config);
                        }
                        else if (config._strict && !parsedInput) {
                            getParsingFlags(config).unusedTokens.push(token);
                        }
                    }

                    // add remaining unparsed input length to the string
                    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
                    if (string.length > 0) {
                        getParsingFlags(config).unusedInput.push(string);
                    }

                    // clear _12h flag if hour is <= 12
                    if (config._a[HOUR] <= 12 &&
                        getParsingFlags(config).bigHour === true &&
                        config._a[HOUR] > 0) {
                        getParsingFlags(config).bigHour = undefined;
                    }

                    getParsingFlags(config).parsedDateParts = config._a.slice(0);
                    getParsingFlags(config).meridiem = config._meridiem;
                    // handle meridiem
                    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

                    configFromArray(config);
                    checkOverflow(config);
                }


                function meridiemFixWrap(locale, hour, meridiem) {
                    var isPm;

                    if (meridiem == null) {
                        // nothing to do
                        return hour;
                    }
                    if (locale.meridiemHour != null) {
                        return locale.meridiemHour(hour, meridiem);
                    } else if (locale.isPM != null) {
                        // Fallback
                        isPm = locale.isPM(meridiem);
                        if (isPm && hour < 12) {
                            hour += 12;
                        }
                        if (!isPm && hour === 12) {
                            hour = 0;
                        }
                        return hour;
                    } else {
                        // this is not supposed to happen
                        return hour;
                    }
                }

                // date from string and array of format strings
                function configFromStringAndArray(config) {
                    var tempConfig,
                        bestMoment,

                        scoreToBeat,
                        i,
                        currentScore;

                    if (config._f.length === 0) {
                        getParsingFlags(config).invalidFormat = true;
                        config._d = new Date(NaN);
                        return;
                    }

                    for (i = 0; i < config._f.length; i++) {
                        currentScore = 0;
                        tempConfig = copyConfig({}, config);
                        if (config._useUTC != null) {
                            tempConfig._useUTC = config._useUTC;
                        }
                        tempConfig._f = config._f[i];
                        configFromStringAndFormat(tempConfig);

                        if (!isValid(tempConfig)) {
                            continue;
                        }

                        // if there is any input that was not parsed add a penalty for that format
                        currentScore += getParsingFlags(tempConfig).charsLeftOver;

                        //or tokens
                        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                        getParsingFlags(tempConfig).score = currentScore;

                        if (scoreToBeat == null || currentScore < scoreToBeat) {
                            scoreToBeat = currentScore;
                            bestMoment = tempConfig;
                        }
                    }

                    extend(config, bestMoment || tempConfig);
                }

                function configFromObject(config) {
                    if (config._d) {
                        return;
                    }

                    var i = normalizeObjectUnits(config._i);
                    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
                        return obj && parseInt(obj, 10);
                    });

                    configFromArray(config);
                }

                function createFromConfig(config) {
                    var res = new Moment(checkOverflow(prepareConfig(config)));
                    if (res._nextDay) {
                        // Adding is smart enough around DST
                        res.add(1, 'd');
                        res._nextDay = undefined;
                    }

                    return res;
                }

                function prepareConfig(config) {
                    var input = config._i,
                        format = config._f;

                    config._locale = config._locale || getLocale(config._l);

                    if (input === null || (format === undefined && input === '')) {
                        return createInvalid({nullInput: true});
                    }

                    if (typeof input === 'string') {
                        config._i = input = config._locale.preparse(input);
                    }

                    if (isMoment(input)) {
                        return new Moment(checkOverflow(input));
                    } else if (isDate(input)) {
                        config._d = input;
                    } else if (isArray(format)) {
                        configFromStringAndArray(config);
                    } else if (format) {
                        configFromStringAndFormat(config);
                    } else {
                        configFromInput(config);
                    }

                    if (!isValid(config)) {
                        config._d = null;
                    }

                    return config;
                }

                function configFromInput(config) {
                    var input = config._i;
                    if (isUndefined(input)) {
                        config._d = new Date(hooks.now());
                    } else if (isDate(input)) {
                        config._d = new Date(input.valueOf());
                    } else if (typeof input === 'string') {
                        configFromString(config);
                    } else if (isArray(input)) {
                        config._a = map(input.slice(0), function (obj) {
                            return parseInt(obj, 10);
                        });
                        configFromArray(config);
                    } else if (isObject(input)) {
                        configFromObject(config);
                    } else if (isNumber(input)) {
                        // from milliseconds
                        config._d = new Date(input);
                    } else {
                        hooks.createFromInputFallback(config);
                    }
                }

                function createLocalOrUTC(input, format, locale, strict, isUTC) {
                    var c = {};

                    if (locale === true || locale === false) {
                        strict = locale;
                        locale = undefined;
                    }

                    if ((isObject(input) && isObjectEmpty(input)) ||
                        (isArray(input) && input.length === 0)) {
                        input = undefined;
                    }
                    // object construction must be done this way.
                    // https://github.com/moment/moment/issues/1423
                    c._isAMomentObject = true;
                    c._useUTC = c._isUTC = isUTC;
                    c._l = locale;
                    c._i = input;
                    c._f = format;
                    c._strict = strict;

                    return createFromConfig(c);
                }

                function createLocal(input, format, locale, strict) {
                    return createLocalOrUTC(input, format, locale, strict, false);
                }

                var prototypeMin = deprecate(
                    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                    function () {
                        var other = createLocal.apply(null, arguments);
                        if (this.isValid() && other.isValid()) {
                            return other < this ? this : other;
                        } else {
                            return createInvalid();
                        }
                    }
                );

                var prototypeMax = deprecate(
                    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                    function () {
                        var other = createLocal.apply(null, arguments);
                        if (this.isValid() && other.isValid()) {
                            return other > this ? this : other;
                        } else {
                            return createInvalid();
                        }
                    }
                );

                // Pick a moment m from moments so that m[fn](other) is true for all
                // other. This relies on the function fn to be transitive.
                //
                // moments should either be an array of moment objects or an array, whose
                // first element is an array of moment objects.
                function pickBy(fn, moments) {
                    var res, i;
                    if (moments.length === 1 && isArray(moments[0])) {
                        moments = moments[0];
                    }
                    if (!moments.length) {
                        return createLocal();
                    }
                    res = moments[0];
                    for (i = 1; i < moments.length; ++i) {
                        if (!moments[i].isValid() || moments[i][fn](res)) {
                            res = moments[i];
                        }
                    }
                    return res;
                }

                // TODO: Use [].sort instead?
                function min() {
                    var args = [].slice.call(arguments, 0);

                    return pickBy('isBefore', args);
                }

                function max() {
                    var args = [].slice.call(arguments, 0);

                    return pickBy('isAfter', args);
                }

                var now = function () {
                    return Date.now ? Date.now() : +(new Date());
                };

                var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

                function isDurationValid(m) {
                    for (var key in m) {
                        if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                            return false;
                        }
                    }

                    var unitHasDecimal = false;
                    for (var i = 0; i < ordering.length; ++i) {
                        if (m[ordering[i]]) {
                            if (unitHasDecimal) {
                                return false; // only allow non-integers for smallest unit
                            }
                            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                                unitHasDecimal = true;
                            }
                        }
                    }

                    return true;
                }

                function isValid$1() {
                    return this._isValid;
                }

                function createInvalid$1() {
                    return createDuration(NaN);
                }

                function Duration(duration) {
                    var normalizedInput = normalizeObjectUnits(duration),
                        years = normalizedInput.year || 0,
                        quarters = normalizedInput.quarter || 0,
                        months = normalizedInput.month || 0,
                        weeks = normalizedInput.week || 0,
                        days = normalizedInput.day || 0,
                        hours = normalizedInput.hour || 0,
                        minutes = normalizedInput.minute || 0,
                        seconds = normalizedInput.second || 0,
                        milliseconds = normalizedInput.millisecond || 0;

                    this._isValid = isDurationValid(normalizedInput);

                    // representation for dateAddRemove
                    this._milliseconds = +milliseconds +
                        seconds * 1e3 + // 1000
                        minutes * 6e4 + // 1000 * 60
                        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
                    // Because of dateAddRemove treats 24 hours as different from a
                    // day when working around DST, we need to store them separately
                    this._days = +days +
                        weeks * 7;
                    // It is impossible to translate months into days without knowing
                    // which months you are are talking about, so we have to store
                    // it separately.
                    this._months = +months +
                        quarters * 3 +
                        years * 12;

                    this._data = {};

                    this._locale = getLocale();

                    this._bubble();
                }

                function isDuration(obj) {
                    return obj instanceof Duration;
                }

                function absRound(number) {
                    if (number < 0) {
                        return Math.round(-1 * number) * -1;
                    } else {
                        return Math.round(number);
                    }
                }

                // FORMATTING

                function offset(token, separator) {
                    addFormatToken(token, 0, 0, function () {
                        var offset = this.utcOffset();
                        var sign = '+';
                        if (offset < 0) {
                            offset = -offset;
                            sign = '-';
                        }
                        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
                    });
                }

                offset('Z', ':');
                offset('ZZ', '');

                // PARSING

                addRegexToken('Z', matchShortOffset);
                addRegexToken('ZZ', matchShortOffset);
                addParseToken(['Z', 'ZZ'], function (input, array, config) {
                    config._useUTC = true;
                    config._tzm = offsetFromString(matchShortOffset, input);
                });

                // HELPERS

                // timezone chunker
                // '+10:00' > ['10',  '00']
                // '-1530'  > ['-15', '30']
                var chunkOffset = /([\+\-]|\d\d)/gi;

                function offsetFromString(matcher, string) {
                    var matches = (string || '').match(matcher);

                    if (matches === null) {
                        return null;
                    }

                    var chunk = matches[matches.length - 1] || [];
                    var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
                    var minutes = +(parts[1] * 60) + toInt(parts[2]);

                    return minutes === 0 ?
                        0 :
                        parts[0] === '+' ? minutes : -minutes;
                }

                // Return a moment from input, that is local/utc/zone equivalent to model.
                function cloneWithOffset(input, model) {
                    var res, diff;
                    if (model._isUTC) {
                        res = model.clone();
                        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
                        // Use low-level api, because this fn is low-level api.
                        res._d.setTime(res._d.valueOf() + diff);
                        hooks.updateOffset(res, false);
                        return res;
                    } else {
                        return createLocal(input).local();
                    }
                }

                function getDateOffset(m) {
                    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
                    // https://github.com/moment/moment/pull/1871
                    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
                }

                // HOOKS

                // This function will be called whenever a moment is mutated.
                // It is intended to keep the offset in sync with the timezone.
                hooks.updateOffset = function () {
                };

                // MOMENTS

                // keepLocalTime = true means only change the timezone, without
                // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
                // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
                // +0200, so we adjust the time as needed, to be valid.
                //
                // Keeping the time actually adds/subtracts (one hour)
                // from the actual represented time. That is why we call updateOffset
                // a second time. In case it wants us to change the offset again
                // _changeInProgress == true case, then we have to adjust, because
                // there is no such time in the given timezone.
                function getSetOffset(input, keepLocalTime, keepMinutes) {
                    var offset = this._offset || 0,
                        localAdjust;
                    if (!this.isValid()) {
                        return input != null ? this : NaN;
                    }
                    if (input != null) {
                        if (typeof input === 'string') {
                            input = offsetFromString(matchShortOffset, input);
                            if (input === null) {
                                return this;
                            }
                        } else if (Math.abs(input) < 16 && !keepMinutes) {
                            input = input * 60;
                        }
                        if (!this._isUTC && keepLocalTime) {
                            localAdjust = getDateOffset(this);
                        }
                        this._offset = input;
                        this._isUTC = true;
                        if (localAdjust != null) {
                            this.add(localAdjust, 'm');
                        }
                        if (offset !== input) {
                            if (!keepLocalTime || this._changeInProgress) {
                                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                            } else if (!this._changeInProgress) {
                                this._changeInProgress = true;
                                hooks.updateOffset(this, true);
                                this._changeInProgress = null;
                            }
                        }
                        return this;
                    } else {
                        return this._isUTC ? offset : getDateOffset(this);
                    }
                }

                function getSetZone(input, keepLocalTime) {
                    if (input != null) {
                        if (typeof input !== 'string') {
                            input = -input;
                        }

                        this.utcOffset(input, keepLocalTime);

                        return this;
                    } else {
                        return -this.utcOffset();
                    }
                }

                function setOffsetToUTC(keepLocalTime) {
                    return this.utcOffset(0, keepLocalTime);
                }

                function setOffsetToLocal(keepLocalTime) {
                    if (this._isUTC) {
                        this.utcOffset(0, keepLocalTime);
                        this._isUTC = false;

                        if (keepLocalTime) {
                            this.subtract(getDateOffset(this), 'm');
                        }
                    }
                    return this;
                }

                function setOffsetToParsedOffset() {
                    if (this._tzm != null) {
                        this.utcOffset(this._tzm, false, true);
                    } else if (typeof this._i === 'string') {
                        var tZone = offsetFromString(matchOffset, this._i);
                        if (tZone != null) {
                            this.utcOffset(tZone);
                        }
                        else {
                            this.utcOffset(0, true);
                        }
                    }
                    return this;
                }

                function hasAlignedHourOffset(input) {
                    if (!this.isValid()) {
                        return false;
                    }
                    input = input ? createLocal(input).utcOffset() : 0;

                    return (this.utcOffset() - input) % 60 === 0;
                }

                function isDaylightSavingTime() {
                    return (
                        this.utcOffset() > this.clone().month(0).utcOffset() ||
                        this.utcOffset() > this.clone().month(5).utcOffset()
                    );
                }

                function isDaylightSavingTimeShifted() {
                    if (!isUndefined(this._isDSTShifted)) {
                        return this._isDSTShifted;
                    }

                    var c = {};

                    copyConfig(c, this);
                    c = prepareConfig(c);

                    if (c._a) {
                        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                        this._isDSTShifted = this.isValid() &&
                            compareArrays(c._a, other.toArray()) > 0;
                    } else {
                        this._isDSTShifted = false;
                    }

                    return this._isDSTShifted;
                }

                function isLocal() {
                    return this.isValid() ? !this._isUTC : false;
                }

                function isUtcOffset() {
                    return this.isValid() ? this._isUTC : false;
                }

                function isUtc() {
                    return this.isValid() ? this._isUTC && this._offset === 0 : false;
                }

                // ASP.NET json date format regex
                var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

                // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
                // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
                // and further modified to allow for strings containing both week and day
                var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

                function createDuration(input, key) {
                    var duration = input,
                        // matching against regexp is expensive, do it on demand
                        match = null,
                        sign,
                        ret,
                        diffRes;

                    if (isDuration(input)) {
                        duration = {
                            ms: input._milliseconds,
                            d: input._days,
                            M: input._months
                        };
                    } else if (isNumber(input)) {
                        duration = {};
                        if (key) {
                            duration[key] = input;
                        } else {
                            duration.milliseconds = input;
                        }
                    } else if (!!(match = aspNetRegex.exec(input))) {
                        sign = (match[1] === '-') ? -1 : 1;
                        duration = {
                            y: 0,
                            d: toInt(match[DATE]) * sign,
                            h: toInt(match[HOUR]) * sign,
                            m: toInt(match[MINUTE]) * sign,
                            s: toInt(match[SECOND]) * sign,
                            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
                        };
                    } else if (!!(match = isoRegex.exec(input))) {
                        sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
                        duration = {
                            y: parseIso(match[2], sign),
                            M: parseIso(match[3], sign),
                            w: parseIso(match[4], sign),
                            d: parseIso(match[5], sign),
                            h: parseIso(match[6], sign),
                            m: parseIso(match[7], sign),
                            s: parseIso(match[8], sign)
                        };
                    } else if (duration == null) {// checks for null or undefined
                        duration = {};
                    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
                        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

                        duration = {};
                        duration.ms = diffRes.milliseconds;
                        duration.M = diffRes.months;
                    }

                    ret = new Duration(duration);

                    if (isDuration(input) && hasOwnProp(input, '_locale')) {
                        ret._locale = input._locale;
                    }

                    return ret;
                }

                createDuration.fn = Duration.prototype;
                createDuration.invalid = createInvalid$1;

                function parseIso(inp, sign) {
                    // We'd normally use ~~inp for this, but unfortunately it also
                    // converts floats to ints.
                    // inp may be undefined, so careful calling replace on it.
                    var res = inp && parseFloat(inp.replace(',', '.'));
                    // apply sign while we're at it
                    return (isNaN(res) ? 0 : res) * sign;
                }

                function positiveMomentsDifference(base, other) {
                    var res = {milliseconds: 0, months: 0};

                    res.months = other.month() - base.month() +
                        (other.year() - base.year()) * 12;
                    if (base.clone().add(res.months, 'M').isAfter(other)) {
                        --res.months;
                    }

                    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

                    return res;
                }

                function momentsDifference(base, other) {
                    var res;
                    if (!(base.isValid() && other.isValid())) {
                        return {milliseconds: 0, months: 0};
                    }

                    other = cloneWithOffset(other, base);
                    if (base.isBefore(other)) {
                        res = positiveMomentsDifference(base, other);
                    } else {
                        res = positiveMomentsDifference(other, base);
                        res.milliseconds = -res.milliseconds;
                        res.months = -res.months;
                    }

                    return res;
                }

                // TODO: remove 'name' arg after deprecation is removed
                function createAdder(direction, name) {
                    return function (val, period) {
                        var dur, tmp;
                        //invert the arguments, but complain about it
                        if (period !== null && !isNaN(+period)) {
                            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                            tmp = val;
                            val = period;
                            period = tmp;
                        }

                        val = typeof val === 'string' ? +val : val;
                        dur = createDuration(val, period);
                        addSubtract(this, dur, direction);
                        return this;
                    };
                }

                function addSubtract(mom, duration, isAdding, updateOffset) {
                    var milliseconds = duration._milliseconds,
                        days = absRound(duration._days),
                        months = absRound(duration._months);

                    if (!mom.isValid()) {
                        // No op
                        return;
                    }

                    updateOffset = updateOffset == null ? true : updateOffset;

                    if (months) {
                        setMonth(mom, get(mom, 'Month') + months * isAdding);
                    }
                    if (days) {
                        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
                    }
                    if (milliseconds) {
                        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
                    }
                    if (updateOffset) {
                        hooks.updateOffset(mom, days || months);
                    }
                }

                var add = createAdder(1, 'add');
                var subtract = createAdder(-1, 'subtract');

                function getCalendarFormat(myMoment, now) {
                    var diff = myMoment.diff(now, 'days', true);
                    return diff < -6 ? 'sameElse' :
                        diff < -1 ? 'lastWeek' :
                            diff < 0 ? 'lastDay' :
                                diff < 1 ? 'sameDay' :
                                    diff < 2 ? 'nextDay' :
                                        diff < 7 ? 'nextWeek' : 'sameElse';
                }

                function calendar$1(time, formats) {
                    // We want to compare the start of today, vs this.
                    // Getting start-of-today depends on whether we're local/utc/offset or not.
                    var now = time || createLocal(),
                        sod = cloneWithOffset(now, this).startOf('day'),
                        format = hooks.calendarFormat(this, sod) || 'sameElse';

                    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

                    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
                }

                function clone() {
                    return new Moment(this);
                }

                function isAfter(input, units) {
                    var localInput = isMoment(input) ? input : createLocal(input);
                    if (!(this.isValid() && localInput.isValid())) {
                        return false;
                    }
                    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
                    if (units === 'millisecond') {
                        return this.valueOf() > localInput.valueOf();
                    } else {
                        return localInput.valueOf() < this.clone().startOf(units).valueOf();
                    }
                }

                function isBefore(input, units) {
                    var localInput = isMoment(input) ? input : createLocal(input);
                    if (!(this.isValid() && localInput.isValid())) {
                        return false;
                    }
                    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
                    if (units === 'millisecond') {
                        return this.valueOf() < localInput.valueOf();
                    } else {
                        return this.clone().endOf(units).valueOf() < localInput.valueOf();
                    }
                }

                function isBetween(from, to, units, inclusivity) {
                    inclusivity = inclusivity || '()';
                    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
                        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
                }

                function isSame(input, units) {
                    var localInput = isMoment(input) ? input : createLocal(input),
                        inputMs;
                    if (!(this.isValid() && localInput.isValid())) {
                        return false;
                    }
                    units = normalizeUnits(units || 'millisecond');
                    if (units === 'millisecond') {
                        return this.valueOf() === localInput.valueOf();
                    } else {
                        inputMs = localInput.valueOf();
                        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
                    }
                }

                function isSameOrAfter(input, units) {
                    return this.isSame(input, units) || this.isAfter(input, units);
                }

                function isSameOrBefore(input, units) {
                    return this.isSame(input, units) || this.isBefore(input, units);
                }

                function diff(input, units, asFloat) {
                    var that,
                        zoneDelta,
                        output;

                    if (!this.isValid()) {
                        return NaN;
                    }

                    that = cloneWithOffset(input, this);

                    if (!that.isValid()) {
                        return NaN;
                    }

                    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

                    units = normalizeUnits(units);

                    switch (units) {
                        case 'year':
                            output = monthDiff(this, that) / 12;
                            break;
                        case 'month':
                            output = monthDiff(this, that);
                            break;
                        case 'quarter':
                            output = monthDiff(this, that) / 3;
                            break;
                        case 'second':
                            output = (this - that) / 1e3;
                            break; // 1000
                        case 'minute':
                            output = (this - that) / 6e4;
                            break; // 1000 * 60
                        case 'hour':
                            output = (this - that) / 36e5;
                            break; // 1000 * 60 * 60
                        case 'day':
                            output = (this - that - zoneDelta) / 864e5;
                            break; // 1000 * 60 * 60 * 24, negate dst
                        case 'week':
                            output = (this - that - zoneDelta) / 6048e5;
                            break; // 1000 * 60 * 60 * 24 * 7, negate dst
                        default:
                            output = this - that;
                    }

                    return asFloat ? output : absFloor(output);
                }

                function monthDiff(a, b) {
                    // difference in months
                    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
                        // b is in (anchor - 1 month, anchor + 1 month)
                        anchor = a.clone().add(wholeMonthDiff, 'months'),
                        anchor2, adjust;

                    if (b - anchor < 0) {
                        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                        // linear across the month
                        adjust = (b - anchor) / (anchor - anchor2);
                    } else {
                        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                        // linear across the month
                        adjust = (b - anchor) / (anchor2 - anchor);
                    }

                    //check for negative zero, return zero if negative zero
                    return -(wholeMonthDiff + adjust) || 0;
                }

                hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
                hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

                function toString() {
                    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
                }

                function toISOString(keepOffset) {
                    if (!this.isValid()) {
                        return null;
                    }
                    var utc = keepOffset !== true;
                    var m = utc ? this.clone().utc() : this;
                    if (m.year() < 0 || m.year() > 9999) {
                        return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
                    }
                    if (isFunction(Date.prototype.toISOString)) {
                        // native implementation is ~50x faster, use it when we can
                        if (utc) {
                            return this.toDate().toISOString();
                        } else {
                            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
                        }
                    }
                    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
                }

                /**
                 * Return a human readable representation of a moment that can
                 * also be evaluated to get a new moment which is the same
                 *
                 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
                 */
                function inspect() {
                    if (!this.isValid()) {
                        return 'moment.invalid(/* ' + this._i + ' */)';
                    }
                    var func = 'moment';
                    var zone = '';
                    if (!this.isLocal()) {
                        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                        zone = 'Z';
                    }
                    var prefix = '[' + func + '("]';
                    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
                    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
                    var suffix = zone + '[")]';

                    return this.format(prefix + year + datetime + suffix);
                }

                function format(inputString) {
                    if (!inputString) {
                        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
                    }
                    var output = formatMoment(this, inputString);
                    return this.localeData().postformat(output);
                }

                function from(time, withoutSuffix) {
                    if (this.isValid() &&
                        ((isMoment(time) && time.isValid()) ||
                            createLocal(time).isValid())) {
                        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
                    } else {
                        return this.localeData().invalidDate();
                    }
                }

                function fromNow(withoutSuffix) {
                    return this.from(createLocal(), withoutSuffix);
                }

                function to(time, withoutSuffix) {
                    if (this.isValid() &&
                        ((isMoment(time) && time.isValid()) ||
                            createLocal(time).isValid())) {
                        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
                    } else {
                        return this.localeData().invalidDate();
                    }
                }

                function toNow(withoutSuffix) {
                    return this.to(createLocal(), withoutSuffix);
                }

                // If passed a locale key, it will set the locale for this
                // instance.  Otherwise, it will return the locale configuration
                // variables for this instance.
                function locale(key) {
                    var newLocaleData;

                    if (key === undefined) {
                        return this._locale._abbr;
                    } else {
                        newLocaleData = getLocale(key);
                        if (newLocaleData != null) {
                            this._locale = newLocaleData;
                        }
                        return this;
                    }
                }

                var lang = deprecate(
                    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
                    function (key) {
                        if (key === undefined) {
                            return this.localeData();
                        } else {
                            return this.locale(key);
                        }
                    }
                );

                function localeData() {
                    return this._locale;
                }

                function startOf(units) {
                    units = normalizeUnits(units);
                    // the following switch intentionally omits break keywords
                    // to utilize falling through the cases.
                    switch (units) {
                        case 'year':
                            this.month(0);
                        /* falls through */
                        case 'quarter':
                        case 'month':
                            this.date(1);
                        /* falls through */
                        case 'week':
                        case 'isoWeek':
                        case 'day':
                        case 'date':
                            this.hours(0);
                        /* falls through */
                        case 'hour':
                            this.minutes(0);
                        /* falls through */
                        case 'minute':
                            this.seconds(0);
                        /* falls through */
                        case 'second':
                            this.milliseconds(0);
                    }

                    // weeks are a special case
                    if (units === 'week') {
                        this.weekday(0);
                    }
                    if (units === 'isoWeek') {
                        this.isoWeekday(1);
                    }

                    // quarters are also special
                    if (units === 'quarter') {
                        this.month(Math.floor(this.month() / 3) * 3);
                    }

                    return this;
                }

                function endOf(units) {
                    units = normalizeUnits(units);
                    if (units === undefined || units === 'millisecond') {
                        return this;
                    }

                    // 'date' is an alias for 'day', so it should be considered as such.
                    if (units === 'date') {
                        units = 'day';
                    }

                    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
                }

                function valueOf() {
                    return this._d.valueOf() - ((this._offset || 0) * 60000);
                }

                function unix() {
                    return Math.floor(this.valueOf() / 1000);
                }

                function toDate() {
                    return new Date(this.valueOf());
                }

                function toArray() {
                    var m = this;
                    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
                }

                function toObject() {
                    var m = this;
                    return {
                        years: m.year(),
                        months: m.month(),
                        date: m.date(),
                        hours: m.hours(),
                        minutes: m.minutes(),
                        seconds: m.seconds(),
                        milliseconds: m.milliseconds()
                    };
                }

                function toJSON() {
                    // new Date(NaN).toJSON() === null
                    return this.isValid() ? this.toISOString() : null;
                }

                function isValid$2() {
                    return isValid(this);
                }

                function parsingFlags() {
                    return extend({}, getParsingFlags(this));
                }

                function invalidAt() {
                    return getParsingFlags(this).overflow;
                }

                function creationData() {
                    return {
                        input: this._i,
                        format: this._f,
                        locale: this._locale,
                        isUTC: this._isUTC,
                        strict: this._strict
                    };
                }

                // FORMATTING

                addFormatToken(0, ['gg', 2], 0, function () {
                    return this.weekYear() % 100;
                });

                addFormatToken(0, ['GG', 2], 0, function () {
                    return this.isoWeekYear() % 100;
                });

                function addWeekYearFormatToken(token, getter) {
                    addFormatToken(0, [token, token.length], 0, getter);
                }

                addWeekYearFormatToken('gggg', 'weekYear');
                addWeekYearFormatToken('ggggg', 'weekYear');
                addWeekYearFormatToken('GGGG', 'isoWeekYear');
                addWeekYearFormatToken('GGGGG', 'isoWeekYear');

                // ALIASES

                addUnitAlias('weekYear', 'gg');
                addUnitAlias('isoWeekYear', 'GG');

                // PRIORITY

                addUnitPriority('weekYear', 1);
                addUnitPriority('isoWeekYear', 1);


                // PARSING

                addRegexToken('G', matchSigned);
                addRegexToken('g', matchSigned);
                addRegexToken('GG', match1to2, match2);
                addRegexToken('gg', match1to2, match2);
                addRegexToken('GGGG', match1to4, match4);
                addRegexToken('gggg', match1to4, match4);
                addRegexToken('GGGGG', match1to6, match6);
                addRegexToken('ggggg', match1to6, match6);

                addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
                    week[token.substr(0, 2)] = toInt(input);
                });

                addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
                    week[token] = hooks.parseTwoDigitYear(input);
                });

                // MOMENTS

                function getSetWeekYear(input) {
                    return getSetWeekYearHelper.call(this,
                        input,
                        this.week(),
                        this.weekday(),
                        this.localeData()._week.dow,
                        this.localeData()._week.doy);
                }

                function getSetISOWeekYear(input) {
                    return getSetWeekYearHelper.call(this,
                        input, this.isoWeek(), this.isoWeekday(), 1, 4);
                }

                function getISOWeeksInYear() {
                    return weeksInYear(this.year(), 1, 4);
                }

                function getWeeksInYear() {
                    var weekInfo = this.localeData()._week;
                    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
                }

                function getSetWeekYearHelper(input, week, weekday, dow, doy) {
                    var weeksTarget;
                    if (input == null) {
                        return weekOfYear(this, dow, doy).year;
                    } else {
                        weeksTarget = weeksInYear(input, dow, doy);
                        if (week > weeksTarget) {
                            week = weeksTarget;
                        }
                        return setWeekAll.call(this, input, week, weekday, dow, doy);
                    }
                }

                function setWeekAll(weekYear, week, weekday, dow, doy) {
                    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

                    this.year(date.getUTCFullYear());
                    this.month(date.getUTCMonth());
                    this.date(date.getUTCDate());
                    return this;
                }

                // FORMATTING

                addFormatToken('Q', 0, 'Qo', 'quarter');

                // ALIASES

                addUnitAlias('quarter', 'Q');

                // PRIORITY

                addUnitPriority('quarter', 7);

                // PARSING

                addRegexToken('Q', match1);
                addParseToken('Q', function (input, array) {
                    array[MONTH] = (toInt(input) - 1) * 3;
                });

                // MOMENTS

                function getSetQuarter(input) {
                    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
                }

                // FORMATTING

                addFormatToken('D', ['DD', 2], 'Do', 'date');

                // ALIASES

                addUnitAlias('date', 'D');

                // PRIORITY
                addUnitPriority('date', 9);

                // PARSING

                addRegexToken('D', match1to2);
                addRegexToken('DD', match1to2, match2);
                addRegexToken('Do', function (isStrict, locale) {
                    // TODO: Remove "ordinalParse" fallback in next major release.
                    return isStrict ?
                        (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
                        locale._dayOfMonthOrdinalParseLenient;
                });

                addParseToken(['D', 'DD'], DATE);
                addParseToken('Do', function (input, array) {
                    array[DATE] = toInt(input.match(match1to2)[0]);
                });

                // MOMENTS

                var getSetDayOfMonth = makeGetSet('Date', true);

                // FORMATTING

                addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

                // ALIASES

                addUnitAlias('dayOfYear', 'DDD');

                // PRIORITY
                addUnitPriority('dayOfYear', 4);

                // PARSING

                addRegexToken('DDD', match1to3);
                addRegexToken('DDDD', match3);
                addParseToken(['DDD', 'DDDD'], function (input, array, config) {
                    config._dayOfYear = toInt(input);
                });

                // HELPERS

                // MOMENTS

                function getSetDayOfYear(input) {
                    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
                    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
                }

                // FORMATTING

                addFormatToken('m', ['mm', 2], 0, 'minute');

                // ALIASES

                addUnitAlias('minute', 'm');

                // PRIORITY

                addUnitPriority('minute', 14);

                // PARSING

                addRegexToken('m', match1to2);
                addRegexToken('mm', match1to2, match2);
                addParseToken(['m', 'mm'], MINUTE);

                // MOMENTS

                var getSetMinute = makeGetSet('Minutes', false);

                // FORMATTING

                addFormatToken('s', ['ss', 2], 0, 'second');

                // ALIASES

                addUnitAlias('second', 's');

                // PRIORITY

                addUnitPriority('second', 15);

                // PARSING

                addRegexToken('s', match1to2);
                addRegexToken('ss', match1to2, match2);
                addParseToken(['s', 'ss'], SECOND);

                // MOMENTS

                var getSetSecond = makeGetSet('Seconds', false);

                // FORMATTING

                addFormatToken('S', 0, 0, function () {
                    return ~~(this.millisecond() / 100);
                });

                addFormatToken(0, ['SS', 2], 0, function () {
                    return ~~(this.millisecond() / 10);
                });

                addFormatToken(0, ['SSS', 3], 0, 'millisecond');
                addFormatToken(0, ['SSSS', 4], 0, function () {
                    return this.millisecond() * 10;
                });
                addFormatToken(0, ['SSSSS', 5], 0, function () {
                    return this.millisecond() * 100;
                });
                addFormatToken(0, ['SSSSSS', 6], 0, function () {
                    return this.millisecond() * 1000;
                });
                addFormatToken(0, ['SSSSSSS', 7], 0, function () {
                    return this.millisecond() * 10000;
                });
                addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
                    return this.millisecond() * 100000;
                });
                addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
                    return this.millisecond() * 1000000;
                });


                // ALIASES

                addUnitAlias('millisecond', 'ms');

                // PRIORITY

                addUnitPriority('millisecond', 16);

                // PARSING

                addRegexToken('S', match1to3, match1);
                addRegexToken('SS', match1to3, match2);
                addRegexToken('SSS', match1to3, match3);

                var token;
                for (token = 'SSSS'; token.length <= 9; token += 'S') {
                    addRegexToken(token, matchUnsigned);
                }

                function parseMs(input, array) {
                    array[MILLISECOND] = toInt(('0.' + input) * 1000);
                }

                for (token = 'S'; token.length <= 9; token += 'S') {
                    addParseToken(token, parseMs);
                }
                // MOMENTS

                var getSetMillisecond = makeGetSet('Milliseconds', false);

                // FORMATTING

                addFormatToken('z', 0, 0, 'zoneAbbr');
                addFormatToken('zz', 0, 0, 'zoneName');

                // MOMENTS

                function getZoneAbbr() {
                    return this._isUTC ? 'UTC' : '';
                }

                function getZoneName() {
                    return this._isUTC ? 'Coordinated Universal Time' : '';
                }

                var proto = Moment.prototype;

                proto.add = add;
                proto.calendar = calendar$1;
                proto.clone = clone;
                proto.diff = diff;
                proto.endOf = endOf;
                proto.format = format;
                proto.from = from;
                proto.fromNow = fromNow;
                proto.to = to;
                proto.toNow = toNow;
                proto.get = stringGet;
                proto.invalidAt = invalidAt;
                proto.isAfter = isAfter;
                proto.isBefore = isBefore;
                proto.isBetween = isBetween;
                proto.isSame = isSame;
                proto.isSameOrAfter = isSameOrAfter;
                proto.isSameOrBefore = isSameOrBefore;
                proto.isValid = isValid$2;
                proto.lang = lang;
                proto.locale = locale;
                proto.localeData = localeData;
                proto.max = prototypeMax;
                proto.min = prototypeMin;
                proto.parsingFlags = parsingFlags;
                proto.set = stringSet;
                proto.startOf = startOf;
                proto.subtract = subtract;
                proto.toArray = toArray;
                proto.toObject = toObject;
                proto.toDate = toDate;
                proto.toISOString = toISOString;
                proto.inspect = inspect;
                proto.toJSON = toJSON;
                proto.toString = toString;
                proto.unix = unix;
                proto.valueOf = valueOf;
                proto.creationData = creationData;
                proto.year = getSetYear;
                proto.isLeapYear = getIsLeapYear;
                proto.weekYear = getSetWeekYear;
                proto.isoWeekYear = getSetISOWeekYear;
                proto.quarter = proto.quarters = getSetQuarter;
                proto.month = getSetMonth;
                proto.daysInMonth = getDaysInMonth;
                proto.week = proto.weeks = getSetWeek;
                proto.isoWeek = proto.isoWeeks = getSetISOWeek;
                proto.weeksInYear = getWeeksInYear;
                proto.isoWeeksInYear = getISOWeeksInYear;
                proto.date = getSetDayOfMonth;
                proto.day = proto.days = getSetDayOfWeek;
                proto.weekday = getSetLocaleDayOfWeek;
                proto.isoWeekday = getSetISODayOfWeek;
                proto.dayOfYear = getSetDayOfYear;
                proto.hour = proto.hours = getSetHour;
                proto.minute = proto.minutes = getSetMinute;
                proto.second = proto.seconds = getSetSecond;
                proto.millisecond = proto.milliseconds = getSetMillisecond;
                proto.utcOffset = getSetOffset;
                proto.utc = setOffsetToUTC;
                proto.local = setOffsetToLocal;
                proto.parseZone = setOffsetToParsedOffset;
                proto.hasAlignedHourOffset = hasAlignedHourOffset;
                proto.isDST = isDaylightSavingTime;
                proto.isLocal = isLocal;
                proto.isUtcOffset = isUtcOffset;
                proto.isUtc = isUtc;
                proto.isUTC = isUtc;
                proto.zoneAbbr = getZoneAbbr;
                proto.zoneName = getZoneName;
                proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
                proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
                proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
                proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
                proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

                function createUnix(input) {
                    return createLocal(input * 1000);
                }

                function createInZone() {
                    return createLocal.apply(null, arguments).parseZone();
                }

                function preParsePostFormat(string) {
                    return string;
                }

                var proto$1 = Locale.prototype;

                proto$1.calendar = calendar;
                proto$1.longDateFormat = longDateFormat;
                proto$1.invalidDate = invalidDate;
                proto$1.ordinal = ordinal;
                proto$1.preparse = preParsePostFormat;
                proto$1.postformat = preParsePostFormat;
                proto$1.relativeTime = relativeTime;
                proto$1.pastFuture = pastFuture;
                proto$1.set = set;

                proto$1.months = localeMonths;
                proto$1.monthsShort = localeMonthsShort;
                proto$1.monthsParse = localeMonthsParse;
                proto$1.monthsRegex = monthsRegex;
                proto$1.monthsShortRegex = monthsShortRegex;
                proto$1.week = localeWeek;
                proto$1.firstDayOfYear = localeFirstDayOfYear;
                proto$1.firstDayOfWeek = localeFirstDayOfWeek;

                proto$1.weekdays = localeWeekdays;
                proto$1.weekdaysMin = localeWeekdaysMin;
                proto$1.weekdaysShort = localeWeekdaysShort;
                proto$1.weekdaysParse = localeWeekdaysParse;

                proto$1.weekdaysRegex = weekdaysRegex;
                proto$1.weekdaysShortRegex = weekdaysShortRegex;
                proto$1.weekdaysMinRegex = weekdaysMinRegex;

                proto$1.isPM = localeIsPM;
                proto$1.meridiem = localeMeridiem;

                function get$1(format, index, field, setter) {
                    var locale = getLocale();
                    var utc = createUTC().set(setter, index);
                    return locale[field](utc, format);
                }

                function listMonthsImpl(format, index, field) {
                    if (isNumber(format)) {
                        index = format;
                        format = undefined;
                    }

                    format = format || '';

                    if (index != null) {
                        return get$1(format, index, field, 'month');
                    }

                    var i;
                    var out = [];
                    for (i = 0; i < 12; i++) {
                        out[i] = get$1(format, i, field, 'month');
                    }
                    return out;
                }

                // ()
                // (5)
                // (fmt, 5)
                // (fmt)
                // (true)
                // (true, 5)
                // (true, fmt, 5)
                // (true, fmt)
                function listWeekdaysImpl(localeSorted, format, index, field) {
                    if (typeof localeSorted === 'boolean') {
                        if (isNumber(format)) {
                            index = format;
                            format = undefined;
                        }

                        format = format || '';
                    } else {
                        format = localeSorted;
                        index = format;
                        localeSorted = false;

                        if (isNumber(format)) {
                            index = format;
                            format = undefined;
                        }

                        format = format || '';
                    }

                    var locale = getLocale(),
                        shift = localeSorted ? locale._week.dow : 0;

                    if (index != null) {
                        return get$1(format, (index + shift) % 7, field, 'day');
                    }

                    var i;
                    var out = [];
                    for (i = 0; i < 7; i++) {
                        out[i] = get$1(format, (i + shift) % 7, field, 'day');
                    }
                    return out;
                }

                function listMonths(format, index) {
                    return listMonthsImpl(format, index, 'months');
                }

                function listMonthsShort(format, index) {
                    return listMonthsImpl(format, index, 'monthsShort');
                }

                function listWeekdays(localeSorted, format, index) {
                    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
                }

                function listWeekdaysShort(localeSorted, format, index) {
                    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
                }

                function listWeekdaysMin(localeSorted, format, index) {
                    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
                }

                getSetGlobalLocale('en', {
                    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                    ordinal: function (number) {
                        var b = number % 10,
                            output = (toInt(number % 100 / 10) === 1) ? 'th' :
                                (b === 1) ? 'st' :
                                    (b === 2) ? 'nd' :
                                        (b === 3) ? 'rd' : 'th';
                        return number + output;
                    }
                });

                // Side effect imports

                hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
                hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

                var mathAbs = Math.abs;

                function abs() {
                    var data = this._data;

                    this._milliseconds = mathAbs(this._milliseconds);
                    this._days = mathAbs(this._days);
                    this._months = mathAbs(this._months);

                    data.milliseconds = mathAbs(data.milliseconds);
                    data.seconds = mathAbs(data.seconds);
                    data.minutes = mathAbs(data.minutes);
                    data.hours = mathAbs(data.hours);
                    data.months = mathAbs(data.months);
                    data.years = mathAbs(data.years);

                    return this;
                }

                function addSubtract$1(duration, input, value, direction) {
                    var other = createDuration(input, value);

                    duration._milliseconds += direction * other._milliseconds;
                    duration._days += direction * other._days;
                    duration._months += direction * other._months;

                    return duration._bubble();
                }

                // supports only 2.0-style add(1, 's') or add(duration)
                function add$1(input, value) {
                    return addSubtract$1(this, input, value, 1);
                }

                // supports only 2.0-style subtract(1, 's') or subtract(duration)
                function subtract$1(input, value) {
                    return addSubtract$1(this, input, value, -1);
                }

                function absCeil(number) {
                    if (number < 0) {
                        return Math.floor(number);
                    } else {
                        return Math.ceil(number);
                    }
                }

                function bubble() {
                    var milliseconds = this._milliseconds;
                    var days = this._days;
                    var months = this._months;
                    var data = this._data;
                    var seconds, minutes, hours, years, monthsFromDays;

                    // if we have a mix of positive and negative values, bubble down first
                    // check: https://github.com/moment/moment/issues/2166
                    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                        (milliseconds <= 0 && days <= 0 && months <= 0))) {
                        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                        days = 0;
                        months = 0;
                    }

                    // The following code bubbles up values, see the tests for
                    // examples of what that means.
                    data.milliseconds = milliseconds % 1000;

                    seconds = absFloor(milliseconds / 1000);
                    data.seconds = seconds % 60;

                    minutes = absFloor(seconds / 60);
                    data.minutes = minutes % 60;

                    hours = absFloor(minutes / 60);
                    data.hours = hours % 24;

                    days += absFloor(hours / 24);

                    // convert days to months
                    monthsFromDays = absFloor(daysToMonths(days));
                    months += monthsFromDays;
                    days -= absCeil(monthsToDays(monthsFromDays));

                    // 12 months -> 1 year
                    years = absFloor(months / 12);
                    months %= 12;

                    data.days = days;
                    data.months = months;
                    data.years = years;

                    return this;
                }

                function daysToMonths(days) {
                    // 400 years have 146097 days (taking into account leap year rules)
                    // 400 years have 12 months === 4800
                    return days * 4800 / 146097;
                }

                function monthsToDays(months) {
                    // the reverse of daysToMonths
                    return months * 146097 / 4800;
                }

                function as(units) {
                    if (!this.isValid()) {
                        return NaN;
                    }
                    var days;
                    var months;
                    var milliseconds = this._milliseconds;

                    units = normalizeUnits(units);

                    if (units === 'month' || units === 'year') {
                        days = this._days + milliseconds / 864e5;
                        months = this._months + daysToMonths(days);
                        return units === 'month' ? months : months / 12;
                    } else {
                        // handle milliseconds separately because of floating point math errors (issue #1867)
                        days = this._days + Math.round(monthsToDays(this._months));
                        switch (units) {
                            case 'week'   :
                                return days / 7 + milliseconds / 6048e5;
                            case 'day'    :
                                return days + milliseconds / 864e5;
                            case 'hour'   :
                                return days * 24 + milliseconds / 36e5;
                            case 'minute' :
                                return days * 1440 + milliseconds / 6e4;
                            case 'second' :
                                return days * 86400 + milliseconds / 1000;
                            // Math.floor prevents floating point math errors here
                            case 'millisecond':
                                return Math.floor(days * 864e5) + milliseconds;
                            default:
                                throw new Error('Unknown unit ' + units);
                        }
                    }
                }

                // TODO: Use this.as('ms')?
                function valueOf$1() {
                    if (!this.isValid()) {
                        return NaN;
                    }
                    return (
                        this._milliseconds +
                        this._days * 864e5 +
                        (this._months % 12) * 2592e6 +
                        toInt(this._months / 12) * 31536e6
                    );
                }

                function makeAs(alias) {
                    return function () {
                        return this.as(alias);
                    };
                }

                var asMilliseconds = makeAs('ms');
                var asSeconds = makeAs('s');
                var asMinutes = makeAs('m');
                var asHours = makeAs('h');
                var asDays = makeAs('d');
                var asWeeks = makeAs('w');
                var asMonths = makeAs('M');
                var asYears = makeAs('y');

                function clone$1() {
                    return createDuration(this);
                }

                function get$2(units) {
                    units = normalizeUnits(units);
                    return this.isValid() ? this[units + 's']() : NaN;
                }

                function makeGetter(name) {
                    return function () {
                        return this.isValid() ? this._data[name] : NaN;
                    };
                }

                var milliseconds = makeGetter('milliseconds');
                var seconds = makeGetter('seconds');
                var minutes = makeGetter('minutes');
                var hours = makeGetter('hours');
                var days = makeGetter('days');
                var months = makeGetter('months');
                var years = makeGetter('years');

                function weeks() {
                    return absFloor(this.days() / 7);
                }

                var round = Math.round;
                var thresholds = {
                    ss: 44,         // a few seconds to seconds
                    s: 45,         // seconds to minute
                    m: 45,         // minutes to hour
                    h: 22,         // hours to day
                    d: 26,         // days to month
                    M: 11          // months to year
                };

                // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
                function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
                }

                function relativeTime$1(posNegDuration, withoutSuffix, locale) {
                    var duration = createDuration(posNegDuration).abs();
                    var seconds = round(duration.as('s'));
                    var minutes = round(duration.as('m'));
                    var hours = round(duration.as('h'));
                    var days = round(duration.as('d'));
                    var months = round(duration.as('M'));
                    var years = round(duration.as('y'));

                    var a = seconds <= thresholds.ss && ['s', seconds] ||
                        seconds < thresholds.s && ['ss', seconds] ||
                        minutes <= 1 && ['m'] ||
                        minutes < thresholds.m && ['mm', minutes] ||
                        hours <= 1 && ['h'] ||
                        hours < thresholds.h && ['hh', hours] ||
                        days <= 1 && ['d'] ||
                        days < thresholds.d && ['dd', days] ||
                        months <= 1 && ['M'] ||
                        months < thresholds.M && ['MM', months] ||
                        years <= 1 && ['y'] || ['yy', years];

                    a[2] = withoutSuffix;
                    a[3] = +posNegDuration > 0;
                    a[4] = locale;
                    return substituteTimeAgo.apply(null, a);
                }

                // This function allows you to set the rounding function for relative time strings
                function getSetRelativeTimeRounding(roundingFunction) {
                    if (roundingFunction === undefined) {
                        return round;
                    }
                    if (typeof(roundingFunction) === 'function') {
                        round = roundingFunction;
                        return true;
                    }
                    return false;
                }

                // This function allows you to set a threshold for relative time strings
                function getSetRelativeTimeThreshold(threshold, limit) {
                    if (thresholds[threshold] === undefined) {
                        return false;
                    }
                    if (limit === undefined) {
                        return thresholds[threshold];
                    }
                    thresholds[threshold] = limit;
                    if (threshold === 's') {
                        thresholds.ss = limit - 1;
                    }
                    return true;
                }

                function humanize(withSuffix) {
                    if (!this.isValid()) {
                        return this.localeData().invalidDate();
                    }

                    var locale = this.localeData();
                    var output = relativeTime$1(this, !withSuffix, locale);

                    if (withSuffix) {
                        output = locale.pastFuture(+this, output);
                    }

                    return locale.postformat(output);
                }

                var abs$1 = Math.abs;

                function sign(x) {
                    return ((x > 0) - (x < 0)) || +x;
                }

                function toISOString$1() {
                    // for ISO strings we do not use the normal bubbling rules:
                    //  * milliseconds bubble up until they become hours
                    //  * days do not bubble at all
                    //  * months bubble up until they become years
                    // This is because there is no context-free conversion between hours and days
                    // (think of clock changes)
                    // and also not between days and months (28-31 days per month)
                    if (!this.isValid()) {
                        return this.localeData().invalidDate();
                    }

                    var seconds = abs$1(this._milliseconds) / 1000;
                    var days = abs$1(this._days);
                    var months = abs$1(this._months);
                    var minutes, hours, years;

                    // 3600 seconds -> 60 minutes -> 1 hour
                    minutes = absFloor(seconds / 60);
                    hours = absFloor(minutes / 60);
                    seconds %= 60;
                    minutes %= 60;

                    // 12 months -> 1 year
                    years = absFloor(months / 12);
                    months %= 12;


                    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
                    var Y = years;
                    var M = months;
                    var D = days;
                    var h = hours;
                    var m = minutes;
                    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
                    var total = this.asSeconds();

                    if (!total) {
                        // this is the same as C#'s (Noda) and python (isodate)...
                        // but not other JS (goog.date)
                        return 'P0D';
                    }

                    var totalSign = total < 0 ? '-' : '';
                    var ymSign = sign(this._months) !== sign(total) ? '-' : '';
                    var daysSign = sign(this._days) !== sign(total) ? '-' : '';
                    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

                    return totalSign + 'P' +
                        (Y ? ymSign + Y + 'Y' : '') +
                        (M ? ymSign + M + 'M' : '') +
                        (D ? daysSign + D + 'D' : '') +
                        ((h || m || s) ? 'T' : '') +
                        (h ? hmsSign + h + 'H' : '') +
                        (m ? hmsSign + m + 'M' : '') +
                        (s ? hmsSign + s + 'S' : '');
                }

                var proto$2 = Duration.prototype;

                proto$2.isValid = isValid$1;
                proto$2.abs = abs;
                proto$2.add = add$1;
                proto$2.subtract = subtract$1;
                proto$2.as = as;
                proto$2.asMilliseconds = asMilliseconds;
                proto$2.asSeconds = asSeconds;
                proto$2.asMinutes = asMinutes;
                proto$2.asHours = asHours;
                proto$2.asDays = asDays;
                proto$2.asWeeks = asWeeks;
                proto$2.asMonths = asMonths;
                proto$2.asYears = asYears;
                proto$2.valueOf = valueOf$1;
                proto$2._bubble = bubble;
                proto$2.clone = clone$1;
                proto$2.get = get$2;
                proto$2.milliseconds = milliseconds;
                proto$2.seconds = seconds;
                proto$2.minutes = minutes;
                proto$2.hours = hours;
                proto$2.days = days;
                proto$2.weeks = weeks;
                proto$2.months = months;
                proto$2.years = years;
                proto$2.humanize = humanize;
                proto$2.toISOString = toISOString$1;
                proto$2.toString = toISOString$1;
                proto$2.toJSON = toISOString$1;
                proto$2.locale = locale;
                proto$2.localeData = localeData;

                proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
                proto$2.lang = lang;

                // Side effect imports

                // FORMATTING

                addFormatToken('X', 0, 0, 'unix');
                addFormatToken('x', 0, 0, 'valueOf');

                // PARSING

                addRegexToken('x', matchSigned);
                addRegexToken('X', matchTimestamp);
                addParseToken('X', function (input, array, config) {
                    config._d = new Date(parseFloat(input, 10) * 1000);
                });
                addParseToken('x', function (input, array, config) {
                    config._d = new Date(toInt(input));
                });

                // Side effect imports


                hooks.version = '2.22.2';

                setHookCallback(createLocal);

                hooks.fn = proto;
                hooks.min = min;
                hooks.max = max;
                hooks.now = now;
                hooks.utc = createUTC;
                hooks.unix = createUnix;
                hooks.months = listMonths;
                hooks.isDate = isDate;
                hooks.locale = getSetGlobalLocale;
                hooks.invalid = createInvalid;
                hooks.duration = createDuration;
                hooks.isMoment = isMoment;
                hooks.weekdays = listWeekdays;
                hooks.parseZone = createInZone;
                hooks.localeData = getLocale;
                hooks.isDuration = isDuration;
                hooks.monthsShort = listMonthsShort;
                hooks.weekdaysMin = listWeekdaysMin;
                hooks.defineLocale = defineLocale;
                hooks.updateLocale = updateLocale;
                hooks.locales = listLocales;
                hooks.weekdaysShort = listWeekdaysShort;
                hooks.normalizeUnits = normalizeUnits;
                hooks.relativeTimeRounding = getSetRelativeTimeRounding;
                hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
                hooks.calendarFormat = getCalendarFormat;
                hooks.prototype = proto;

                // currently HTML5 input type only supports 24-hour formats
                hooks.HTML5_FMT = {
                    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
                    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
                    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
                    DATE: 'YYYY-MM-DD',                             // <input type="date" />
                    TIME: 'HH:mm',                                  // <input type="time" />
                    TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
                    TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
                    WEEK: 'YYYY-[W]WW',                             // <input type="week" />
                    MONTH: 'YYYY-MM'                                // <input type="month" />
                };

                return hooks;

            })));

        }, {}],
        14: [function (require, module, exports) {
            (function (global) {
                /**!
                 * @fileOverview Kickass library to create and place poppers near their reference elements.
                 * @version 1.14.3
                 * @license
                 * Copyright (c) 2016 Federico Zivolo and contributors
                 *
                 * Permission is hereby granted, free of charge, to any person obtaining a copy
                 * of this software and associated documentation files (the "Software"), to deal
                 * in the Software without restriction, including without limitation the rights
                 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                 * copies of the Software, and to permit persons to whom the Software is
                 * furnished to do so, subject to the following conditions:
                 *
                 * The above copyright notice and this permission notice shall be included in all
                 * copies or substantial portions of the Software.
                 *
                 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                 * SOFTWARE.
                 */
                (function (global, factory) {
                    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
                        typeof define === 'function' && define.amd ? define(factory) :
                            (global.Popper = factory());
                }(this, (function () {
                    'use strict';

                    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';

                    var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
                    var timeoutDuration = 0;
                    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
                        if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
                            timeoutDuration = 1;
                            break;
                        }
                    }

                    function microtaskDebounce(fn) {
                        var called = false;
                        return function () {
                            if (called) {
                                return;
                            }
                            called = true;
                            window.Promise.resolve().then(function () {
                                called = false;
                                fn();
                            });
                        };
                    }

                    function taskDebounce(fn) {
                        var scheduled = false;
                        return function () {
                            if (!scheduled) {
                                scheduled = true;
                                setTimeout(function () {
                                    scheduled = false;
                                    fn();
                                }, timeoutDuration);
                            }
                        };
                    }

                    var supportsMicroTasks = isBrowser && window.Promise;

                    /**
                     * Create a debounced version of a method, that's asynchronously deferred
                     * but called in the minimum time possible.
                     *
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Function} fn
                     * @returns {Function}
                     */
                    var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

                    /**
                     * Check if the given variable is a function
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Any} functionToCheck - variable to check
                     * @returns {Boolean} answer to: is a function?
                     */
                    function isFunction(functionToCheck) {
                        var getType = {};
                        return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
                    }

                    /**
                     * Get CSS computed property of the given element
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Eement} element
                     * @argument {String} property
                     */
                    function getStyleComputedProperty(element, property) {
                        if (element.nodeType !== 1) {
                            return [];
                        }
                        // NOTE: 1 DOM access here
                        var css = getComputedStyle(element, null);
                        return property ? css[property] : css;
                    }

                    /**
                     * Returns the parentNode or the host of the element
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element
                     * @returns {Element} parent
                     */
                    function getParentNode(element) {
                        if (element.nodeName === 'HTML') {
                            return element;
                        }
                        return element.parentNode || element.host;
                    }

                    /**
                     * Returns the scrolling parent of the given element
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element
                     * @returns {Element} scroll parent
                     */
                    function getScrollParent(element) {
                        // Return body, `getScroll` will take care to get the correct `scrollTop` from it
                        if (!element) {
                            return document.body;
                        }

                        switch (element.nodeName) {
                            case 'HTML':
                            case 'BODY':
                                return element.ownerDocument.body;
                            case '#document':
                                return element.body;
                        }

                        // Firefox want us to check `-x` and `-y` variations as well

                        var _getStyleComputedProp = getStyleComputedProperty(element),
                            overflow = _getStyleComputedProp.overflow,
                            overflowX = _getStyleComputedProp.overflowX,
                            overflowY = _getStyleComputedProp.overflowY;

                        if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
                            return element;
                        }

                        return getScrollParent(getParentNode(element));
                    }

                    var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
                    var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

                    /**
                     * Determines if the browser is Internet Explorer
                     * @method
                     * @memberof Popper.Utils
                     * @param {Number} version to check
                     * @returns {Boolean} isIE
                     */
                    function isIE(version) {
                        if (version === 11) {
                            return isIE11;
                        }
                        if (version === 10) {
                            return isIE10;
                        }
                        return isIE11 || isIE10;
                    }

                    /**
                     * Returns the offset parent of the given element
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element
                     * @returns {Element} offset parent
                     */
                    function getOffsetParent(element) {
                        if (!element) {
                            return document.documentElement;
                        }

                        var noOffsetParent = isIE(10) ? document.body : null;

                        // NOTE: 1 DOM access here
                        var offsetParent = element.offsetParent;
                        // Skip hidden elements which don't have an offsetParent
                        while (offsetParent === noOffsetParent && element.nextElementSibling) {
                            offsetParent = (element = element.nextElementSibling).offsetParent;
                        }

                        var nodeName = offsetParent && offsetParent.nodeName;

                        if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
                            return element ? element.ownerDocument.documentElement : document.documentElement;
                        }

                        // .offsetParent will return the closest TD or TABLE in case
                        // no offsetParent is present, I hate this job...
                        if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
                            return getOffsetParent(offsetParent);
                        }

                        return offsetParent;
                    }

                    function isOffsetContainer(element) {
                        var nodeName = element.nodeName;

                        if (nodeName === 'BODY') {
                            return false;
                        }
                        return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
                    }

                    /**
                     * Finds the root node (document, shadowDOM root) of the given element
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} node
                     * @returns {Element} root node
                     */
                    function getRoot(node) {
                        if (node.parentNode !== null) {
                            return getRoot(node.parentNode);
                        }

                        return node;
                    }

                    /**
                     * Finds the offset parent common to the two provided nodes
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element1
                     * @argument {Element} element2
                     * @returns {Element} common offset parent
                     */
                    function findCommonOffsetParent(element1, element2) {
                        // This check is needed to avoid errors in case one of the elements isn't defined for any reason
                        if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
                            return document.documentElement;
                        }

                        // Here we make sure to give as "start" the element that comes first in the DOM
                        var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
                        var start = order ? element1 : element2;
                        var end = order ? element2 : element1;

                        // Get common ancestor container
                        var range = document.createRange();
                        range.setStart(start, 0);
                        range.setEnd(end, 0);
                        var commonAncestorContainer = range.commonAncestorContainer;

                        // Both nodes are inside #document

                        if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
                            if (isOffsetContainer(commonAncestorContainer)) {
                                return commonAncestorContainer;
                            }

                            return getOffsetParent(commonAncestorContainer);
                        }

                        // one of the nodes is inside shadowDOM, find which one
                        var element1root = getRoot(element1);
                        if (element1root.host) {
                            return findCommonOffsetParent(element1root.host, element2);
                        } else {
                            return findCommonOffsetParent(element1, getRoot(element2).host);
                        }
                    }

                    /**
                     * Gets the scroll value of the given element in the given side (top and left)
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element
                     * @argument {String} side `top` or `left`
                     * @returns {number} amount of scrolled pixels
                     */
                    function getScroll(element) {
                        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

                        var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
                        var nodeName = element.nodeName;

                        if (nodeName === 'BODY' || nodeName === 'HTML') {
                            var html = element.ownerDocument.documentElement;
                            var scrollingElement = element.ownerDocument.scrollingElement || html;
                            return scrollingElement[upperSide];
                        }

                        return element[upperSide];
                    }

                    /*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
                    function includeScroll(rect, element) {
                        var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                        var scrollTop = getScroll(element, 'top');
                        var scrollLeft = getScroll(element, 'left');
                        var modifier = subtract ? -1 : 1;
                        rect.top += scrollTop * modifier;
                        rect.bottom += scrollTop * modifier;
                        rect.left += scrollLeft * modifier;
                        rect.right += scrollLeft * modifier;
                        return rect;
                    }

                    /*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

                    function getBordersSize(styles, axis) {
                        var sideA = axis === 'x' ? 'Left' : 'Top';
                        var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

                        return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
                    }

                    function getSize(axis, body, html, computedStyle) {
                        return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
                    }

                    function getWindowSizes() {
                        var body = document.body;
                        var html = document.documentElement;
                        var computedStyle = isIE(10) && getComputedStyle(html);

                        return {
                            height: getSize('Height', body, html, computedStyle),
                            width: getSize('Width', body, html, computedStyle)
                        };
                    }

                    var classCallCheck = function (instance, Constructor) {
                        if (!(instance instanceof Constructor)) {
                            throw new TypeError("Cannot call a class as a function");
                        }
                    };

                    var createClass = function () {
                        function defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || false;
                                descriptor.configurable = true;
                                if ("value" in descriptor) descriptor.writable = true;
                                Object.defineProperty(target, descriptor.key, descriptor);
                            }
                        }

                        return function (Constructor, protoProps, staticProps) {
                            if (protoProps) defineProperties(Constructor.prototype, protoProps);
                            if (staticProps) defineProperties(Constructor, staticProps);
                            return Constructor;
                        };
                    }();


                    var defineProperty = function (obj, key, value) {
                        if (key in obj) {
                            Object.defineProperty(obj, key, {
                                value: value,
                                enumerable: true,
                                configurable: true,
                                writable: true
                            });
                        } else {
                            obj[key] = value;
                        }

                        return obj;
                    };

                    var _extends = Object.assign || function (target) {
                        for (var i = 1; i < arguments.length; i++) {
                            var source = arguments[i];

                            for (var key in source) {
                                if (Object.prototype.hasOwnProperty.call(source, key)) {
                                    target[key] = source[key];
                                }
                            }
                        }

                        return target;
                    };

                    /**
                     * Given element offsets, generate an output similar to getBoundingClientRect
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Object} offsets
                     * @returns {Object} ClientRect like output
                     */
                    function getClientRect(offsets) {
                        return _extends({}, offsets, {
                            right: offsets.left + offsets.width,
                            bottom: offsets.top + offsets.height
                        });
                    }

                    /**
                     * Get bounding client rect of given element
                     * @method
                     * @memberof Popper.Utils
                     * @param {HTMLElement} element
                     * @return {Object} client rect
                     */
                    function getBoundingClientRect(element) {
                        var rect = {};

                        // IE10 10 FIX: Please, don't ask, the element isn't
                        // considered in DOM in some circumstances...
                        // This isn't reproducible in IE10 compatibility mode of IE11
                        try {
                            if (isIE(10)) {
                                rect = element.getBoundingClientRect();
                                var scrollTop = getScroll(element, 'top');
                                var scrollLeft = getScroll(element, 'left');
                                rect.top += scrollTop;
                                rect.left += scrollLeft;
                                rect.bottom += scrollTop;
                                rect.right += scrollLeft;
                            } else {
                                rect = element.getBoundingClientRect();
                            }
                        } catch (e) {
                        }

                        var result = {
                            left: rect.left,
                            top: rect.top,
                            width: rect.right - rect.left,
                            height: rect.bottom - rect.top
                        };

                        // subtract scrollbar size from sizes
                        var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
                        var width = sizes.width || element.clientWidth || result.right - result.left;
                        var height = sizes.height || element.clientHeight || result.bottom - result.top;

                        var horizScrollbar = element.offsetWidth - width;
                        var vertScrollbar = element.offsetHeight - height;

                        // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
                        // we make this check conditional for performance reasons
                        if (horizScrollbar || vertScrollbar) {
                            var styles = getStyleComputedProperty(element);
                            horizScrollbar -= getBordersSize(styles, 'x');
                            vertScrollbar -= getBordersSize(styles, 'y');

                            result.width -= horizScrollbar;
                            result.height -= vertScrollbar;
                        }

                        return getClientRect(result);
                    }

                    function getOffsetRectRelativeToArbitraryNode(children, parent) {
                        var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                        var isIE10 = isIE(10);
                        var isHTML = parent.nodeName === 'HTML';
                        var childrenRect = getBoundingClientRect(children);
                        var parentRect = getBoundingClientRect(parent);
                        var scrollParent = getScrollParent(children);

                        var styles = getStyleComputedProperty(parent);
                        var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
                        var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

                        // In cases where the parent is fixed, we must ignore negative scroll in offset calc
                        if (fixedPosition && parent.nodeName === 'HTML') {
                            parentRect.top = Math.max(parentRect.top, 0);
                            parentRect.left = Math.max(parentRect.left, 0);
                        }
                        var offsets = getClientRect({
                            top: childrenRect.top - parentRect.top - borderTopWidth,
                            left: childrenRect.left - parentRect.left - borderLeftWidth,
                            width: childrenRect.width,
                            height: childrenRect.height
                        });
                        offsets.marginTop = 0;
                        offsets.marginLeft = 0;

                        // Subtract margins of documentElement in case it's being used as parent
                        // we do this only on HTML because it's the only element that behaves
                        // differently when margins are applied to it. The margins are included in
                        // the box of the documentElement, in the other cases not.
                        if (!isIE10 && isHTML) {
                            var marginTop = parseFloat(styles.marginTop, 10);
                            var marginLeft = parseFloat(styles.marginLeft, 10);

                            offsets.top -= borderTopWidth - marginTop;
                            offsets.bottom -= borderTopWidth - marginTop;
                            offsets.left -= borderLeftWidth - marginLeft;
                            offsets.right -= borderLeftWidth - marginLeft;

                            // Attach marginTop and marginLeft because in some circumstances we may need them
                            offsets.marginTop = marginTop;
                            offsets.marginLeft = marginLeft;
                        }

                        if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
                            offsets = includeScroll(offsets, parent);
                        }

                        return offsets;
                    }

                    function getViewportOffsetRectRelativeToArtbitraryNode(element) {
                        var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                        var html = element.ownerDocument.documentElement;
                        var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
                        var width = Math.max(html.clientWidth, window.innerWidth || 0);
                        var height = Math.max(html.clientHeight, window.innerHeight || 0);

                        var scrollTop = !excludeScroll ? getScroll(html) : 0;
                        var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

                        var offset = {
                            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
                            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
                            width: width,
                            height: height
                        };

                        return getClientRect(offset);
                    }

                    /**
                     * Check if the given element is fixed or is inside a fixed parent
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element
                     * @argument {Element} customContainer
                     * @returns {Boolean} answer to "isFixed?"
                     */
                    function isFixed(element) {
                        var nodeName = element.nodeName;
                        if (nodeName === 'BODY' || nodeName === 'HTML') {
                            return false;
                        }
                        if (getStyleComputedProperty(element, 'position') === 'fixed') {
                            return true;
                        }
                        return isFixed(getParentNode(element));
                    }

                    /**
                     * Finds the first parent of an element that has a transformed property defined
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element
                     * @returns {Element} first transformed parent or documentElement
                     */

                    function getFixedPositionOffsetParent(element) {
                        // This check is needed to avoid errors in case one of the elements isn't defined for any reason
                        if (!element || !element.parentElement || isIE()) {
                            return document.documentElement;
                        }
                        var el = element.parentElement;
                        while (el && getStyleComputedProperty(el, 'transform') === 'none') {
                            el = el.parentElement;
                        }
                        return el || document.documentElement;
                    }

                    /**
                     * Computed the boundaries limits and return them
                     * @method
                     * @memberof Popper.Utils
                     * @param {HTMLElement} popper
                     * @param {HTMLElement} reference
                     * @param {number} padding
                     * @param {HTMLElement} boundariesElement - Element used to define the boundaries
                     * @param {Boolean} fixedPosition - Is in fixed position mode
                     * @returns {Object} Coordinates of the boundaries
                     */
                    function getBoundaries(popper, reference, padding, boundariesElement) {
                        var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

                        // NOTE: 1 DOM access here

                        var boundaries = {top: 0, left: 0};
                        var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);

                        // Handle viewport case
                        if (boundariesElement === 'viewport') {
                            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
                        } else {
                            // Handle other cases based on DOM element used as boundaries
                            var boundariesNode = void 0;
                            if (boundariesElement === 'scrollParent') {
                                boundariesNode = getScrollParent(getParentNode(reference));
                                if (boundariesNode.nodeName === 'BODY') {
                                    boundariesNode = popper.ownerDocument.documentElement;
                                }
                            } else if (boundariesElement === 'window') {
                                boundariesNode = popper.ownerDocument.documentElement;
                            } else {
                                boundariesNode = boundariesElement;
                            }

                            var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

                            // In case of HTML, we need a different computation
                            if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
                                var _getWindowSizes = getWindowSizes(),
                                    height = _getWindowSizes.height,
                                    width = _getWindowSizes.width;

                                boundaries.top += offsets.top - offsets.marginTop;
                                boundaries.bottom = height + offsets.top;
                                boundaries.left += offsets.left - offsets.marginLeft;
                                boundaries.right = width + offsets.left;
                            } else {
                                // for all the other DOM elements, this one is good
                                boundaries = offsets;
                            }
                        }

                        // Add paddings
                        boundaries.left += padding;
                        boundaries.top += padding;
                        boundaries.right -= padding;
                        boundaries.bottom -= padding;

                        return boundaries;
                    }

                    function getArea(_ref) {
                        var width = _ref.width,
                            height = _ref.height;

                        return width * height;
                    }

                    /**
                     * Utility used to transform the `auto` placement to the placement with more
                     * available space.
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Object} data - The data object generated by update method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
                        var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

                        if (placement.indexOf('auto') === -1) {
                            return placement;
                        }

                        var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

                        var rects = {
                            top: {
                                width: boundaries.width,
                                height: refRect.top - boundaries.top
                            },
                            right: {
                                width: boundaries.right - refRect.right,
                                height: boundaries.height
                            },
                            bottom: {
                                width: boundaries.width,
                                height: boundaries.bottom - refRect.bottom
                            },
                            left: {
                                width: refRect.left - boundaries.left,
                                height: boundaries.height
                            }
                        };

                        var sortedAreas = Object.keys(rects).map(function (key) {
                            return _extends({
                                key: key
                            }, rects[key], {
                                area: getArea(rects[key])
                            });
                        }).sort(function (a, b) {
                            return b.area - a.area;
                        });

                        var filteredAreas = sortedAreas.filter(function (_ref2) {
                            var width = _ref2.width,
                                height = _ref2.height;
                            return width >= popper.clientWidth && height >= popper.clientHeight;
                        });

                        var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

                        var variation = placement.split('-')[1];

                        return computedPlacement + (variation ? '-' + variation : '');
                    }

                    /**
                     * Get offsets to the reference element
                     * @method
                     * @memberof Popper.Utils
                     * @param {Object} state
                     * @param {Element} popper - the popper element
                     * @param {Element} reference - the reference element (the popper will be relative to this)
                     * @param {Element} fixedPosition - is in fixed position mode
                     * @returns {Object} An object containing the offsets which will be applied to the popper
                     */
                    function getReferenceOffsets(state, popper, reference) {
                        var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

                        var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
                        return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
                    }

                    /**
                     * Get the outer sizes of the given element (offset size + margins)
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element
                     * @returns {Object} object containing width and height properties
                     */
                    function getOuterSizes(element) {
                        var styles = getComputedStyle(element);
                        var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
                        var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
                        var result = {
                            width: element.offsetWidth + y,
                            height: element.offsetHeight + x
                        };
                        return result;
                    }

                    /**
                     * Get the opposite placement of the given one
                     * @method
                     * @memberof Popper.Utils
                     * @argument {String} placement
                     * @returns {String} flipped placement
                     */
                    function getOppositePlacement(placement) {
                        var hash = {left: 'right', right: 'left', bottom: 'top', top: 'bottom'};
                        return placement.replace(/left|right|bottom|top/g, function (matched) {
                            return hash[matched];
                        });
                    }

                    /**
                     * Get offsets to the popper
                     * @method
                     * @memberof Popper.Utils
                     * @param {Object} position - CSS position the Popper will get applied
                     * @param {HTMLElement} popper - the popper element
                     * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
                     * @param {String} placement - one of the valid placement options
                     * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
                     */
                    function getPopperOffsets(popper, referenceOffsets, placement) {
                        placement = placement.split('-')[0];

                        // Get popper node sizes
                        var popperRect = getOuterSizes(popper);

                        // Add position, width and height to our offsets object
                        var popperOffsets = {
                            width: popperRect.width,
                            height: popperRect.height
                        };

                        // depending by the popper placement we have to compute its offsets slightly differently
                        var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
                        var mainSide = isHoriz ? 'top' : 'left';
                        var secondarySide = isHoriz ? 'left' : 'top';
                        var measurement = isHoriz ? 'height' : 'width';
                        var secondaryMeasurement = !isHoriz ? 'height' : 'width';

                        popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
                        if (placement === secondarySide) {
                            popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
                        } else {
                            popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
                        }

                        return popperOffsets;
                    }

                    /**
                     * Mimics the `find` method of Array
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Array} arr
                     * @argument prop
                     * @argument value
                     * @returns index or -1
                     */
                    function find(arr, check) {
                        // use native find if supported
                        if (Array.prototype.find) {
                            return arr.find(check);
                        }

                        // use `filter` to obtain the same behavior of `find`
                        return arr.filter(check)[0];
                    }

                    /**
                     * Return the index of the matching object
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Array} arr
                     * @argument prop
                     * @argument value
                     * @returns index or -1
                     */
                    function findIndex(arr, prop, value) {
                        // use native findIndex if supported
                        if (Array.prototype.findIndex) {
                            return arr.findIndex(function (cur) {
                                return cur[prop] === value;
                            });
                        }

                        // use `find` + `indexOf` if `findIndex` isn't supported
                        var match = find(arr, function (obj) {
                            return obj[prop] === value;
                        });
                        return arr.indexOf(match);
                    }

                    /**
                     * Loop trough the list of modifiers and run them in order,
                     * each of them will then edit the data object.
                     * @method
                     * @memberof Popper.Utils
                     * @param {dataObject} data
                     * @param {Array} modifiers
                     * @param {String} ends - Optional modifier name used as stopper
                     * @returns {dataObject}
                     */
                    function runModifiers(modifiers, data, ends) {
                        var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

                        modifiersToRun.forEach(function (modifier) {
                            if (modifier['function']) {
                                // eslint-disable-line dot-notation
                                console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
                            }
                            var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
                            if (modifier.enabled && isFunction(fn)) {
                                // Add properties to offsets to make them a complete clientRect object
                                // we do this before each modifier to make sure the previous one doesn't
                                // mess with these values
                                data.offsets.popper = getClientRect(data.offsets.popper);
                                data.offsets.reference = getClientRect(data.offsets.reference);

                                data = fn(data, modifier);
                            }
                        });

                        return data;
                    }

                    /**
                     * Updates the position of the popper, computing the new offsets and applying
                     * the new style.<br />
                     * Prefer `scheduleUpdate` over `update` because of performance reasons.
                     * @method
                     * @memberof Popper
                     */
                    function update() {
                        // if popper is destroyed, don't perform any further update
                        if (this.state.isDestroyed) {
                            return;
                        }

                        var data = {
                            instance: this,
                            styles: {},
                            arrowStyles: {},
                            attributes: {},
                            flipped: false,
                            offsets: {}
                        };

                        // compute reference element offsets
                        data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

                        // compute auto placement, store placement inside the data object,
                        // modifiers will be able to edit `placement` if needed
                        // and refer to originalPlacement to know the original value
                        data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

                        // store the computed placement inside `originalPlacement`
                        data.originalPlacement = data.placement;

                        data.positionFixed = this.options.positionFixed;

                        // compute the popper offsets
                        data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

                        data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

                        // run the modifiers
                        data = runModifiers(this.modifiers, data);

                        // the first `update` will call `onCreate` callback
                        // the other ones will call `onUpdate` callback
                        if (!this.state.isCreated) {
                            this.state.isCreated = true;
                            this.options.onCreate(data);
                        } else {
                            this.options.onUpdate(data);
                        }
                    }

                    /**
                     * Helper used to know if the given modifier is enabled.
                     * @method
                     * @memberof Popper.Utils
                     * @returns {Boolean}
                     */
                    function isModifierEnabled(modifiers, modifierName) {
                        return modifiers.some(function (_ref) {
                            var name = _ref.name,
                                enabled = _ref.enabled;
                            return enabled && name === modifierName;
                        });
                    }

                    /**
                     * Get the prefixed supported property name
                     * @method
                     * @memberof Popper.Utils
                     * @argument {String} property (camelCase)
                     * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
                     */
                    function getSupportedPropertyName(property) {
                        var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
                        var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

                        for (var i = 0; i < prefixes.length; i++) {
                            var prefix = prefixes[i];
                            var toCheck = prefix ? '' + prefix + upperProp : property;
                            if (typeof document.body.style[toCheck] !== 'undefined') {
                                return toCheck;
                            }
                        }
                        return null;
                    }

                    /**
                     * Destroy the popper
                     * @method
                     * @memberof Popper
                     */
                    function destroy() {
                        this.state.isDestroyed = true;

                        // touch DOM only if `applyStyle` modifier is enabled
                        if (isModifierEnabled(this.modifiers, 'applyStyle')) {
                            this.popper.removeAttribute('x-placement');
                            this.popper.style.position = '';
                            this.popper.style.top = '';
                            this.popper.style.left = '';
                            this.popper.style.right = '';
                            this.popper.style.bottom = '';
                            this.popper.style.willChange = '';
                            this.popper.style[getSupportedPropertyName('transform')] = '';
                        }

                        this.disableEventListeners();

                        // remove the popper if user explicity asked for the deletion on destroy
                        // do not use `remove` because IE11 doesn't support it
                        if (this.options.removeOnDestroy) {
                            this.popper.parentNode.removeChild(this.popper);
                        }
                        return this;
                    }

                    /**
                     * Get the window associated with the element
                     * @argument {Element} element
                     * @returns {Window}
                     */
                    function getWindow(element) {
                        var ownerDocument = element.ownerDocument;
                        return ownerDocument ? ownerDocument.defaultView : window;
                    }

                    function attachToScrollParents(scrollParent, event, callback, scrollParents) {
                        var isBody = scrollParent.nodeName === 'BODY';
                        var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
                        target.addEventListener(event, callback, {passive: true});

                        if (!isBody) {
                            attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
                        }
                        scrollParents.push(target);
                    }

                    /**
                     * Setup needed event listeners used to update the popper position
                     * @method
                     * @memberof Popper.Utils
                     * @private
                     */
                    function setupEventListeners(reference, options, state, updateBound) {
                        // Resize event listener on window
                        state.updateBound = updateBound;
                        getWindow(reference).addEventListener('resize', state.updateBound, {passive: true});

                        // Scroll event listener on scroll parents
                        var scrollElement = getScrollParent(reference);
                        attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
                        state.scrollElement = scrollElement;
                        state.eventsEnabled = true;

                        return state;
                    }

                    /**
                     * It will add resize/scroll events and start recalculating
                     * position of the popper element when they are triggered.
                     * @method
                     * @memberof Popper
                     */
                    function enableEventListeners() {
                        if (!this.state.eventsEnabled) {
                            this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
                        }
                    }

                    /**
                     * Remove event listeners used to update the popper position
                     * @method
                     * @memberof Popper.Utils
                     * @private
                     */
                    function removeEventListeners(reference, state) {
                        // Remove resize event listener on window
                        getWindow(reference).removeEventListener('resize', state.updateBound);

                        // Remove scroll event listener on scroll parents
                        state.scrollParents.forEach(function (target) {
                            target.removeEventListener('scroll', state.updateBound);
                        });

                        // Reset state
                        state.updateBound = null;
                        state.scrollParents = [];
                        state.scrollElement = null;
                        state.eventsEnabled = false;
                        return state;
                    }

                    /**
                     * It will remove resize/scroll events and won't recalculate popper position
                     * when they are triggered. It also won't trigger onUpdate callback anymore,
                     * unless you call `update` method manually.
                     * @method
                     * @memberof Popper
                     */
                    function disableEventListeners() {
                        if (this.state.eventsEnabled) {
                            cancelAnimationFrame(this.scheduleUpdate);
                            this.state = removeEventListeners(this.reference, this.state);
                        }
                    }

                    /**
                     * Tells if a given input is a number
                     * @method
                     * @memberof Popper.Utils
                     * @param {*} input to check
                     * @return {Boolean}
                     */
                    function isNumeric(n) {
                        return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
                    }

                    /**
                     * Set the style to the given popper
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element - Element to apply the style to
                     * @argument {Object} styles
                     * Object with a list of properties and values which will be applied to the element
                     */
                    function setStyles(element, styles) {
                        Object.keys(styles).forEach(function (prop) {
                            var unit = '';
                            // add unit if the value is numeric and is one of the following
                            if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
                                unit = 'px';
                            }
                            element.style[prop] = styles[prop] + unit;
                        });
                    }

                    /**
                     * Set the attributes to the given popper
                     * @method
                     * @memberof Popper.Utils
                     * @argument {Element} element - Element to apply the attributes to
                     * @argument {Object} styles
                     * Object with a list of properties and values which will be applied to the element
                     */
                    function setAttributes(element, attributes) {
                        Object.keys(attributes).forEach(function (prop) {
                            var value = attributes[prop];
                            if (value !== false) {
                                element.setAttribute(prop, attributes[prop]);
                            } else {
                                element.removeAttribute(prop);
                            }
                        });
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by `update` method
                     * @argument {Object} data.styles - List of style properties - values to apply to popper element
                     * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The same data object
                     */
                    function applyStyle(data) {
                        // any property present in `data.styles` will be applied to the popper,
                        // in this way we can make the 3rd party modifiers add custom styles to it
                        // Be aware, modifiers could override the properties defined in the previous
                        // lines of this modifier!
                        setStyles(data.instance.popper, data.styles);

                        // any property present in `data.attributes` will be applied to the popper,
                        // they will be set as HTML attributes of the element
                        setAttributes(data.instance.popper, data.attributes);

                        // if arrowElement is defined and arrowStyles has some properties
                        if (data.arrowElement && Object.keys(data.arrowStyles).length) {
                            setStyles(data.arrowElement, data.arrowStyles);
                        }

                        return data;
                    }

                    /**
                     * Set the x-placement attribute before everything else because it could be used
                     * to add margins to the popper margins needs to be calculated to get the
                     * correct popper offsets.
                     * @method
                     * @memberof Popper.modifiers
                     * @param {HTMLElement} reference - The reference element used to position the popper
                     * @param {HTMLElement} popper - The HTML element used as popper
                     * @param {Object} options - Popper.js options
                     */
                    function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
                        // compute reference element offsets
                        var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

                        // compute auto placement, store placement inside the data object,
                        // modifiers will be able to edit `placement` if needed
                        // and refer to originalPlacement to know the original value
                        var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

                        popper.setAttribute('x-placement', placement);

                        // Apply `position` to popper before anything else because
                        // without the position applied we can't guarantee correct computations
                        setStyles(popper, {position: options.positionFixed ? 'fixed' : 'absolute'});

                        return options;
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by `update` method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function computeStyle(data, options) {
                        var x = options.x,
                            y = options.y;
                        var popper = data.offsets.popper;

                        // Remove this legacy support in Popper.js v2

                        var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
                            return modifier.name === 'applyStyle';
                        }).gpuAcceleration;
                        if (legacyGpuAccelerationOption !== undefined) {
                            console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
                        }
                        var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

                        var offsetParent = getOffsetParent(data.instance.popper);
                        var offsetParentRect = getBoundingClientRect(offsetParent);

                        // Styles
                        var styles = {
                            position: popper.position
                        };

                        // Avoid blurry text by using full pixel integers.
                        // For pixel-perfect positioning, top/bottom prefers rounded
                        // values, while left/right prefers floored values.
                        var offsets = {
                            left: Math.floor(popper.left),
                            top: Math.round(popper.top),
                            bottom: Math.round(popper.bottom),
                            right: Math.floor(popper.right)
                        };

                        var sideA = x === 'bottom' ? 'top' : 'bottom';
                        var sideB = y === 'right' ? 'left' : 'right';

                        // if gpuAcceleration is set to `true` and transform is supported,
                        //  we use `translate3d` to apply the position to the popper we
                        // automatically use the supported prefixed version if needed
                        var prefixedProperty = getSupportedPropertyName('transform');

                        // now, let's make a step back and look at this code closely (wtf?)
                        // If the content of the popper grows once it's been positioned, it
                        // may happen that the popper gets misplaced because of the new content
                        // overflowing its reference element
                        // To avoid this problem, we provide two options (x and y), which allow
                        // the consumer to define the offset origin.
                        // If we position a popper on top of a reference element, we can set
                        // `x` to `top` to make the popper grow towards its top instead of
                        // its bottom.
                        var left = void 0,
                            top = void 0;
                        if (sideA === 'bottom') {
                            top = -offsetParentRect.height + offsets.bottom;
                        } else {
                            top = offsets.top;
                        }
                        if (sideB === 'right') {
                            left = -offsetParentRect.width + offsets.right;
                        } else {
                            left = offsets.left;
                        }
                        if (gpuAcceleration && prefixedProperty) {
                            styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
                            styles[sideA] = 0;
                            styles[sideB] = 0;
                            styles.willChange = 'transform';
                        } else {
                            // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
                            var invertTop = sideA === 'bottom' ? -1 : 1;
                            var invertLeft = sideB === 'right' ? -1 : 1;
                            styles[sideA] = top * invertTop;
                            styles[sideB] = left * invertLeft;
                            styles.willChange = sideA + ', ' + sideB;
                        }

                        // Attributes
                        var attributes = {
                            'x-placement': data.placement
                        };

                        // Update `data` attributes, styles and arrowStyles
                        data.attributes = _extends({}, attributes, data.attributes);
                        data.styles = _extends({}, styles, data.styles);
                        data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

                        return data;
                    }

                    /**
                     * Helper used to know if the given modifier depends from another one.<br />
                     * It checks if the needed modifier is listed and enabled.
                     * @method
                     * @memberof Popper.Utils
                     * @param {Array} modifiers - list of modifiers
                     * @param {String} requestingName - name of requesting modifier
                     * @param {String} requestedName - name of requested modifier
                     * @returns {Boolean}
                     */
                    function isModifierRequired(modifiers, requestingName, requestedName) {
                        var requesting = find(modifiers, function (_ref) {
                            var name = _ref.name;
                            return name === requestingName;
                        });

                        var isRequired = !!requesting && modifiers.some(function (modifier) {
                            return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
                        });

                        if (!isRequired) {
                            var _requesting = '`' + requestingName + '`';
                            var requested = '`' + requestedName + '`';
                            console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
                        }
                        return isRequired;
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by update method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function arrow(data, options) {
                        var _data$offsets$arrow;

                        // arrow depends on keepTogether in order to work
                        if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
                            return data;
                        }

                        var arrowElement = options.element;

                        // if arrowElement is a string, suppose it's a CSS selector
                        if (typeof arrowElement === 'string') {
                            arrowElement = data.instance.popper.querySelector(arrowElement);

                            // if arrowElement is not found, don't run the modifier
                            if (!arrowElement) {
                                return data;
                            }
                        } else {
                            // if the arrowElement isn't a query selector we must check that the
                            // provided DOM node is child of its popper node
                            if (!data.instance.popper.contains(arrowElement)) {
                                console.warn('WARNING: `arrow.element` must be child of its popper element!');
                                return data;
                            }
                        }

                        var placement = data.placement.split('-')[0];
                        var _data$offsets = data.offsets,
                            popper = _data$offsets.popper,
                            reference = _data$offsets.reference;

                        var isVertical = ['left', 'right'].indexOf(placement) !== -1;

                        var len = isVertical ? 'height' : 'width';
                        var sideCapitalized = isVertical ? 'Top' : 'Left';
                        var side = sideCapitalized.toLowerCase();
                        var altSide = isVertical ? 'left' : 'top';
                        var opSide = isVertical ? 'bottom' : 'right';
                        var arrowElementSize = getOuterSizes(arrowElement)[len];

                        //
                        // extends keepTogether behavior making sure the popper and its
                        // reference have enough pixels in conjuction
                        //

                        // top/left side
                        if (reference[opSide] - arrowElementSize < popper[side]) {
                            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
                        }
                        // bottom/right side
                        if (reference[side] + arrowElementSize > popper[opSide]) {
                            data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
                        }
                        data.offsets.popper = getClientRect(data.offsets.popper);

                        // compute center of the popper
                        var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

                        // Compute the sideValue using the updated popper offsets
                        // take popper margin in account because we don't have this info available
                        var css = getStyleComputedProperty(data.instance.popper);
                        var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
                        var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
                        var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

                        // prevent arrowElement from being placed not contiguously to its popper
                        sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

                        data.arrowElement = arrowElement;
                        data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

                        return data;
                    }

                    /**
                     * Get the opposite placement variation of the given one
                     * @method
                     * @memberof Popper.Utils
                     * @argument {String} placement variation
                     * @returns {String} flipped placement variation
                     */
                    function getOppositeVariation(variation) {
                        if (variation === 'end') {
                            return 'start';
                        } else if (variation === 'start') {
                            return 'end';
                        }
                        return variation;
                    }

                    /**
                     * List of accepted placements to use as values of the `placement` option.<br />
                     * Valid placements are:
                     * - `auto`
                     * - `top`
                     * - `right`
                     * - `bottom`
                     * - `left`
                     *
                     * Each placement can have a variation from this list:
                     * - `-start`
                     * - `-end`
                     *
                     * Variations are interpreted easily if you think of them as the left to right
                     * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
                     * is right.<br />
                     * Vertically (`left` and `right`), `start` is top and `end` is bottom.
                     *
                     * Some valid examples are:
                     * - `top-end` (on top of reference, right aligned)
                     * - `right-start` (on right of reference, top aligned)
                     * - `bottom` (on bottom, centered)
                     * - `auto-right` (on the side with more space available, alignment depends by placement)
                     *
                     * @static
                     * @type {Array}
                     * @enum {String}
                     * @readonly
                     * @method placements
                     * @memberof Popper
                     */
                    var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
                    var validPlacements = placements.slice(3);

                    /**
                     * Given an initial placement, returns all the subsequent placements
                     * clockwise (or counter-clockwise).
                     *
                     * @method
                     * @memberof Popper.Utils
                     * @argument {String} placement - A valid placement (it accepts variations)
                     * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
                     * @returns {Array} placements including their variations
                     */
                    function clockwise(placement) {
                        var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                        var index = validPlacements.indexOf(placement);
                        var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
                        return counter ? arr.reverse() : arr;
                    }

                    var BEHAVIORS = {
                        FLIP: 'flip',
                        CLOCKWISE: 'clockwise',
                        COUNTERCLOCKWISE: 'counterclockwise'
                    };

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by update method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function flip(data, options) {
                        // if `inner` modifier is enabled, we can't use the `flip` modifier
                        if (isModifierEnabled(data.instance.modifiers, 'inner')) {
                            return data;
                        }

                        if (data.flipped && data.placement === data.originalPlacement) {
                            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
                            return data;
                        }

                        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

                        var placement = data.placement.split('-')[0];
                        var placementOpposite = getOppositePlacement(placement);
                        var variation = data.placement.split('-')[1] || '';

                        var flipOrder = [];

                        switch (options.behavior) {
                            case BEHAVIORS.FLIP:
                                flipOrder = [placement, placementOpposite];
                                break;
                            case BEHAVIORS.CLOCKWISE:
                                flipOrder = clockwise(placement);
                                break;
                            case BEHAVIORS.COUNTERCLOCKWISE:
                                flipOrder = clockwise(placement, true);
                                break;
                            default:
                                flipOrder = options.behavior;
                        }

                        flipOrder.forEach(function (step, index) {
                            if (placement !== step || flipOrder.length === index + 1) {
                                return data;
                            }

                            placement = data.placement.split('-')[0];
                            placementOpposite = getOppositePlacement(placement);

                            var popperOffsets = data.offsets.popper;
                            var refOffsets = data.offsets.reference;

                            // using floor because the reference offsets may contain decimals we are not going to consider here
                            var floor = Math.floor;
                            var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

                            var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
                            var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
                            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
                            var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

                            var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

                            // flip the variation if required
                            var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
                            var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

                            if (overlapsRef || overflowsBoundaries || flippedVariation) {
                                // this boolean to detect any flip loop
                                data.flipped = true;

                                if (overlapsRef || overflowsBoundaries) {
                                    placement = flipOrder[index + 1];
                                }

                                if (flippedVariation) {
                                    variation = getOppositeVariation(variation);
                                }

                                data.placement = placement + (variation ? '-' + variation : '');

                                // this object contains `position`, we want to preserve it along with
                                // any additional property we may add in the future
                                data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

                                data = runModifiers(data.instance.modifiers, data, 'flip');
                            }
                        });
                        return data;
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by update method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function keepTogether(data) {
                        var _data$offsets = data.offsets,
                            popper = _data$offsets.popper,
                            reference = _data$offsets.reference;

                        var placement = data.placement.split('-')[0];
                        var floor = Math.floor;
                        var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
                        var side = isVertical ? 'right' : 'bottom';
                        var opSide = isVertical ? 'left' : 'top';
                        var measurement = isVertical ? 'width' : 'height';

                        if (popper[side] < floor(reference[opSide])) {
                            data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
                        }
                        if (popper[opSide] > floor(reference[side])) {
                            data.offsets.popper[opSide] = floor(reference[side]);
                        }

                        return data;
                    }

                    /**
                     * Converts a string containing value + unit into a px value number
                     * @function
                     * @memberof {modifiers~offset}
                     * @private
                     * @argument {String} str - Value + unit string
                     * @argument {String} measurement - `height` or `width`
                     * @argument {Object} popperOffsets
                     * @argument {Object} referenceOffsets
                     * @returns {Number|String}
                     * Value in pixels, or original string if no values were extracted
                     */
                    function toValue(str, measurement, popperOffsets, referenceOffsets) {
                        // separate value from unit
                        var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
                        var value = +split[1];
                        var unit = split[2];

                        // If it's not a number it's an operator, I guess
                        if (!value) {
                            return str;
                        }

                        if (unit.indexOf('%') === 0) {
                            var element = void 0;
                            switch (unit) {
                                case '%p':
                                    element = popperOffsets;
                                    break;
                                case '%':
                                case '%r':
                                default:
                                    element = referenceOffsets;
                            }

                            var rect = getClientRect(element);
                            return rect[measurement] / 100 * value;
                        } else if (unit === 'vh' || unit === 'vw') {
                            // if is a vh or vw, we calculate the size based on the viewport
                            var size = void 0;
                            if (unit === 'vh') {
                                size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
                            } else {
                                size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
                            }
                            return size / 100 * value;
                        } else {
                            // if is an explicit pixel unit, we get rid of the unit and keep the value
                            // if is an implicit unit, it's px, and we return just the value
                            return value;
                        }
                    }

                    /**
                     * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
                     * @function
                     * @memberof {modifiers~offset}
                     * @private
                     * @argument {String} offset
                     * @argument {Object} popperOffsets
                     * @argument {Object} referenceOffsets
                     * @argument {String} basePlacement
                     * @returns {Array} a two cells array with x and y offsets in numbers
                     */
                    function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
                        var offsets = [0, 0];

                        // Use height if placement is left or right and index is 0 otherwise use width
                        // in this way the first offset will use an axis and the second one
                        // will use the other one
                        var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

                        // Split the offset string to obtain a list of values and operands
                        // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
                        var fragments = offset.split(/(\+|\-)/).map(function (frag) {
                            return frag.trim();
                        });

                        // Detect if the offset string contains a pair of values or a single one
                        // they could be separated by comma or space
                        var divider = fragments.indexOf(find(fragments, function (frag) {
                            return frag.search(/,|\s/) !== -1;
                        }));

                        if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
                            console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
                        }

                        // If divider is found, we divide the list of values and operands to divide
                        // them by ofset X and Y.
                        var splitRegex = /\s*,\s*|\s+/;
                        var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

                        // Convert the values with units to absolute pixels to allow our computations
                        ops = ops.map(function (op, index) {
                            // Most of the units rely on the orientation of the popper
                            var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
                            var mergeWithPrevious = false;
                            return op
                            // This aggregates any `+` or `-` sign that aren't considered operators
                            // e.g.: 10 + +5 => [10, +, +5]
                                .reduce(function (a, b) {
                                    if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
                                        a[a.length - 1] = b;
                                        mergeWithPrevious = true;
                                        return a;
                                    } else if (mergeWithPrevious) {
                                        a[a.length - 1] += b;
                                        mergeWithPrevious = false;
                                        return a;
                                    } else {
                                        return a.concat(b);
                                    }
                                }, [])
                                // Here we convert the string values into number values (in px)
                                .map(function (str) {
                                    return toValue(str, measurement, popperOffsets, referenceOffsets);
                                });
                        });

                        // Loop trough the offsets arrays and execute the operations
                        ops.forEach(function (op, index) {
                            op.forEach(function (frag, index2) {
                                if (isNumeric(frag)) {
                                    offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
                                }
                            });
                        });
                        return offsets;
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by update method
                     * @argument {Object} options - Modifiers configuration and options
                     * @argument {Number|String} options.offset=0
                     * The offset value as described in the modifier description
                     * @returns {Object} The data object, properly modified
                     */
                    function offset(data, _ref) {
                        var offset = _ref.offset;
                        var placement = data.placement,
                            _data$offsets = data.offsets,
                            popper = _data$offsets.popper,
                            reference = _data$offsets.reference;

                        var basePlacement = placement.split('-')[0];

                        var offsets = void 0;
                        if (isNumeric(+offset)) {
                            offsets = [+offset, 0];
                        } else {
                            offsets = parseOffset(offset, popper, reference, basePlacement);
                        }

                        if (basePlacement === 'left') {
                            popper.top += offsets[0];
                            popper.left -= offsets[1];
                        } else if (basePlacement === 'right') {
                            popper.top += offsets[0];
                            popper.left += offsets[1];
                        } else if (basePlacement === 'top') {
                            popper.left += offsets[0];
                            popper.top -= offsets[1];
                        } else if (basePlacement === 'bottom') {
                            popper.left += offsets[0];
                            popper.top += offsets[1];
                        }

                        data.popper = popper;
                        return data;
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by `update` method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function preventOverflow(data, options) {
                        var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

                        // If offsetParent is the reference element, we really want to
                        // go one step up and use the next offsetParent as reference to
                        // avoid to make this modifier completely useless and look like broken
                        if (data.instance.reference === boundariesElement) {
                            boundariesElement = getOffsetParent(boundariesElement);
                        }

                        // NOTE: DOM access here
                        // resets the popper's position so that the document size can be calculated excluding
                        // the size of the popper element itself
                        var transformProp = getSupportedPropertyName('transform');
                        var popperStyles = data.instance.popper.style; // assignment to help minification
                        var top = popperStyles.top,
                            left = popperStyles.left,
                            transform = popperStyles[transformProp];

                        popperStyles.top = '';
                        popperStyles.left = '';
                        popperStyles[transformProp] = '';

                        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

                        // NOTE: DOM access here
                        // restores the original style properties after the offsets have been computed
                        popperStyles.top = top;
                        popperStyles.left = left;
                        popperStyles[transformProp] = transform;

                        options.boundaries = boundaries;

                        var order = options.priority;
                        var popper = data.offsets.popper;

                        var check = {
                            primary: function primary(placement) {
                                var value = popper[placement];
                                if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
                                    value = Math.max(popper[placement], boundaries[placement]);
                                }
                                return defineProperty({}, placement, value);
                            },
                            secondary: function secondary(placement) {
                                var mainSide = placement === 'right' ? 'left' : 'top';
                                var value = popper[mainSide];
                                if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
                                    value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
                                }
                                return defineProperty({}, mainSide, value);
                            }
                        };

                        order.forEach(function (placement) {
                            var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
                            popper = _extends({}, popper, check[side](placement));
                        });

                        data.offsets.popper = popper;

                        return data;
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by `update` method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function shift(data) {
                        var placement = data.placement;
                        var basePlacement = placement.split('-')[0];
                        var shiftvariation = placement.split('-')[1];

                        // if shift shiftvariation is specified, run the modifier
                        if (shiftvariation) {
                            var _data$offsets = data.offsets,
                                reference = _data$offsets.reference,
                                popper = _data$offsets.popper;

                            var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
                            var side = isVertical ? 'left' : 'top';
                            var measurement = isVertical ? 'width' : 'height';

                            var shiftOffsets = {
                                start: defineProperty({}, side, reference[side]),
                                end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
                            };

                            data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
                        }

                        return data;
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by update method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function hide(data) {
                        if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
                            return data;
                        }

                        var refRect = data.offsets.reference;
                        var bound = find(data.instance.modifiers, function (modifier) {
                            return modifier.name === 'preventOverflow';
                        }).boundaries;

                        if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
                            // Avoid unnecessary DOM access if visibility hasn't changed
                            if (data.hide === true) {
                                return data;
                            }

                            data.hide = true;
                            data.attributes['x-out-of-boundaries'] = '';
                        } else {
                            // Avoid unnecessary DOM access if visibility hasn't changed
                            if (data.hide === false) {
                                return data;
                            }

                            data.hide = false;
                            data.attributes['x-out-of-boundaries'] = false;
                        }

                        return data;
                    }

                    /**
                     * @function
                     * @memberof Modifiers
                     * @argument {Object} data - The data object generated by `update` method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {Object} The data object, properly modified
                     */
                    function inner(data) {
                        var placement = data.placement;
                        var basePlacement = placement.split('-')[0];
                        var _data$offsets = data.offsets,
                            popper = _data$offsets.popper,
                            reference = _data$offsets.reference;

                        var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

                        var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

                        popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

                        data.placement = getOppositePlacement(placement);
                        data.offsets.popper = getClientRect(popper);

                        return data;
                    }

                    /**
                     * Modifier function, each modifier can have a function of this type assigned
                     * to its `fn` property.<br />
                     * These functions will be called on each update, this means that you must
                     * make sure they are performant enough to avoid performance bottlenecks.
                     *
                     * @function ModifierFn
                     * @argument {dataObject} data - The data object generated by `update` method
                     * @argument {Object} options - Modifiers configuration and options
                     * @returns {dataObject} The data object, properly modified
                     */

                    /**
                     * Modifiers are plugins used to alter the behavior of your poppers.<br />
                     * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
                     * needed by the library.
                     *
                     * Usually you don't want to override the `order`, `fn` and `onLoad` props.
                     * All the other properties are configurations that could be tweaked.
                     * @namespace modifiers
                     */
                    var modifiers = {
                        /**
                         * Modifier used to shift the popper on the start or end of its reference
                         * element.<br />
                         * It will read the variation of the `placement` property.<br />
                         * It can be one either `-end` or `-start`.
                         * @memberof modifiers
                         * @inner
                         */
                        shift: {
                            /** @prop {number} order=100 - Index used to define the order of execution */
                            order: 100,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: shift
                        },

                        /**
                         * The `offset` modifier can shift your popper on both its axis.
                         *
                         * It accepts the following units:
                         * - `px` or unitless, interpreted as pixels
                         * - `%` or `%r`, percentage relative to the length of the reference element
                         * - `%p`, percentage relative to the length of the popper element
                         * - `vw`, CSS viewport width unit
                         * - `vh`, CSS viewport height unit
                         *
                         * For length is intended the main axis relative to the placement of the popper.<br />
                         * This means that if the placement is `top` or `bottom`, the length will be the
                         * `width`. In case of `left` or `right`, it will be the height.
                         *
                         * You can provide a single value (as `Number` or `String`), or a pair of values
                         * as `String` divided by a comma or one (or more) white spaces.<br />
                         * The latter is a deprecated method because it leads to confusion and will be
                         * removed in v2.<br />
                         * Additionally, it accepts additions and subtractions between different units.
                         * Note that multiplications and divisions aren't supported.
                         *
                         * Valid examples are:
                         * ```
                         * 10
                         * '10%'
                         * '10, 10'
                         * '10%, 10'
                         * '10 + 10%'
                         * '10 - 5vh + 3%'
                         * '-10px + 5vh, 5px - 6%'
                         * ```
                         * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
                         * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
                         * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)
                         *
                         * @memberof modifiers
                         * @inner
                         */
                        offset: {
                            /** @prop {number} order=200 - Index used to define the order of execution */
                            order: 200,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: offset,
                            /** @prop {Number|String} offset=0
                             * The offset value as described in the modifier description
                             */
                            offset: 0
                        },

                        /**
                         * Modifier used to prevent the popper from being positioned outside the boundary.
                         *
                         * An scenario exists where the reference itself is not within the boundaries.<br />
                         * We can say it has "escaped the boundaries" — or just "escaped".<br />
                         * In this case we need to decide whether the popper should either:
                         *
                         * - detach from the reference and remain "trapped" in the boundaries, or
                         * - if it should ignore the boundary and "escape with its reference"
                         *
                         * When `escapeWithReference` is set to`true` and reference is completely
                         * outside its boundaries, the popper will overflow (or completely leave)
                         * the boundaries in order to remain attached to the edge of the reference.
                         *
                         * @memberof modifiers
                         * @inner
                         */
                        preventOverflow: {
                            /** @prop {number} order=300 - Index used to define the order of execution */
                            order: 300,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: preventOverflow,
                            /**
                             * @prop {Array} [priority=['left','right','top','bottom']]
                             * Popper will try to prevent overflow following these priorities by default,
                             * then, it could overflow on the left and on top of the `boundariesElement`
                             */
                            priority: ['left', 'right', 'top', 'bottom'],
                            /**
                             * @prop {number} padding=5
                             * Amount of pixel used to define a minimum distance between the boundaries
                             * and the popper this makes sure the popper has always a little padding
                             * between the edges of its container
                             */
                            padding: 5,
                            /**
                             * @prop {String|HTMLElement} boundariesElement='scrollParent'
                             * Boundaries used by the modifier, can be `scrollParent`, `window`,
                             * `viewport` or any DOM element.
                             */
                            boundariesElement: 'scrollParent'
                        },

                        /**
                         * Modifier used to make sure the reference and its popper stay near eachothers
                         * without leaving any gap between the two. Expecially useful when the arrow is
                         * enabled and you want to assure it to point to its reference element.
                         * It cares only about the first axis, you can still have poppers with margin
                         * between the popper and its reference element.
                         * @memberof modifiers
                         * @inner
                         */
                        keepTogether: {
                            /** @prop {number} order=400 - Index used to define the order of execution */
                            order: 400,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: keepTogether
                        },

                        /**
                         * This modifier is used to move the `arrowElement` of the popper to make
                         * sure it is positioned between the reference element and its popper element.
                         * It will read the outer size of the `arrowElement` node to detect how many
                         * pixels of conjuction are needed.
                         *
                         * It has no effect if no `arrowElement` is provided.
                         * @memberof modifiers
                         * @inner
                         */
                        arrow: {
                            /** @prop {number} order=500 - Index used to define the order of execution */
                            order: 500,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: arrow,
                            /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
                            element: '[x-arrow]'
                        },

                        /**
                         * Modifier used to flip the popper's placement when it starts to overlap its
                         * reference element.
                         *
                         * Requires the `preventOverflow` modifier before it in order to work.
                         *
                         * **NOTE:** this modifier will interrupt the current update cycle and will
                         * restart it if it detects the need to flip the placement.
                         * @memberof modifiers
                         * @inner
                         */
                        flip: {
                            /** @prop {number} order=600 - Index used to define the order of execution */
                            order: 600,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: flip,
                            /**
                             * @prop {String|Array} behavior='flip'
                             * The behavior used to change the popper's placement. It can be one of
                             * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
                             * placements (with optional variations).
                             */
                            behavior: 'flip',
                            /**
                             * @prop {number} padding=5
                             * The popper will flip if it hits the edges of the `boundariesElement`
                             */
                            padding: 5,
                            /**
                             * @prop {String|HTMLElement} boundariesElement='viewport'
                             * The element which will define the boundaries of the popper position,
                             * the popper will never be placed outside of the defined boundaries
                             * (except if keepTogether is enabled)
                             */
                            boundariesElement: 'viewport'
                        },

                        /**
                         * Modifier used to make the popper flow toward the inner of the reference element.
                         * By default, when this modifier is disabled, the popper will be placed outside
                         * the reference element.
                         * @memberof modifiers
                         * @inner
                         */
                        inner: {
                            /** @prop {number} order=700 - Index used to define the order of execution */
                            order: 700,
                            /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
                            enabled: false,
                            /** @prop {ModifierFn} */
                            fn: inner
                        },

                        /**
                         * Modifier used to hide the popper when its reference element is outside of the
                         * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
                         * be used to hide with a CSS selector the popper when its reference is
                         * out of boundaries.
                         *
                         * Requires the `preventOverflow` modifier before it in order to work.
                         * @memberof modifiers
                         * @inner
                         */
                        hide: {
                            /** @prop {number} order=800 - Index used to define the order of execution */
                            order: 800,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: hide
                        },

                        /**
                         * Computes the style that will be applied to the popper element to gets
                         * properly positioned.
                         *
                         * Note that this modifier will not touch the DOM, it just prepares the styles
                         * so that `applyStyle` modifier can apply it. This separation is useful
                         * in case you need to replace `applyStyle` with a custom implementation.
                         *
                         * This modifier has `850` as `order` value to maintain backward compatibility
                         * with previous versions of Popper.js. Expect the modifiers ordering method
                         * to change in future major versions of the library.
                         *
                         * @memberof modifiers
                         * @inner
                         */
                        computeStyle: {
                            /** @prop {number} order=850 - Index used to define the order of execution */
                            order: 850,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: computeStyle,
                            /**
                             * @prop {Boolean} gpuAcceleration=true
                             * If true, it uses the CSS 3d transformation to position the popper.
                             * Otherwise, it will use the `top` and `left` properties.
                             */
                            gpuAcceleration: true,
                            /**
                             * @prop {string} [x='bottom']
                             * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
                             * Change this if your popper should grow in a direction different from `bottom`
                             */
                            x: 'bottom',
                            /**
                             * @prop {string} [x='left']
                             * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
                             * Change this if your popper should grow in a direction different from `right`
                             */
                            y: 'right'
                        },

                        /**
                         * Applies the computed styles to the popper element.
                         *
                         * All the DOM manipulations are limited to this modifier. This is useful in case
                         * you want to integrate Popper.js inside a framework or view library and you
                         * want to delegate all the DOM manipulations to it.
                         *
                         * Note that if you disable this modifier, you must make sure the popper element
                         * has its position set to `absolute` before Popper.js can do its work!
                         *
                         * Just disable this modifier and define you own to achieve the desired effect.
                         *
                         * @memberof modifiers
                         * @inner
                         */
                        applyStyle: {
                            /** @prop {number} order=900 - Index used to define the order of execution */
                            order: 900,
                            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
                            enabled: true,
                            /** @prop {ModifierFn} */
                            fn: applyStyle,
                            /** @prop {Function} */
                            onLoad: applyStyleOnLoad,
                            /**
                             * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
                             * @prop {Boolean} gpuAcceleration=true
                             * If true, it uses the CSS 3d transformation to position the popper.
                             * Otherwise, it will use the `top` and `left` properties.
                             */
                            gpuAcceleration: undefined
                        }
                    };

                    /**
                     * The `dataObject` is an object containing all the informations used by Popper.js
                     * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
                     * @name dataObject
                     * @property {Object} data.instance The Popper.js instance
                     * @property {String} data.placement Placement applied to popper
                     * @property {String} data.originalPlacement Placement originally defined on init
                     * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
                     * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
                     * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
                     * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
                     * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)
                     * @property {Object} data.boundaries Offsets of the popper boundaries
                     * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
                     * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
                     * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
                     * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
                     */

                    /**
                     * Default options provided to Popper.js constructor.<br />
                     * These can be overriden using the `options` argument of Popper.js.<br />
                     * To override an option, simply pass as 3rd argument an object with the same
                     * structure of this object, example:
                     * ```
                     * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
                     * ```
                     * @type {Object}
                     * @static
                     * @memberof Popper
                     */
                    var Defaults = {
                        /**
                         * Popper's placement
                         * @prop {Popper.placements} placement='bottom'
                         */
                        placement: 'bottom',

                        /**
                         * Set this to true if you want popper to position it self in 'fixed' mode
                         * @prop {Boolean} positionFixed=false
                         */
                        positionFixed: false,

                        /**
                         * Whether events (resize, scroll) are initially enabled
                         * @prop {Boolean} eventsEnabled=true
                         */
                        eventsEnabled: true,

                        /**
                         * Set to true if you want to automatically remove the popper when
                         * you call the `destroy` method.
                         * @prop {Boolean} removeOnDestroy=false
                         */
                        removeOnDestroy: false,

                        /**
                         * Callback called when the popper is created.<br />
                         * By default, is set to no-op.<br />
                         * Access Popper.js instance with `data.instance`.
                         * @prop {onCreate}
                         */
                        onCreate: function onCreate() {
                        },

                        /**
                         * Callback called when the popper is updated, this callback is not called
                         * on the initialization/creation of the popper, but only on subsequent
                         * updates.<br />
                         * By default, is set to no-op.<br />
                         * Access Popper.js instance with `data.instance`.
                         * @prop {onUpdate}
                         */
                        onUpdate: function onUpdate() {
                        },

                        /**
                         * List of modifiers used to modify the offsets before they are applied to the popper.
                         * They provide most of the functionalities of Popper.js
                         * @prop {modifiers}
                         */
                        modifiers: modifiers
                    };

                    /**
                     * @callback onCreate
                     * @param {dataObject} data
                     */

                    /**
                     * @callback onUpdate
                     * @param {dataObject} data
                     */

// Utils
// Methods
                    var Popper = function () {
                        /**
                         * Create a new Popper.js instance
                         * @class Popper
                         * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
                         * @param {HTMLElement} popper - The HTML element used as popper.
                         * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
                         * @return {Object} instance - The generated Popper.js instance
                         */
                        function Popper(reference, popper) {
                            var _this = this;

                            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                            classCallCheck(this, Popper);

                            this.scheduleUpdate = function () {
                                return requestAnimationFrame(_this.update);
                            };

                            // make update() debounced, so that it only runs at most once-per-tick
                            this.update = debounce(this.update.bind(this));

                            // with {} we create a new object with the options inside it
                            this.options = _extends({}, Popper.Defaults, options);

                            // init state
                            this.state = {
                                isDestroyed: false,
                                isCreated: false,
                                scrollParents: []
                            };

                            // get reference and popper elements (allow jQuery wrappers)
                            this.reference = reference && reference.jquery ? reference[0] : reference;
                            this.popper = popper && popper.jquery ? popper[0] : popper;

                            // Deep merge modifiers options
                            this.options.modifiers = {};
                            Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
                                _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
                            });

                            // Refactoring modifiers' list (Object => Array)
                            this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
                                return _extends({
                                    name: name
                                }, _this.options.modifiers[name]);
                            })
                            // sort the modifiers by order
                                .sort(function (a, b) {
                                    return a.order - b.order;
                                });

                            // modifiers have the ability to execute arbitrary code when Popper.js get inited
                            // such code is executed in the same order of its modifier
                            // they could add new properties to their options configuration
                            // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
                            this.modifiers.forEach(function (modifierOptions) {
                                if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
                                    modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
                                }
                            });

                            // fire the first update to position the popper in the right place
                            this.update();

                            var eventsEnabled = this.options.eventsEnabled;
                            if (eventsEnabled) {
                                // setup event listeners, they will take care of update the position in specific situations
                                this.enableEventListeners();
                            }

                            this.state.eventsEnabled = eventsEnabled;
                        }

                        // We can't use class properties because they don't get listed in the
                        // class prototype and break stuff like Sinon stubs


                        createClass(Popper, [{
                            key: 'update',
                            value: function update$$1() {
                                return update.call(this);
                            }
                        }, {
                            key: 'destroy',
                            value: function destroy$$1() {
                                return destroy.call(this);
                            }
                        }, {
                            key: 'enableEventListeners',
                            value: function enableEventListeners$$1() {
                                return enableEventListeners.call(this);
                            }
                        }, {
                            key: 'disableEventListeners',
                            value: function disableEventListeners$$1() {
                                return disableEventListeners.call(this);
                            }

                            /**
                             * Schedule an update, it will run on the next UI update available
                             * @method scheduleUpdate
                             * @memberof Popper
                             */


                            /**
                             * Collection of utilities useful when writing custom modifiers.
                             * Starting from version 1.7, this method is available only if you
                             * include `popper-utils.js` before `popper.js`.
                             *
                             * **DEPRECATION**: This way to access PopperUtils is deprecated
                             * and will be removed in v2! Use the PopperUtils module directly instead.
                             * Due to the high instability of the methods contained in Utils, we can't
                             * guarantee them to follow semver. Use them at your own risk!
                             * @static
                             * @private
                             * @type {Object}
                             * @deprecated since version 1.8
                             * @member Utils
                             * @memberof Popper
                             */

                        }]);
                        return Popper;
                    }();

                    /**
                     * The `referenceObject` is an object that provides an interface compatible with Popper.js
                     * and lets you use it as replacement of a real DOM node.<br />
                     * You can use this method to position a popper relatively to a set of coordinates
                     * in case you don't have a DOM node to use as reference.
                     *
                     * ```
                     * new Popper(referenceObject, popperNode);
                     * ```
                     *
                     * NB: This feature isn't supported in Internet Explorer 10
                     * @name referenceObject
                     * @property {Function} data.getBoundingClientRect
                     * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
                     * @property {number} data.clientWidth
                     * An ES6 getter that will return the width of the virtual reference element.
                     * @property {number} data.clientHeight
                     * An ES6 getter that will return the height of the virtual reference element.
                     */


                    Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
                    Popper.placements = placements;
                    Popper.Defaults = Defaults;

                    return Popper;

                })));


            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {}],
        15: [function (require, module, exports) {
            !function (e, t) {
                "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("Siema", [], t) : "object" == typeof exports ? exports.Siema = t() : e.Siema = t()
            }("undefined" != typeof self ? self : this, function () {
                return function (e) {
                    function t(r) {
                        if (i[r]) return i[r].exports;
                        var n = i[r] = {i: r, l: !1, exports: {}};
                        return e[r].call(n.exports, n, n.exports, t), n.l = !0, n.exports
                    }

                    var i = {};
                    return t.m = e, t.c = i, t.d = function (e, i, r) {
                        t.o(e, i) || Object.defineProperty(e, i, {configurable: !1, enumerable: !0, get: r})
                    }, t.n = function (e) {
                        var i = e && e.__esModule ? function () {
                            return e.default
                        } : function () {
                            return e
                        };
                        return t.d(i, "a", i), i
                    }, t.o = function (e, t) {
                        return Object.prototype.hasOwnProperty.call(e, t)
                    }, t.p = "", t(t.s = 0)
                }([function (e, t, i) {
                    "use strict";

                    function r(e, t) {
                        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                    }

                    Object.defineProperty(t, "__esModule", {value: !0});
                    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
                        return typeof e
                    } : function (e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
                    }, s = function () {
                        function e(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var r = t[i];
                                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r)
                            }
                        }

                        return function (t, i, r) {
                            return i && e(t.prototype, i), r && e(t, r), t
                        }
                    }(), l = function () {
                        function e(t) {
                            var i = this;
                            if (r(this, e), this.config = e.mergeSettings(t), this.selector = "string" == typeof this.config.selector ? document.querySelector(this.config.selector) : this.config.selector, null === this.selector) throw new Error("Something wrong with your selector 😭");
                            this.resolveSlidesNumber(), this.selectorWidth = this.selector.offsetWidth, this.innerElements = [].slice.call(this.selector.children), this.currentSlide = this.config.loop ? this.config.startIndex % this.innerElements.length : Math.max(0, Math.min(this.config.startIndex, this.innerElements.length - this.perPage)), this.transformProperty = e.webkitOrNot(), ["resizeHandler", "touchstartHandler", "touchendHandler", "touchmoveHandler", "mousedownHandler", "mouseupHandler", "mouseleaveHandler", "mousemoveHandler", "clickHandler"].forEach(function (e) {
                                i[e] = i[e].bind(i)
                            }), this.init()
                        }

                        return s(e, [{
                            key: "attachEvents", value: function () {
                                window.addEventListener("resize", this.resizeHandler), this.config.draggable && (this.pointerDown = !1, this.drag = {
                                    startX: 0,
                                    endX: 0,
                                    startY: 0,
                                    letItGo: null,
                                    preventClick: !1
                                }, this.selector.addEventListener("touchstart", this.touchstartHandler), this.selector.addEventListener("touchend", this.touchendHandler), this.selector.addEventListener("touchmove", this.touchmoveHandler), this.selector.addEventListener("mousedown", this.mousedownHandler), this.selector.addEventListener("mouseup", this.mouseupHandler), this.selector.addEventListener("mouseleave", this.mouseleaveHandler), this.selector.addEventListener("mousemove", this.mousemoveHandler), this.selector.addEventListener("click", this.clickHandler))
                            }
                        }, {
                            key: "detachEvents", value: function () {
                                window.removeEventListener("resize", this.resizeHandler), this.selector.removeEventListener("touchstart", this.touchstartHandler), this.selector.removeEventListener("touchend", this.touchendHandler), this.selector.removeEventListener("touchmove", this.touchmoveHandler), this.selector.removeEventListener("mousedown", this.mousedownHandler), this.selector.removeEventListener("mouseup", this.mouseupHandler), this.selector.removeEventListener("mouseleave", this.mouseleaveHandler), this.selector.removeEventListener("mousemove", this.mousemoveHandler), this.selector.removeEventListener("click", this.clickHandler)
                            }
                        }, {
                            key: "init", value: function () {
                                this.attachEvents(), this.selector.style.overflow = "hidden", this.selector.style.direction = this.config.rtl ? "rtl" : "ltr", this.buildSliderFrame(), this.config.onInit.call(this)
                            }
                        }, {
                            key: "buildSliderFrame", value: function () {
                                var e = this.selectorWidth / this.perPage,
                                    t = this.config.loop ? this.innerElements.length + 2 * this.perPage : this.innerElements.length;
                                this.sliderFrame = document.createElement("div"), this.sliderFrame.style.width = e * t + "px", this.enableTransition(), this.config.draggable && (this.selector.style.cursor = "-webkit-grab");
                                var i = document.createDocumentFragment();
                                if (this.config.loop) for (var r = this.innerElements.length - this.perPage; r < this.innerElements.length; r++) {
                                    var n = this.buildSliderFrameItem(this.innerElements[r].cloneNode(!0));
                                    i.appendChild(n)
                                }
                                for (var s = 0; s < this.innerElements.length; s++) {
                                    var l = this.buildSliderFrameItem(this.innerElements[s]);
                                    i.appendChild(l)
                                }
                                if (this.config.loop) for (var o = 0; o < this.perPage; o++) {
                                    var a = this.buildSliderFrameItem(this.innerElements[o].cloneNode(!0));
                                    i.appendChild(a)
                                }
                                this.sliderFrame.appendChild(i), this.selector.innerHTML = "", this.selector.appendChild(this.sliderFrame), this.slideToCurrent()
                            }
                        }, {
                            key: "buildSliderFrameItem", value: function (e) {
                                var t = document.createElement("div");
                                return t.style.cssFloat = this.config.rtl ? "right" : "left", t.style.float = this.config.rtl ? "right" : "left", t.style.width = (this.config.loop ? 100 / (this.innerElements.length + 2 * this.perPage) : 100 / this.innerElements.length) + "%", t.appendChild(e), t
                            }
                        }, {
                            key: "resolveSlidesNumber", value: function () {
                                if ("number" == typeof this.config.perPage) this.perPage = this.config.perPage; else if ("object" === n(this.config.perPage)) {
                                    this.perPage = 1;
                                    for (var e in this.config.perPage) window.innerWidth >= e && (this.perPage = this.config.perPage[e])
                                }
                            }
                        }, {
                            key: "prev", value: function () {
                                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
                                    t = arguments[1];
                                if (!(this.innerElements.length <= this.perPage)) {
                                    var i = this.currentSlide;
                                    if (this.config.loop) {
                                        if (this.currentSlide - e < 0) {
                                            this.disableTransition();
                                            var r = this.currentSlide + this.innerElements.length, n = this.perPage,
                                                s = r + n,
                                                l = (this.config.rtl ? 1 : -1) * s * (this.selectorWidth / this.perPage),
                                                o = this.config.draggable ? this.drag.endX - this.drag.startX : 0;
                                            this.sliderFrame.style[this.transformProperty] = "translate3d(" + (l + o) + "px, 0, 0)", this.currentSlide = r - e
                                        } else this.currentSlide = this.currentSlide - e
                                    } else this.currentSlide = Math.max(this.currentSlide - e, 0);
                                    i !== this.currentSlide && (this.slideToCurrent(this.config.loop), this.config.onChange.call(this), t && t.call(this))
                                }
                            }
                        }, {
                            key: "next", value: function () {
                                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
                                    t = arguments[1];
                                if (!(this.innerElements.length <= this.perPage)) {
                                    var i = this.currentSlide;
                                    if (this.config.loop) {
                                        if (this.currentSlide + e > this.innerElements.length - this.perPage) {
                                            this.disableTransition();
                                            var r = this.currentSlide - this.innerElements.length, n = this.perPage,
                                                s = r + n,
                                                l = (this.config.rtl ? 1 : -1) * s * (this.selectorWidth / this.perPage),
                                                o = this.config.draggable ? this.drag.endX - this.drag.startX : 0;
                                            this.sliderFrame.style[this.transformProperty] = "translate3d(" + (l + o) + "px, 0, 0)", this.currentSlide = r + e
                                        } else this.currentSlide = this.currentSlide + e
                                    } else this.currentSlide = Math.min(this.currentSlide + e, this.innerElements.length - this.perPage);
                                    i !== this.currentSlide && (this.slideToCurrent(this.config.loop), this.config.onChange.call(this), t && t.call(this))
                                }
                            }
                        }, {
                            key: "disableTransition", value: function () {
                                this.sliderFrame.style.webkitTransition = "all 0ms " + this.config.easing, this.sliderFrame.style.transition = "all 0ms " + this.config.easing
                            }
                        }, {
                            key: "enableTransition", value: function () {
                                this.sliderFrame.style.webkitTransition = "all " + this.config.duration + "ms " + this.config.easing, this.sliderFrame.style.transition = "all " + this.config.duration + "ms " + this.config.easing
                            }
                        }, {
                            key: "goTo", value: function (e, t) {
                                if (!(this.innerElements.length <= this.perPage)) {
                                    var i = this.currentSlide;
                                    this.currentSlide = this.config.loop ? e % this.innerElements.length : Math.min(Math.max(e, 0), this.innerElements.length - this.perPage), i !== this.currentSlide && (this.slideToCurrent(), this.config.onChange.call(this), t && t.call(this))
                                }
                            }
                        }, {
                            key: "slideToCurrent", value: function (e) {
                                var t = this,
                                    i = this.config.loop ? this.currentSlide + this.perPage : this.currentSlide,
                                    r = (this.config.rtl ? 1 : -1) * i * (this.selectorWidth / this.perPage);
                                e ? requestAnimationFrame(function () {
                                    requestAnimationFrame(function () {
                                        t.enableTransition(), t.sliderFrame.style[t.transformProperty] = "translate3d(" + r + "px, 0, 0)"
                                    })
                                }) : this.sliderFrame.style[this.transformProperty] = "translate3d(" + r + "px, 0, 0)"
                            }
                        }, {
                            key: "updateAfterDrag", value: function () {
                                var e = (this.config.rtl ? -1 : 1) * (this.drag.endX - this.drag.startX),
                                    t = Math.abs(e),
                                    i = this.config.multipleDrag ? Math.ceil(t / (this.selectorWidth / this.perPage)) : 1,
                                    r = e > 0 && this.currentSlide - i < 0,
                                    n = e < 0 && this.currentSlide + i > this.innerElements.length - this.perPage;
                                e > 0 && t > this.config.threshold && this.innerElements.length > this.perPage ? this.prev(i) : e < 0 && t > this.config.threshold && this.innerElements.length > this.perPage && this.next(i), this.slideToCurrent(r || n)
                            }
                        }, {
                            key: "resizeHandler", value: function () {
                                this.resolveSlidesNumber(), this.currentSlide + this.perPage > this.innerElements.length && (this.currentSlide = this.innerElements.length <= this.perPage ? 0 : this.innerElements.length - this.perPage), this.selectorWidth = this.selector.offsetWidth, this.buildSliderFrame()
                            }
                        }, {
                            key: "clearDrag", value: function () {
                                this.drag = {
                                    startX: 0,
                                    endX: 0,
                                    startY: 0,
                                    letItGo: null,
                                    preventClick: this.drag.preventClick
                                }
                            }
                        }, {
                            key: "touchstartHandler", value: function (e) {
                                -1 !== ["TEXTAREA", "OPTION", "INPUT", "SELECT"].indexOf(e.target.nodeName) || (e.stopPropagation(), this.pointerDown = !0, this.drag.startX = e.touches[0].pageX, this.drag.startY = e.touches[0].pageY)
                            }
                        }, {
                            key: "touchendHandler", value: function (e) {
                                e.stopPropagation(), this.pointerDown = !1, this.enableTransition(), this.drag.endX && this.updateAfterDrag(), this.clearDrag()
                            }
                        }, {
                            key: "touchmoveHandler", value: function (e) {
                                if (e.stopPropagation(), null === this.drag.letItGo && (this.drag.letItGo = Math.abs(this.drag.startY - e.touches[0].pageY) < Math.abs(this.drag.startX - e.touches[0].pageX)), this.pointerDown && this.drag.letItGo) {
                                    e.preventDefault(), this.drag.endX = e.touches[0].pageX, this.sliderFrame.style.webkitTransition = "all 0ms " + this.config.easing, this.sliderFrame.style.transition = "all 0ms " + this.config.easing;
                                    var t = this.config.loop ? this.currentSlide + this.perPage : this.currentSlide,
                                        i = t * (this.selectorWidth / this.perPage),
                                        r = this.drag.endX - this.drag.startX, n = this.config.rtl ? i + r : i - r;
                                    this.sliderFrame.style[this.transformProperty] = "translate3d(" + (this.config.rtl ? 1 : -1) * n + "px, 0, 0)"
                                }
                            }
                        }, {
                            key: "mousedownHandler", value: function (e) {
                                -1 !== ["TEXTAREA", "OPTION", "INPUT", "SELECT"].indexOf(e.target.nodeName) || (e.preventDefault(), e.stopPropagation(), this.pointerDown = !0, this.drag.startX = e.pageX)
                            }
                        }, {
                            key: "mouseupHandler", value: function (e) {
                                e.stopPropagation(), this.pointerDown = !1, this.selector.style.cursor = "-webkit-grab", this.enableTransition(), this.drag.endX && this.updateAfterDrag(), this.clearDrag()
                            }
                        }, {
                            key: "mousemoveHandler", value: function (e) {
                                if (e.preventDefault(), this.pointerDown) {
                                    "A" === e.target.nodeName && (this.drag.preventClick = !0), this.drag.endX = e.pageX, this.selector.style.cursor = "-webkit-grabbing", this.sliderFrame.style.webkitTransition = "all 0ms " + this.config.easing, this.sliderFrame.style.transition = "all 0ms " + this.config.easing;
                                    var t = this.config.loop ? this.currentSlide + this.perPage : this.currentSlide,
                                        i = t * (this.selectorWidth / this.perPage),
                                        r = this.drag.endX - this.drag.startX, n = this.config.rtl ? i + r : i - r;
                                    this.sliderFrame.style[this.transformProperty] = "translate3d(" + (this.config.rtl ? 1 : -1) * n + "px, 0, 0)"
                                }
                            }
                        }, {
                            key: "mouseleaveHandler", value: function (e) {
                                this.pointerDown && (this.pointerDown = !1, this.selector.style.cursor = "-webkit-grab", this.drag.endX = e.pageX, this.drag.preventClick = !1, this.enableTransition(), this.updateAfterDrag(), this.clearDrag())
                            }
                        }, {
                            key: "clickHandler", value: function (e) {
                                this.drag.preventClick && e.preventDefault(), this.drag.preventClick = !1
                            }
                        }, {
                            key: "remove", value: function (e, t) {
                                if (e < 0 || e >= this.innerElements.length) throw new Error("Item to remove doesn't exist 😭");
                                var i = e < this.currentSlide, r = this.currentSlide + this.perPage - 1 === e;
                                (i || r) && this.currentSlide--, this.innerElements.splice(e, 1), this.buildSliderFrame(), t && t.call(this)
                            }
                        }, {
                            key: "insert", value: function (e, t, i) {
                                if (t < 0 || t > this.innerElements.length + 1) throw new Error("Unable to inset it at this index 😭");
                                if (-1 !== this.innerElements.indexOf(e)) throw new Error("The same item in a carousel? Really? Nope 😭");
                                var r = t <= this.currentSlide > 0 && this.innerElements.length;
                                this.currentSlide = r ? this.currentSlide + 1 : this.currentSlide, this.innerElements.splice(t, 0, e), this.buildSliderFrame(), i && i.call(this)
                            }
                        }, {
                            key: "prepend", value: function (e, t) {
                                this.insert(e, 0), t && t.call(this)
                            }
                        }, {
                            key: "append", value: function (e, t) {
                                this.insert(e, this.innerElements.length + 1), t && t.call(this)
                            }
                        }, {
                            key: "destroy", value: function () {
                                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                                    t = arguments[1];
                                if (this.detachEvents(), this.selector.style.cursor = "auto", e) {
                                    for (var i = document.createDocumentFragment(), r = 0; r < this.innerElements.length; r++) i.appendChild(this.innerElements[r]);
                                    this.selector.innerHTML = "", this.selector.appendChild(i), this.selector.removeAttribute("style")
                                }
                                t && t.call(this)
                            }
                        }], [{
                            key: "mergeSettings", value: function (e) {
                                var t = {
                                    selector: ".siema",
                                    duration: 200,
                                    easing: "ease-out",
                                    perPage: 1,
                                    startIndex: 0,
                                    draggable: !0,
                                    multipleDrag: !0,
                                    threshold: 20,
                                    loop: !1,
                                    rtl: !1,
                                    onInit: function () {
                                    },
                                    onChange: function () {
                                    }
                                }, i = e;
                                for (var r in i) t[r] = i[r];
                                return t
                            }
                        }, {
                            key: "webkitOrNot", value: function () {
                                return "string" == typeof document.documentElement.style.transform ? "transform" : "WebkitTransform"
                            }
                        }]), e
                    }();
                    t.default = l, e.exports = t.default
                }])
            });
        }, {}],
        16: [function (require, module, exports) {
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

            (function () {

                // Baseline setup
                // --------------

                // Establish the root object, `window` in the browser, or `exports` on the server.
                var root = this;

                // Save the previous value of the `_` variable.
                var previousUnderscore = root._;

                // Establish the object that gets returned to break out of a loop iteration.
                var breaker = {};

                // Save bytes in the minified (but not gzipped) version:
                var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

                // Create quick reference variables for speed access to core prototypes.
                var
                    push = ArrayProto.push,
                    slice = ArrayProto.slice,
                    concat = ArrayProto.concat,
                    toString = ObjProto.toString,
                    hasOwnProperty = ObjProto.hasOwnProperty;

                // All **ECMAScript 5** native function implementations that we hope to use
                // are declared here.
                var
                    nativeForEach = ArrayProto.forEach,
                    nativeMap = ArrayProto.map,
                    nativeReduce = ArrayProto.reduce,
                    nativeReduceRight = ArrayProto.reduceRight,
                    nativeFilter = ArrayProto.filter,
                    nativeEvery = ArrayProto.every,
                    nativeSome = ArrayProto.some,
                    nativeIndexOf = ArrayProto.indexOf,
                    nativeLastIndexOf = ArrayProto.lastIndexOf,
                    nativeIsArray = Array.isArray,
                    nativeKeys = Object.keys,
                    nativeBind = FuncProto.bind;

                // Create a safe reference to the Underscore object for use below.
                var _ = function (obj) {
                    if (obj instanceof _) return obj;
                    if (!(this instanceof _)) return new _(obj);
                    this._wrapped = obj;
                };

                // Export the Underscore object for **Node.js**, with
                // backwards-compatibility for the old `require()` API. If we're in
                // the browser, add `_` as a global object via a string identifier,
                // for Closure Compiler "advanced" mode.
                if (typeof exports !== 'undefined') {
                    if (typeof module !== 'undefined' && module.exports) {
                        exports = module.exports = _;
                    }
                    exports._ = _;
                } else {
                    root._ = _;
                }

                // Current version.
                _.VERSION = '1.6.0';

                // Collection Functions
                // --------------------

                // The cornerstone, an `each` implementation, aka `forEach`.
                // Handles objects with the built-in `forEach`, arrays, and raw objects.
                // Delegates to **ECMAScript 5**'s native `forEach` if available.
                var each = _.each = _.forEach = function (obj, iterator, context) {
                    if (obj == null) return obj;
                    if (nativeForEach && obj.forEach === nativeForEach) {
                        obj.forEach(iterator, context);
                    } else if (obj.length === +obj.length) {
                        for (var i = 0, length = obj.length; i < length; i++) {
                            if (iterator.call(context, obj[i], i, obj) === breaker) return;
                        }
                    } else {
                        var keys = _.keys(obj);
                        for (var i = 0, length = keys.length; i < length; i++) {
                            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
                        }
                    }
                    return obj;
                };

                // Return the results of applying the iterator to each element.
                // Delegates to **ECMAScript 5**'s native `map` if available.
                _.map = _.collect = function (obj, iterator, context) {
                    var results = [];
                    if (obj == null) return results;
                    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
                    each(obj, function (value, index, list) {
                        results.push(iterator.call(context, value, index, list));
                    });
                    return results;
                };

                var reduceError = 'Reduce of empty array with no initial value';

                // **Reduce** builds up a single result from a list of values, aka `inject`,
                // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
                _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
                    var initial = arguments.length > 2;
                    if (obj == null) obj = [];
                    if (nativeReduce && obj.reduce === nativeReduce) {
                        if (context) iterator = _.bind(iterator, context);
                        return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
                    }
                    each(obj, function (value, index, list) {
                        if (!initial) {
                            memo = value;
                            initial = true;
                        } else {
                            memo = iterator.call(context, memo, value, index, list);
                        }
                    });
                    if (!initial) throw new TypeError(reduceError);
                    return memo;
                };

                // The right-associative version of reduce, also known as `foldr`.
                // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
                _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
                    var initial = arguments.length > 2;
                    if (obj == null) obj = [];
                    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                        if (context) iterator = _.bind(iterator, context);
                        return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
                    }
                    var length = obj.length;
                    if (length !== +length) {
                        var keys = _.keys(obj);
                        length = keys.length;
                    }
                    each(obj, function (value, index, list) {
                        index = keys ? keys[--length] : --length;
                        if (!initial) {
                            memo = obj[index];
                            initial = true;
                        } else {
                            memo = iterator.call(context, memo, obj[index], index, list);
                        }
                    });
                    if (!initial) throw new TypeError(reduceError);
                    return memo;
                };

                // Return the first value which passes a truth test. Aliased as `detect`.
                _.find = _.detect = function (obj, predicate, context) {
                    var result;
                    any(obj, function (value, index, list) {
                        if (predicate.call(context, value, index, list)) {
                            result = value;
                            return true;
                        }
                    });
                    return result;
                };

                // Return all the elements that pass a truth test.
                // Delegates to **ECMAScript 5**'s native `filter` if available.
                // Aliased as `select`.
                _.filter = _.select = function (obj, predicate, context) {
                    var results = [];
                    if (obj == null) return results;
                    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
                    each(obj, function (value, index, list) {
                        if (predicate.call(context, value, index, list)) results.push(value);
                    });
                    return results;
                };

                // Return all the elements for which a truth test fails.
                _.reject = function (obj, predicate, context) {
                    return _.filter(obj, function (value, index, list) {
                        return !predicate.call(context, value, index, list);
                    }, context);
                };

                // Determine whether all of the elements match a truth test.
                // Delegates to **ECMAScript 5**'s native `every` if available.
                // Aliased as `all`.
                _.every = _.all = function (obj, predicate, context) {
                    predicate || (predicate = _.identity);
                    var result = true;
                    if (obj == null) return result;
                    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
                    each(obj, function (value, index, list) {
                        if (!(result = result && predicate.call(context, value, index, list))) return breaker;
                    });
                    return !!result;
                };

                // Determine if at least one element in the object matches a truth test.
                // Delegates to **ECMAScript 5**'s native `some` if available.
                // Aliased as `any`.
                var any = _.some = _.any = function (obj, predicate, context) {
                    predicate || (predicate = _.identity);
                    var result = false;
                    if (obj == null) return result;
                    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
                    each(obj, function (value, index, list) {
                        if (result || (result = predicate.call(context, value, index, list))) return breaker;
                    });
                    return !!result;
                };

                // Determine if the array or object contains a given value (using `===`).
                // Aliased as `include`.
                _.contains = _.include = function (obj, target) {
                    if (obj == null) return false;
                    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
                    return any(obj, function (value) {
                        return value === target;
                    });
                };

                // Invoke a method (with arguments) on every item in a collection.
                _.invoke = function (obj, method) {
                    var args = slice.call(arguments, 2);
                    var isFunc = _.isFunction(method);
                    return _.map(obj, function (value) {
                        return (isFunc ? method : value[method]).apply(value, args);
                    });
                };

                // Convenience version of a common use case of `map`: fetching a property.
                _.pluck = function (obj, key) {
                    return _.map(obj, _.property(key));
                };

                // Convenience version of a common use case of `filter`: selecting only objects
                // containing specific `key:value` pairs.
                _.where = function (obj, attrs) {
                    return _.filter(obj, _.matches(attrs));
                };

                // Convenience version of a common use case of `find`: getting the first object
                // containing specific `key:value` pairs.
                _.findWhere = function (obj, attrs) {
                    return _.find(obj, _.matches(attrs));
                };

                // Return the maximum element or (element-based computation).
                // Can't optimize arrays of integers longer than 65,535 elements.
                // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
                _.max = function (obj, iterator, context) {
                    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                        return Math.max.apply(Math, obj);
                    }
                    var result = -Infinity, lastComputed = -Infinity;
                    each(obj, function (value, index, list) {
                        var computed = iterator ? iterator.call(context, value, index, list) : value;
                        if (computed > lastComputed) {
                            result = value;
                            lastComputed = computed;
                        }
                    });
                    return result;
                };

                // Return the minimum element (or element-based computation).
                _.min = function (obj, iterator, context) {
                    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                        return Math.min.apply(Math, obj);
                    }
                    var result = Infinity, lastComputed = Infinity;
                    each(obj, function (value, index, list) {
                        var computed = iterator ? iterator.call(context, value, index, list) : value;
                        if (computed < lastComputed) {
                            result = value;
                            lastComputed = computed;
                        }
                    });
                    return result;
                };

                // Shuffle an array, using the modern version of the
                // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
                _.shuffle = function (obj) {
                    var rand;
                    var index = 0;
                    var shuffled = [];
                    each(obj, function (value) {
                        rand = _.random(index++);
                        shuffled[index - 1] = shuffled[rand];
                        shuffled[rand] = value;
                    });
                    return shuffled;
                };

                // Sample **n** random values from a collection.
                // If **n** is not specified, returns a single random element.
                // The internal `guard` argument allows it to work with `map`.
                _.sample = function (obj, n, guard) {
                    if (n == null || guard) {
                        if (obj.length !== +obj.length) obj = _.values(obj);
                        return obj[_.random(obj.length - 1)];
                    }
                    return _.shuffle(obj).slice(0, Math.max(0, n));
                };

                // An internal function to generate lookup iterators.
                var lookupIterator = function (value) {
                    if (value == null) return _.identity;
                    if (_.isFunction(value)) return value;
                    return _.property(value);
                };

                // Sort the object's values by a criterion produced by an iterator.
                _.sortBy = function (obj, iterator, context) {
                    iterator = lookupIterator(iterator);
                    return _.pluck(_.map(obj, function (value, index, list) {
                        return {
                            value: value,
                            index: index,
                            criteria: iterator.call(context, value, index, list)
                        };
                    }).sort(function (left, right) {
                        var a = left.criteria;
                        var b = right.criteria;
                        if (a !== b) {
                            if (a > b || a === void 0) return 1;
                            if (a < b || b === void 0) return -1;
                        }
                        return left.index - right.index;
                    }), 'value');
                };

                // An internal function used for aggregate "group by" operations.
                var group = function (behavior) {
                    return function (obj, iterator, context) {
                        var result = {};
                        iterator = lookupIterator(iterator);
                        each(obj, function (value, index) {
                            var key = iterator.call(context, value, index, obj);
                            behavior(result, key, value);
                        });
                        return result;
                    };
                };

                // Groups the object's values by a criterion. Pass either a string attribute
                // to group by, or a function that returns the criterion.
                _.groupBy = group(function (result, key, value) {
                    _.has(result, key) ? result[key].push(value) : result[key] = [value];
                });

                // Indexes the object's values by a criterion, similar to `groupBy`, but for
                // when you know that your index values will be unique.
                _.indexBy = group(function (result, key, value) {
                    result[key] = value;
                });

                // Counts instances of an object that group by a certain criterion. Pass
                // either a string attribute to count by, or a function that returns the
                // criterion.
                _.countBy = group(function (result, key) {
                    _.has(result, key) ? result[key]++ : result[key] = 1;
                });

                // Use a comparator function to figure out the smallest index at which
                // an object should be inserted so as to maintain order. Uses binary search.
                _.sortedIndex = function (array, obj, iterator, context) {
                    iterator = lookupIterator(iterator);
                    var value = iterator.call(context, obj);
                    var low = 0, high = array.length;
                    while (low < high) {
                        var mid = (low + high) >>> 1;
                        iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
                    }
                    return low;
                };

                // Safely create a real, live array from anything iterable.
                _.toArray = function (obj) {
                    if (!obj) return [];
                    if (_.isArray(obj)) return slice.call(obj);
                    if (obj.length === +obj.length) return _.map(obj, _.identity);
                    return _.values(obj);
                };

                // Return the number of elements in an object.
                _.size = function (obj) {
                    if (obj == null) return 0;
                    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
                };

                // Array Functions
                // ---------------

                // Get the first element of an array. Passing **n** will return the first N
                // values in the array. Aliased as `head` and `take`. The **guard** check
                // allows it to work with `_.map`.
                _.first = _.head = _.take = function (array, n, guard) {
                    if (array == null) return void 0;
                    if ((n == null) || guard) return array[0];
                    if (n < 0) return [];
                    return slice.call(array, 0, n);
                };

                // Returns everything but the last entry of the array. Especially useful on
                // the arguments object. Passing **n** will return all the values in
                // the array, excluding the last N. The **guard** check allows it to work with
                // `_.map`.
                _.initial = function (array, n, guard) {
                    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
                };

                // Get the last element of an array. Passing **n** will return the last N
                // values in the array. The **guard** check allows it to work with `_.map`.
                _.last = function (array, n, guard) {
                    if (array == null) return void 0;
                    if ((n == null) || guard) return array[array.length - 1];
                    return slice.call(array, Math.max(array.length - n, 0));
                };

                // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
                // Especially useful on the arguments object. Passing an **n** will return
                // the rest N values in the array. The **guard**
                // check allows it to work with `_.map`.
                _.rest = _.tail = _.drop = function (array, n, guard) {
                    return slice.call(array, (n == null) || guard ? 1 : n);
                };

                // Trim out all falsy values from an array.
                _.compact = function (array) {
                    return _.filter(array, _.identity);
                };

                // Internal implementation of a recursive `flatten` function.
                var flatten = function (input, shallow, output) {
                    if (shallow && _.every(input, _.isArray)) {
                        return concat.apply(output, input);
                    }
                    each(input, function (value) {
                        if (_.isArray(value) || _.isArguments(value)) {
                            shallow ? push.apply(output, value) : flatten(value, shallow, output);
                        } else {
                            output.push(value);
                        }
                    });
                    return output;
                };

                // Flatten out an array, either recursively (by default), or just one level.
                _.flatten = function (array, shallow) {
                    return flatten(array, shallow, []);
                };

                // Return a version of the array that does not contain the specified value(s).
                _.without = function (array) {
                    return _.difference(array, slice.call(arguments, 1));
                };

                // Split an array into two arrays: one whose elements all satisfy the given
                // predicate, and one whose elements all do not satisfy the predicate.
                _.partition = function (array, predicate) {
                    var pass = [], fail = [];
                    each(array, function (elem) {
                        (predicate(elem) ? pass : fail).push(elem);
                    });
                    return [pass, fail];
                };

                // Produce a duplicate-free version of the array. If the array has already
                // been sorted, you have the option of using a faster algorithm.
                // Aliased as `unique`.
                _.uniq = _.unique = function (array, isSorted, iterator, context) {
                    if (_.isFunction(isSorted)) {
                        context = iterator;
                        iterator = isSorted;
                        isSorted = false;
                    }
                    var initial = iterator ? _.map(array, iterator, context) : array;
                    var results = [];
                    var seen = [];
                    each(initial, function (value, index) {
                        if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
                            seen.push(value);
                            results.push(array[index]);
                        }
                    });
                    return results;
                };

                // Produce an array that contains the union: each distinct element from all of
                // the passed-in arrays.
                _.union = function () {
                    return _.uniq(_.flatten(arguments, true));
                };

                // Produce an array that contains every item shared between all the
                // passed-in arrays.
                _.intersection = function (array) {
                    var rest = slice.call(arguments, 1);
                    return _.filter(_.uniq(array), function (item) {
                        return _.every(rest, function (other) {
                            return _.contains(other, item);
                        });
                    });
                };

                // Take the difference between one array and a number of other arrays.
                // Only the elements present in just the first array will remain.
                _.difference = function (array) {
                    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
                    return _.filter(array, function (value) {
                        return !_.contains(rest, value);
                    });
                };

                // Zip together multiple lists into a single array -- elements that share
                // an index go together.
                _.zip = function () {
                    var length = _.max(_.pluck(arguments, 'length').concat(0));
                    var results = new Array(length);
                    for (var i = 0; i < length; i++) {
                        results[i] = _.pluck(arguments, '' + i);
                    }
                    return results;
                };

                // Converts lists into objects. Pass either a single array of `[key, value]`
                // pairs, or two parallel arrays of the same length -- one of keys, and one of
                // the corresponding values.
                _.object = function (list, values) {
                    if (list == null) return {};
                    var result = {};
                    for (var i = 0, length = list.length; i < length; i++) {
                        if (values) {
                            result[list[i]] = values[i];
                        } else {
                            result[list[i][0]] = list[i][1];
                        }
                    }
                    return result;
                };

                // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
                // we need this function. Return the position of the first occurrence of an
                // item in an array, or -1 if the item is not included in the array.
                // Delegates to **ECMAScript 5**'s native `indexOf` if available.
                // If the array is large and already in sort order, pass `true`
                // for **isSorted** to use binary search.
                _.indexOf = function (array, item, isSorted) {
                    if (array == null) return -1;
                    var i = 0, length = array.length;
                    if (isSorted) {
                        if (typeof isSorted == 'number') {
                            i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
                        } else {
                            i = _.sortedIndex(array, item);
                            return array[i] === item ? i : -1;
                        }
                    }
                    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
                    for (; i < length; i++) if (array[i] === item) return i;
                    return -1;
                };

                // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
                _.lastIndexOf = function (array, item, from) {
                    if (array == null) return -1;
                    var hasIndex = from != null;
                    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
                        return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
                    }
                    var i = (hasIndex ? from : array.length);
                    while (i--) if (array[i] === item) return i;
                    return -1;
                };

                // Generate an integer Array containing an arithmetic progression. A port of
                // the native Python `range()` function. See
                // [the Python documentation](http://docs.python.org/library/functions.html#range).
                _.range = function (start, stop, step) {
                    if (arguments.length <= 1) {
                        stop = start || 0;
                        start = 0;
                    }
                    step = arguments[2] || 1;

                    var length = Math.max(Math.ceil((stop - start) / step), 0);
                    var idx = 0;
                    var range = new Array(length);

                    while (idx < length) {
                        range[idx++] = start;
                        start += step;
                    }

                    return range;
                };

                // Function (ahem) Functions
                // ------------------

                // Reusable constructor function for prototype setting.
                var ctor = function () {
                };

                // Create a function bound to a given object (assigning `this`, and arguments,
                // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
                // available.
                _.bind = function (func, context) {
                    var args, bound;
                    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                    if (!_.isFunction(func)) throw new TypeError;
                    args = slice.call(arguments, 2);
                    return bound = function () {
                        if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
                        ctor.prototype = func.prototype;
                        var self = new ctor;
                        ctor.prototype = null;
                        var result = func.apply(self, args.concat(slice.call(arguments)));
                        if (Object(result) === result) return result;
                        return self;
                    };
                };

                // Partially apply a function by creating a version that has had some of its
                // arguments pre-filled, without changing its dynamic `this` context. _ acts
                // as a placeholder, allowing any combination of arguments to be pre-filled.
                _.partial = function (func) {
                    var boundArgs = slice.call(arguments, 1);
                    return function () {
                        var position = 0;
                        var args = boundArgs.slice();
                        for (var i = 0, length = args.length; i < length; i++) {
                            if (args[i] === _) args[i] = arguments[position++];
                        }
                        while (position < arguments.length) args.push(arguments[position++]);
                        return func.apply(this, args);
                    };
                };

                // Bind a number of an object's methods to that object. Remaining arguments
                // are the method names to be bound. Useful for ensuring that all callbacks
                // defined on an object belong to it.
                _.bindAll = function (obj) {
                    var funcs = slice.call(arguments, 1);
                    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
                    each(funcs, function (f) {
                        obj[f] = _.bind(obj[f], obj);
                    });
                    return obj;
                };

                // Memoize an expensive function by storing its results.
                _.memoize = function (func, hasher) {
                    var memo = {};
                    hasher || (hasher = _.identity);
                    return function () {
                        var key = hasher.apply(this, arguments);
                        return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
                    };
                };

                // Delays a function for the given number of milliseconds, and then calls
                // it with the arguments supplied.
                _.delay = function (func, wait) {
                    var args = slice.call(arguments, 2);
                    return setTimeout(function () {
                        return func.apply(null, args);
                    }, wait);
                };

                // Defers a function, scheduling it to run after the current call stack has
                // cleared.
                _.defer = function (func) {
                    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
                };

                // Returns a function, that, when invoked, will only be triggered at most once
                // during a given window of time. Normally, the throttled function will run
                // as much as it can, without ever going more than once per `wait` duration;
                // but if you'd like to disable the execution on the leading edge, pass
                // `{leading: false}`. To disable execution on the trailing edge, ditto.
                _.throttle = function (func, wait, options) {
                    var context, args, result;
                    var timeout = null;
                    var previous = 0;
                    options || (options = {});
                    var later = function () {
                        previous = options.leading === false ? 0 : _.now();
                        timeout = null;
                        result = func.apply(context, args);
                        context = args = null;
                    };
                    return function () {
                        var now = _.now();
                        if (!previous && options.leading === false) previous = now;
                        var remaining = wait - (now - previous);
                        context = this;
                        args = arguments;
                        if (remaining <= 0) {
                            clearTimeout(timeout);
                            timeout = null;
                            previous = now;
                            result = func.apply(context, args);
                            context = args = null;
                        } else if (!timeout && options.trailing !== false) {
                            timeout = setTimeout(later, remaining);
                        }
                        return result;
                    };
                };

                // Returns a function, that, as long as it continues to be invoked, will not
                // be triggered. The function will be called after it stops being called for
                // N milliseconds. If `immediate` is passed, trigger the function on the
                // leading edge, instead of the trailing.
                _.debounce = function (func, wait, immediate) {
                    var timeout, args, context, timestamp, result;

                    var later = function () {
                        var last = _.now() - timestamp;
                        if (last < wait) {
                            timeout = setTimeout(later, wait - last);
                        } else {
                            timeout = null;
                            if (!immediate) {
                                result = func.apply(context, args);
                                context = args = null;
                            }
                        }
                    };

                    return function () {
                        context = this;
                        args = arguments;
                        timestamp = _.now();
                        var callNow = immediate && !timeout;
                        if (!timeout) {
                            timeout = setTimeout(later, wait);
                        }
                        if (callNow) {
                            result = func.apply(context, args);
                            context = args = null;
                        }

                        return result;
                    };
                };

                // Returns a function that will be executed at most one time, no matter how
                // often you call it. Useful for lazy initialization.
                _.once = function (func) {
                    var ran = false, memo;
                    return function () {
                        if (ran) return memo;
                        ran = true;
                        memo = func.apply(this, arguments);
                        func = null;
                        return memo;
                    };
                };

                // Returns the first function passed as an argument to the second,
                // allowing you to adjust arguments, run code before and after, and
                // conditionally execute the original function.
                _.wrap = function (func, wrapper) {
                    return _.partial(wrapper, func);
                };

                // Returns a function that is the composition of a list of functions, each
                // consuming the return value of the function that follows.
                _.compose = function () {
                    var funcs = arguments;
                    return function () {
                        var args = arguments;
                        for (var i = funcs.length - 1; i >= 0; i--) {
                            args = [funcs[i].apply(this, args)];
                        }
                        return args[0];
                    };
                };

                // Returns a function that will only be executed after being called N times.
                _.after = function (times, func) {
                    return function () {
                        if (--times < 1) {
                            return func.apply(this, arguments);
                        }
                    };
                };

                // Object Functions
                // ----------------

                // Retrieve the names of an object's properties.
                // Delegates to **ECMAScript 5**'s native `Object.keys`
                _.keys = function (obj) {
                    if (!_.isObject(obj)) return [];
                    if (nativeKeys) return nativeKeys(obj);
                    var keys = [];
                    for (var key in obj) if (_.has(obj, key)) keys.push(key);
                    return keys;
                };

                // Retrieve the values of an object's properties.
                _.values = function (obj) {
                    var keys = _.keys(obj);
                    var length = keys.length;
                    var values = new Array(length);
                    for (var i = 0; i < length; i++) {
                        values[i] = obj[keys[i]];
                    }
                    return values;
                };

                // Convert an object into a list of `[key, value]` pairs.
                _.pairs = function (obj) {
                    var keys = _.keys(obj);
                    var length = keys.length;
                    var pairs = new Array(length);
                    for (var i = 0; i < length; i++) {
                        pairs[i] = [keys[i], obj[keys[i]]];
                    }
                    return pairs;
                };

                // Invert the keys and values of an object. The values must be serializable.
                _.invert = function (obj) {
                    var result = {};
                    var keys = _.keys(obj);
                    for (var i = 0, length = keys.length; i < length; i++) {
                        result[obj[keys[i]]] = keys[i];
                    }
                    return result;
                };

                // Return a sorted list of the function names available on the object.
                // Aliased as `methods`
                _.functions = _.methods = function (obj) {
                    var names = [];
                    for (var key in obj) {
                        if (_.isFunction(obj[key])) names.push(key);
                    }
                    return names.sort();
                };

                // Extend a given object with all the properties in passed-in object(s).
                _.extend = function (obj) {
                    each(slice.call(arguments, 1), function (source) {
                        if (source) {
                            for (var prop in source) {
                                obj[prop] = source[prop];
                            }
                        }
                    });
                    return obj;
                };

                // Return a copy of the object only containing the whitelisted properties.
                _.pick = function (obj) {
                    var copy = {};
                    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
                    each(keys, function (key) {
                        if (key in obj) copy[key] = obj[key];
                    });
                    return copy;
                };

                // Return a copy of the object without the blacklisted properties.
                _.omit = function (obj) {
                    var copy = {};
                    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
                    for (var key in obj) {
                        if (!_.contains(keys, key)) copy[key] = obj[key];
                    }
                    return copy;
                };

                // Fill in a given object with default properties.
                _.defaults = function (obj) {
                    each(slice.call(arguments, 1), function (source) {
                        if (source) {
                            for (var prop in source) {
                                if (obj[prop] === void 0) obj[prop] = source[prop];
                            }
                        }
                    });
                    return obj;
                };

                // Create a (shallow-cloned) duplicate of an object.
                _.clone = function (obj) {
                    if (!_.isObject(obj)) return obj;
                    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
                };

                // Invokes interceptor with the obj, and then returns obj.
                // The primary purpose of this method is to "tap into" a method chain, in
                // order to perform operations on intermediate results within the chain.
                _.tap = function (obj, interceptor) {
                    interceptor(obj);
                    return obj;
                };

                // Internal recursive comparison function for `isEqual`.
                var eq = function (a, b, aStack, bStack) {
                    // Identical objects are equal. `0 === -0`, but they aren't identical.
                    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
                    if (a === b) return a !== 0 || 1 / a == 1 / b;
                    // A strict comparison is necessary because `null == undefined`.
                    if (a == null || b == null) return a === b;
                    // Unwrap any wrapped objects.
                    if (a instanceof _) a = a._wrapped;
                    if (b instanceof _) b = b._wrapped;
                    // Compare `[[Class]]` names.
                    var className = toString.call(a);
                    if (className != toString.call(b)) return false;
                    switch (className) {
                        // Strings, numbers, dates, and booleans are compared by value.
                        case '[object String]':
                            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                            // equivalent to `new String("5")`.
                            return a == String(b);
                        case '[object Number]':
                            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
                            // other numeric values.
                            return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
                        case '[object Date]':
                        case '[object Boolean]':
                            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                            // millisecond representations. Note that invalid dates with millisecond representations
                            // of `NaN` are not equivalent.
                            return +a == +b;
                        // RegExps are compared by their source patterns and flags.
                        case '[object RegExp]':
                            return a.source == b.source &&
                                a.global == b.global &&
                                a.multiline == b.multiline &&
                                a.ignoreCase == b.ignoreCase;
                    }
                    if (typeof a != 'object' || typeof b != 'object') return false;
                    // Assume equality for cyclic structures. The algorithm for detecting cyclic
                    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
                    var length = aStack.length;
                    while (length--) {
                        // Linear search. Performance is inversely proportional to the number of
                        // unique nested structures.
                        if (aStack[length] == a) return bStack[length] == b;
                    }
                    // Objects with different constructors are not equivalent, but `Object`s
                    // from different frames are.
                    var aCtor = a.constructor, bCtor = b.constructor;
                    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                        _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
                        return false;
                    }
                    // Add the first object to the stack of traversed objects.
                    aStack.push(a);
                    bStack.push(b);
                    var size = 0, result = true;
                    // Recursively compare objects and arrays.
                    if (className == '[object Array]') {
                        // Compare array lengths to determine if a deep comparison is necessary.
                        size = a.length;
                        result = size == b.length;
                        if (result) {
                            // Deep compare the contents, ignoring non-numeric properties.
                            while (size--) {
                                if (!(result = eq(a[size], b[size], aStack, bStack))) break;
                            }
                        }
                    } else {
                        // Deep compare objects.
                        for (var key in a) {
                            if (_.has(a, key)) {
                                // Count the expected number of properties.
                                size++;
                                // Deep compare each member.
                                if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
                            }
                        }
                        // Ensure that both objects contain the same number of properties.
                        if (result) {
                            for (key in b) {
                                if (_.has(b, key) && !(size--)) break;
                            }
                            result = !size;
                        }
                    }
                    // Remove the first object from the stack of traversed objects.
                    aStack.pop();
                    bStack.pop();
                    return result;
                };

                // Perform a deep comparison to check if two objects are equal.
                _.isEqual = function (a, b) {
                    return eq(a, b, [], []);
                };

                // Is a given array, string, or object empty?
                // An "empty" object has no enumerable own-properties.
                _.isEmpty = function (obj) {
                    if (obj == null) return true;
                    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
                    for (var key in obj) if (_.has(obj, key)) return false;
                    return true;
                };

                // Is a given value a DOM element?
                _.isElement = function (obj) {
                    return !!(obj && obj.nodeType === 1);
                };

                // Is a given value an array?
                // Delegates to ECMA5's native Array.isArray
                _.isArray = nativeIsArray || function (obj) {
                    return toString.call(obj) == '[object Array]';
                };

                // Is a given variable an object?
                _.isObject = function (obj) {
                    return obj === Object(obj);
                };

                // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
                each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {
                    _['is' + name] = function (obj) {
                        return toString.call(obj) == '[object ' + name + ']';
                    };
                });

                // Define a fallback version of the method in browsers (ahem, IE), where
                // there isn't any inspectable "Arguments" type.
                if (!_.isArguments(arguments)) {
                    _.isArguments = function (obj) {
                        return !!(obj && _.has(obj, 'callee'));
                    };
                }

                // Optimize `isFunction` if appropriate.
                if (typeof (/./) !== 'function') {
                    _.isFunction = function (obj) {
                        return typeof obj === 'function';
                    };
                }

                // Is a given object a finite number?
                _.isFinite = function (obj) {
                    return isFinite(obj) && !isNaN(parseFloat(obj));
                };

                // Is the given value `NaN`? (NaN is the only number which does not equal itself).
                _.isNaN = function (obj) {
                    return _.isNumber(obj) && obj != +obj;
                };

                // Is a given value a boolean?
                _.isBoolean = function (obj) {
                    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
                };

                // Is a given value equal to null?
                _.isNull = function (obj) {
                    return obj === null;
                };

                // Is a given variable undefined?
                _.isUndefined = function (obj) {
                    return obj === void 0;
                };

                // Shortcut function for checking if an object has a given property directly
                // on itself (in other words, not on a prototype).
                _.has = function (obj, key) {
                    return hasOwnProperty.call(obj, key);
                };

                // Utility Functions
                // -----------------

                // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
                // previous owner. Returns a reference to the Underscore object.
                _.noConflict = function () {
                    root._ = previousUnderscore;
                    return this;
                };

                // Keep the identity function around for default iterators.
                _.identity = function (value) {
                    return value;
                };

                _.constant = function (value) {
                    return function () {
                        return value;
                    };
                };

                _.property = function (key) {
                    return function (obj) {
                        return obj[key];
                    };
                };

                // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
                _.matches = function (attrs) {
                    return function (obj) {
                        if (obj === attrs) return true; //avoid comparing an object to itself.
                        for (var key in attrs) {
                            if (attrs[key] !== obj[key])
                                return false;
                        }
                        return true;
                    }
                };

                // Run a function **n** times.
                _.times = function (n, iterator, context) {
                    var accum = Array(Math.max(0, n));
                    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
                    return accum;
                };

                // Return a random integer between min and max (inclusive).
                _.random = function (min, max) {
                    if (max == null) {
                        max = min;
                        min = 0;
                    }
                    return min + Math.floor(Math.random() * (max - min + 1));
                };

                // A (possibly faster) way to get the current timestamp as an integer.
                _.now = Date.now || function () {
                    return new Date().getTime();
                };

                // List of HTML entities for escaping.
                var entityMap = {
                    escape: {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        "'": '&#x27;'
                    }
                };
                entityMap.unescape = _.invert(entityMap.escape);

                // Regexes containing the keys and values listed immediately above.
                var entityRegexes = {
                    escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
                    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
                };

                // Functions for escaping and unescaping strings to/from HTML interpolation.
                _.each(['escape', 'unescape'], function (method) {
                    _[method] = function (string) {
                        if (string == null) return '';
                        return ('' + string).replace(entityRegexes[method], function (match) {
                            return entityMap[method][match];
                        });
                    };
                });

                // If the value of the named `property` is a function then invoke it with the
                // `object` as context; otherwise, return it.
                _.result = function (object, property) {
                    if (object == null) return void 0;
                    var value = object[property];
                    return _.isFunction(value) ? value.call(object) : value;
                };

                // Add your own custom functions to the Underscore object.
                _.mixin = function (obj) {
                    each(_.functions(obj), function (name) {
                        var func = _[name] = obj[name];
                        _.prototype[name] = function () {
                            var args = [this._wrapped];
                            push.apply(args, arguments);
                            return result.call(this, func.apply(_, args));
                        };
                    });
                };

                // Generate a unique integer id (unique within the entire client session).
                // Useful for temporary DOM ids.
                var idCounter = 0;
                _.uniqueId = function (prefix) {
                    var id = ++idCounter + '';
                    return prefix ? prefix + id : id;
                };

                // By default, Underscore uses ERB-style template delimiters, change the
                // following template settings to use alternative delimiters.
                _.templateSettings = {
                    evaluate: /<%([\s\S]+?)%>/g,
                    interpolate: /<%=([\s\S]+?)%>/g,
                    escape: /<%-([\s\S]+?)%>/g
                };

                // When customizing `templateSettings`, if you don't want to define an
                // interpolation, evaluation or escaping regex, we need one that is
                // guaranteed not to match.
                var noMatch = /(.)^/;

                // Certain characters need to be escaped so that they can be put into a
                // string literal.
                var escapes = {
                    "'": "'",
                    '\\': '\\',
                    '\r': 'r',
                    '\n': 'n',
                    '\t': 't',
                    '\u2028': 'u2028',
                    '\u2029': 'u2029'
                };

                var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

                // JavaScript micro-templating, similar to John Resig's implementation.
                // Underscore templating handles arbitrary delimiters, preserves whitespace,
                // and correctly escapes quotes within interpolated code.
                _.template = function (text, data, settings) {
                    var render;
                    settings = _.defaults({}, settings, _.templateSettings);

                    // Combine delimiters into one regular expression via alternation.
                    var matcher = new RegExp([
                        (settings.escape || noMatch).source,
                        (settings.interpolate || noMatch).source,
                        (settings.evaluate || noMatch).source
                    ].join('|') + '|$', 'g');

                    // Compile the template source, escaping string literals appropriately.
                    var index = 0;
                    var source = "__p+='";
                    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
                        source += text.slice(index, offset)
                            .replace(escaper, function (match) {
                                return '\\' + escapes[match];
                            });

                        if (escape) {
                            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
                        }
                        if (interpolate) {
                            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
                        }
                        if (evaluate) {
                            source += "';\n" + evaluate + "\n__p+='";
                        }
                        index = offset + match.length;
                        return match;
                    });
                    source += "';\n";

                    // If a variable is not specified, place data values in local scope.
                    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

                    source = "var __t,__p='',__j=Array.prototype.join," +
                        "print=function(){__p+=__j.call(arguments,'');};\n" +
                        source + "return __p;\n";

                    try {
                        render = new Function(settings.variable || 'obj', '_', source);
                    } catch (e) {
                        e.source = source;
                        throw e;
                    }

                    if (data) return render(data, _);
                    var template = function (data) {
                        return render.call(this, data, _);
                    };

                    // Provide the compiled function source as a convenience for precompilation.
                    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

                    return template;
                };

                // Add a "chain" function, which will delegate to the wrapper.
                _.chain = function (obj) {
                    return _(obj).chain();
                };

                // OOP
                // ---------------
                // If Underscore is called as a function, it returns a wrapped object that
                // can be used OO-style. This wrapper holds altered versions of all the
                // underscore functions. Wrapped objects may be chained.

                // Helper function to continue chaining intermediate results.
                var result = function (obj) {
                    return this._chain ? _(obj).chain() : obj;
                };

                // Add all of the Underscore functions to the wrapper object.
                _.mixin(_);

                // Add all mutator Array functions to the wrapper.
                each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
                    var method = ArrayProto[name];
                    _.prototype[name] = function () {
                        var obj = this._wrapped;
                        method.apply(obj, arguments);
                        if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
                        return result.call(this, obj);
                    };
                });

                // Add all accessor Array functions to the wrapper.
                each(['concat', 'join', 'slice'], function (name) {
                    var method = ArrayProto[name];
                    _.prototype[name] = function () {
                        return result.call(this, method.apply(this._wrapped, arguments));
                    };
                });

                _.extend(_.prototype, {

                    // Start chaining a wrapped Underscore object.
                    chain: function () {
                        this._chain = true;
                        return this;
                    },

                    // Extracts the result from a wrapped and chained object.
                    value: function () {
                        return this._wrapped;
                    }

                });

                // AMD registration happens at the end for compatibility with AMD loaders
                // that may not enforce next-turn semantics on modules. Even though general
                // practice for AMD registration is to be anonymous, underscore registers
                // as a named module because, like jQuery, it is a base library that is
                // popular enough to be bundled in a third party lib, but not be part of
                // an AMD load request. Those cases could generate an error when an
                // anonymous define() is called outside of a loader request.
                if (typeof define === 'function' && define.amd) {
                    define('underscore', [], function () {
                        return _;
                    });
                }
            }).call(this);

        }, {}],
        17: [function (require, module, exports) {
            var $ = require('jquery');
            $('#search').keyup(function (evt) {
                var input = evt.target.value;
                var filter = input.toUpperCase();
                var ul = document.getElementById('article-wrap');
                var li = ul.getElementsByTagName('li');

                // Loop through all list items, and hide those who don't match the search query
                for (var i = 0; i < li.length; i++) {
                    var a = li[i].getAttribute('data-title');

                    if (a.toUpperCase().indexOf(filter) > -1) {
                        li[i].style.display = '';
                    } else {
                        li[i].style.display = 'none';
                    }
                }
            });

        }, {"jquery": 9}],
        18: [function (require, module, exports) {
            (function (global) {
                /* global dataLayer */
                /* global fbq */
                'use strict';

                var $ = global.$ = global.jQuery = require('jquery');
                global.Popper = require('popper.js');
                require('bootstrap');
                var Siema = require('siema');
                var SSN = require('consida-utils/dist/ssn');
                var verifyEmail = require('consida-utils/verify').verifyEmail;
                require('./explain-pages.js');

                window.originReference = window.location.href;
                var hasChangedForm = false;
//var hasEditedPhone = false;
                var bankSlide;
                var applicationSlide;

                try {
                    var hasUTMTag = window.originReference.match('utm_source');
                    if (hasUTMTag || !localStorage.getItem('lastVisit')) {
                        localStorage.setItem('originReference', window.originReference);
                        localStorage.setItem('lastVisit', Date.now());
                    }
                } catch (e) {
                }

                $(function () {
                    $('#movieModal').on('show.bs.modal', function () {
                        $('.youtube').attr('src', 'https://www.youtube.com/embed/8Qn4jrcvwnA?enablejsapi=1&version=3&playerapiid=ytplayer');
                        $('.youtube').each(function () {
                            this.contentWindow.postMessage('{"event":"command","func":"' + 'playVideo' + '","args":""}', '*');
                        });
                        // dataLayer.push({'event': 'Interaction', 'eventCategory': 'Interaction', 'eventAction': 'Click', 'eventLabel': 'Played Video'});
                    });

                    $('#movieModal').on('hidden.bs.modal', function () {
                        $('.youtube').each(function () {
                            this.contentWindow.postMessage('{"event":"command","func":"' + 'stopVideo' + '","args":""}', '*');
                        });
                    });

                    var noOfBank = 11;
                    $('.no-of-banks').text(noOfBank);
                    $('[data-toggle="tooltip"]').tooltip();
                    $('.show-loans').click(showAllLoans);
                    $('table').addClass('table table-responsive');
                    $('.accordion').click(expandQuestion);
                    $('.x-send-callback').click(sendPhoneNumber);
                    $('.scrollToForm').click(scrollToForm);
                    $('.x-new-loan').val(150000);
                    $('range-slider-new').val(150000);


                    // if(window.location.pathname === '/') {
                    //   bankSlide = new Siema({
                    //     selector: '.index-bank',
                    //     perPage: {
                    //       960: 7,
                    //       450: 5,
                    //       360: 3
                    //     }
                    //   });
                    //
                    //   $('.bank-scroll-left').click(bankPrev);
                    //   $('.bank-scroll-right').click(bankNext);
                    // }


                    if (window.location.hash === '#qanda') {
                        $('#qandaanswer').removeClass('hidden');
                    }

                    $('.scroll-to-form').click(function () {
                        $('html, body').animate({
                            scrollTop: $('.form').offset().top
                        }, 1000);
                    });
                    $('#repayment-increase').click(changeRepaymentTime);
                    $('#repayment-decrease').click(changeRepaymentTime);
                    $('.x-repayment-time').change(populateMonthlyCost);
                    $('.x-repayment-time').keyup(function (evt) {
                        limitRepaymentVal(evt.currentTarget);
                    });
                    $('.range-slider-new').on({
                        input: function (evt) {
                            var currentTarget = evt.currentTarget;
                            changeOldLoanVal(currentTarget);
                            populateLoanAmount(currentTarget);
                            populateMonthlyCost();
                            syncLoans(currentTarget);
                        },
                        blur: function () {
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Click',
                                'eventLabel': 'Drag New Amount'
                            });
                        },
                        click: function () {
                            populateMonthlyCost();
                        }
                    });
                    $('.range-slider-old').on({
                        input: function (evt) {
                            populateLoanAmount(evt.currentTarget);
                        },
                        blur: function () {
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Click',
                                'eventLabel': 'Drag Old Amount'
                            });
                        },
                    });
                    $('.x-new-loan')
                        .keyup(function (evt) {
                            changeOldLoanVal(evt.currentTarget);
                            populateMonthlyCost();
                            formatCurrency(evt);
                            syncLoans(evt.currentTarget);
                        })
                        .blur(function () {
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Key Press',
                                'eventLabel': 'Edit New Amount'
                            });
                        });
                    $('.x-old-loan')
                        .keyup(function (evt) {
                            changeNewLoanVal(evt.currentTarget);
                            formatCurrency(evt);
                            syncLoans(evt.currentTarget);
                        })
                        .blur(function () {
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Key Press',
                                'eventLabel': 'Edit Old Amount'
                            });
                        });
                    $('[name=toggleNewLoan]').change(function () {
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Check Old Loan'
                        });
                    });
                    $('.newLoanBtn').on('click', function () {
                        $('.old-loan-wrap').addClass('hidden');
                    });
                    $('.oldLoanBtn').on('click', function () {
                        initOldLoanVal();
                        $('.old-loan-wrap').removeClass('hidden');
                    });
                    // $('.toggle-partner').click(togglePartner);
                    $('[name=loanPurpose]').change(function () {
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Loan Purpose'
                        });
                        //validateLoanPurpose($('[name=loanPurpose]').val());
                    });
                    $('[name=personWorkStatus]').change(function (evt) {
                        togglePersonEmploymentStatus(evt);
                        validateWorkStatus('person', $('[name=personWorkStatus]').val());
                        if ($(this).hasClass('form-control-success')) {
                            $(this).siblings().hide();
                        } else {
                            $(this).siblings().show();
                        }
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Work Status'
                        });
                    });
                    $('[name=personCivilStatus]').change(function (evt) {
                        validateCivilStatus('person', $('[name=personCivilStatus]').val());
                        if ($(this).hasClass('form-control-success')) {
                            $(this).siblings().hide();
                        } else {
                            $(this).siblings().show();
                        }
                        if (evt.currentTarget.value === 'married') {
                            $('.person-partner-income-wrap label').text('Ektefelles/Samboers årsinntekt før skatt');
                            $('.person-partner-income-wrap').removeClass('hide');
                        } else if (evt.currentTarget.value === 'partner') {
                            $('.person-partner-income-wrap label').text('Samboers årsinntekt brutto');
                            $('.person-partner-income-wrap').removeClass('hide');
                        } else {
                            $('.person-partner-income-wrap').addClass('hide');
                        }
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Civil Status'
                        });
                    });
                    $('[name=personEducation]').change(function () {
                        validateEducationStatus('person', $('[name=personEducation]').val());
                        if ($(this).hasClass('form-control-success')) {
                            $(this).siblings().hide();
                        } else {
                            $(this).siblings().show();
                        }
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Education'
                        });
                    });

                    $('.x-new-loan').change(function () {
                        var application = {
                            amount: $('.x-new-loan').val()
                        };
                        validateNewLoan(application);
                    });
                    $('.range-slider-new').change(function () {
                        var application = {
                            amount: $('.x-new-loan').val()
                        };
                        validateNewLoan(application);
                    });

                    $('.x-old-loan').change(function () {
                        var application = {
                            oldLoan: $('.x-old-loan').val()
                        };
                        validateOldLoan(application);
                    });
                    $('.range-slider-old').change(function () {
                        var application = {
                            oldLoan: $('.x-old-loan').val()
                        };
                        validateOldLoan(application);
                    });
                    $('[name=oldLoanRepaymentTime]').change(function () {
                        var application = {
                            oldLoanRepaymentTime: $('[name=oldLoanRepaymentTime]').val()
                        };
                        validateOldLoanRepaymentTime(application);
                        if ($(this).hasClass('form-control-success')) { // If select in "Ja" field has class form-control-success remove grey chevron and add green
                            $(this).siblings().hide();
                        } else {
                            $(this).siblings().show();
                        }
                    });
                    //Person Validations
                    $('[name=personSSN]').on('blur', function (evt) {
                        validateIdNumber('person', parseIdNumber($('[name=personSSN]').val()));
                        removeNonInts(evt);
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Key Press',
                            'eventLabel': 'Edit National Id'
                        });
                    });
                    $('[name=personSSN]').on('keyup', function (evt) {
                        removeNonInts(evt);
                    });
                    $('[name=personTel]').on('blur', function () {
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Phone'
                        });
                        validatePhone('person', $('[name=personTel]').val());
                    });
                    $('[name=personTel]').on('keyup', function (evt) {
                        removeNonInts(evt);
                    });
                    $('[name=personEmail]').on('blur', function () {
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Email'
                        });
                        validateEmail('person', $('[name=personEmail]').val());
                    });
                    $('[name=personEmail]').on('keyup', function (evt) {
                        removeSpaces(evt.currentTarget.value);
                    });
                    $('[name=personChildAmount]').on('change', function () {
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Amount Of Children'
                        });
                        validateChildAmount('person', $('[name=personChildAmount]').val());
                        if ($(this).hasClass('form-control-success')) {
                            $(this).siblings().hide();
                        } else {
                            $(this).siblings().show();
                        }
                    });
                    $('[name=personEmployer]').on('blur', function () {
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Company Name'
                        });
                        validateEmployer('person', $('[name=personEmployer]').val());
                    });
                    // $('[name=personEmployerTel]').on('blur', function(){
                    //   validateEmployerPhone('person',$('[name=personEmployerTel]').val());
                    // });
                    // $('[name=personEmployerTel]').on('keyup', function(evt){
                    //   removeNonInts(evt);
                    // });
                    $('[name=personYearlyIncome]').on('blur', function () {
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Yearly Income'
                        });
                        validateYearlyIncome('person', $('[name=personYearlyIncome]').val());
                    });
                    $('[name=personMonthlyIncome]').on('blur', function () {
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Monthly Income'
                        });
                        validateMonthlyIncome('person', $('[name=personMonthlyIncome]').val());
                    });
                    $('[name=personHomeStatus]').on('change', function (evt) {
                        validateHomeStatus('person', $('[name=personHomeStatus]').val());
                        changeLivingCostLabel(evt.currentTarget.value);
                        determineSecondaryHomeStatusFields(evt.currentTarget.value);
                        togglePersonLivingStatus(evt);
                        if ($(this).hasClass('form-control-success')) {
                            $(this).siblings('span').hide();
                        } else {
                            $(this).siblings('span').show();
                        }
                        dataLayer.push({
                            'event': 'Form',
                            'eventCategory': 'Form',
                            'eventAction': 'Click',
                            'eventLabel': 'Edit Home Status'
                        });
                    });
                    $('[name=personHousingCost]').on('blur', function () {
                        validateHousingCost('person', $('[name=personHousingCost]').val());
                    });
                    $('[name=personEmploymentYear]').on('change', function () {
                        validateEmploymentDateYear('person', $('[name=personEmploymentYear]').val());
                    });
                    $('[name=personEmploymentMonth]').on('change', function () {
                        validateEmploymentDateMonth('person', $('[name=personEmploymentMonth]').val());
                    });
                    $('[name=personPartnerIncome]').on('blur', function (evt) {
                        validatePartnerIncome(evt.currentTarget.value);
                    });
                    $('[name=personCarDebt]').on({
                        blur: function (evt) {
                            removeNonInts(evt);
                            showCarDebtRepayment(evt);
                            validateCarDebt(evt.currentTarget.value);
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Key Press',
                                'eventLabel': 'Edit Car Debt'
                            });
                        },
                        keyup: function (evt) {
                            removeNonInts(evt);
                            formatCurrency(evt);
                        }
                    });
                    $('[name=personOtherDebt]').on({
                        blur: function (evt) {
                            removeNonInts(evt);
                            showOtherDebtRepayment(evt);
                            validateOtherDebt(evt.currentTarget.value);
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Key Press',
                                'eventLabel': 'Edit Other Debt'
                            });
                        },
                        keyup: function (evt) {
                            formatCurrency(evt);
                            removeNonInts(evt);
                        }
                    });

                    $('[name=personMortgage]').on({
                        blur: function (evt) {
                            validateMortgage(evt.currentTarget.value);
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Key Press',
                                'eventLabel': 'Edit Mortgage'
                            });
                        },
                        keyup: function (evt) {
                            formatCurrency(evt);
                            if (parseNumber(evt.currentTarget.value) > 0 && $('[name=personCivilStatus]').val() !== 'single') {
                                $('.person-mortgage-percentage-wrap').removeClass('hide');
                            } else {
                                $('.person-mortgage-percentage-wrap').addClass('hide');
                            }
                        }
                    });
                    $('[name=personMortgagePercentage]').change(function (evt) {
                        validateMortgagePercentage(evt.currentTarget.value);
                        if ($(this).hasClass('form-control-success')) {
                            $(this).siblings('span').hide();
                        } else {
                            $(this).siblings('span').show();
                        }
                    });
                    $('[name=personRentalIncome]').on({
                        blur: function (evt) {
                            validateRentalIncome(evt.currentTarget.value);
                        },
                    });

                    $('[name=accountNumber]')
                        .blur(function (evt) {
                            removeNonInts(evt);
                            setAccountNumberValidation(evt.currentTarget.value);
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Key Press',
                                'eventLabel': 'Edit Account Number'
                            });
                        })
                        .keyup(function (evt) {
                            removeNonInts(evt);
                        });

                    $('.btn-apply').click(sendForm);
                    $('.x-leave-samblaplus').submit(sendLeaveSamblaPlus);
                    if (window.location.pathname !== '/') {
                        $('.loan-time-wrap').removeClass('col-md-5');
                        $('.total-loan-wrap').removeClass('col-md-7');
                    }
                    //Auto fill form with GET-params
                    var parseQueryString = function (url) {
                        var urlParams = {};
                        url.replace(
                            new RegExp('([^?=&]+)(=([^&]*))?', 'g'),
                            function ($0, $1, $2, $3) {
                                urlParams[$1] = $3;
                            }
                        );

                        return urlParams;
                    };
                    var urlToParse = location.search;
                    var params = parseQueryString(urlToParse);
                    if (params.repaymenttime) {
                        $('.x-repayment-time').val(params.repaymenttime);
                    }
                    if (params.newloan) {
                        $('.x-new-loan').val(params.newloan);
                    }
                    if (params.oldloan) {
                        $('#refinanceRadio').click();
                        $('.x-old-loan').val(params.oldloan);
                    }
                    $('.x-repayment-time').change();

                    function firstInteractionWithForm() {
                        if (!hasChangedForm) {
                            dataLayer.push({
                                'event': 'Form',
                                'eventCategory': 'Form',
                                'eventAction': 'Click',
                                'eventLabel': 'Edit Form'
                            });
//      fbq('track', 'InitiateCheckout');
                            hasChangedForm = true;
                        }
                        $('.btn-apply').prop({disabled: false});
                    }

                    $('.form input, .form select, .form button').on('focus click input', firstInteractionWithForm);
                });

                function bankNext() {
                    bankSlide.next();
                }

                function bankPrev() {
                    bankSlide.prev();
                }

                function showCarDebtRepayment(evt) {
                    var val = evt.currentTarget.value;
                    val = parseNumber(val);

                    if (val && val !== 0) {
                        $('.car-repayment-wrap').css('height', 'initial');
                        $('.car-repayment-inner').removeClass('hide');
                    } else {
                        $('.car-repayment-wrap').css('height', '0');
                        $('.car-repayment-inner').addClass('hide');
                    }
                }

                function showOtherDebtRepayment(evt) {
                    var val = evt.currentTarget.value;
                    val = parseNumber(val);

                    if (val && val !== 0) {
                        $('.other-repayment-wrap').css('height', 'initial');
                        $('.other-repayment-inner').removeClass('hide');
                    } else {
                        $('.other-repayment-wrap').css('height', '0');
                        $('.other-repayment-inner').addClass('hide');
                    }
                }

                function ongoingApplicationsSetup(res) {
                    $.each(res, function (index, data) {
                        if (data.gender === 'female') {
                            data.gender = 'Kvinne';
                        } else {
                            data.gender = 'Mann';
                        }

                        data.amount = data.amount.toString();
                        data.amount = data.amount.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');

                        var $application = $('<div class="an-application"></div>').append(
                            $('<div class="applicant-attr text-center strong"><span>' + data.gender + ', </span><span class="applicant-gender">' + data.age + '&nbsp;år</span></div>'),
                            $('<div class="applicant-stats"><p class="strong">SØKNAD: <span><span>(' + data.repaymentTime + ' mån)</span><span>' + data.amount + '&nbsp;kr&nbsp;</span></span></p><p class="strong">HØYEST RENTE: <span class="red-dot"></span><span>' + data.worstEffectiveInterest.toFixed(2) + '%</span><p class="strong">LAVESTE RENTE: <span class="green-dot"></span><span>' + data.bestEffectiveInterest.toFixed(2) + '%</span><p class="strong">AT SPARE: <span>' + data.savePerYear + '&nbsp;kr/år</span></div>')
                        );
                        $('.ongoing-applications-wrap').append($application);
                    });

                    applicationSlide = new Siema({
                        selector: '.ongoing-applications-wrap',
                        loop: true,
                        perPage: {
                            658: 2,
                            992: 3,
                            1247: 4,
                            1535: 5
                        },
                    });
                    Siema.prototype.addPagination = function () {
                        for (var i = 0; i < this.innerElements.length; i++) {
                        }
                        i = i / 4;
                        for (var j = 0; j < i; j++) {
                            $('.ongoing-applications-outer .dots').append('<span></span>');
                        }
                        $('.ongoing-applications-outer .dots span').first().addClass('active');
                    };
                    applicationSlide.addPagination();

                    $('.application-scroll-right').click(applicationNext);
                    $('.application-scroll-left').click(applicationPrev);
                }

                function applicationNext() {
                    applicationSlide.next();
                }

                function applicationPrev() {
                    applicationSlide.prev();
                }

                function changeLivingCostLabel(val) {
                    if (val === 'rented') {
                        $('.person-home-cost-wrap label').text('Husleie pr måned');
                    } else if (val === 'apartment') {
                        $('.person-home-cost-wrap label').text('Månadsavgift');
                    } else if (val === 'house') {
                        $('.person-home-cost-wrap label').text('Driftkost/månad');
                    } else {
                        $('.person-home-cost-wrap label').text('Husleie pr måned');
                    }
                }

                function scrollToForm() {
                    $('html, body').animate({
                        scrollTop: $('.x-new-loan').offset().top - 90
                    }, 1000);
                }

                function limitRepaymentVal() {
                    if ($('.x-repayment-time').val() > 15) {
                        $('.x-repayment-time').val(15);
                    }
                }

                function syncLoans(e) {
                    var int = e.value.replace(/\D/g, '');
                    int = parseInt(int, 10);
                    if (e.name === 'oldLoanAmount') {
                        if (int >= $('.x-new-loan').val() && int < 500000) {
                            $('.x-new-loan').val($('.x-old-loan').val());
                            $('.range-slider-new').val(int);
                            $('.range-slider-old').val($('.range-slider-new').val(int));
                            $('#old-range-slider-label').text(e.value + ' kr');
                            e.value = $('.x-new-loan').val();
                        } else if (int >= 500000) {
                            $('.x-new-loan').val(500000);
                            $('.x-old-loan').val(500000);
                            $('.range-slider-new').val(500000);
                            $('#old-range-slider-label').text('500 000 kr');
                            e.value = 500000;
                        }
                    } else {
                        document.querySelector('.range-slider-old').max = int;
                        var reFormattedVal = int.toString();
                        reFormattedVal = reFormattedVal.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
                        $('#old-range-slider-label').text(reFormattedVal + ' kr');
                        if (int >= 500000) {
                            $('.x-new-loan').val(500000);
                            $('.range-slider-new').val(500000);
                            if ($('.x-old-loan').val() >= 500000 || $('.range-slider-old').val() >= 500000) {
                                $('.x-old-loan').val(500000);
                                $('.range-slider-old').val(500000);
                                $('#old-range-slider-label').text('500 000 kr');
                            }
                        }
                    }
                }

                function removeNonInts(evt) {
                    if (evt.currentTarget.name === 'personSSN') {
                        var sanitizedSSN = evt.currentTarget.value.replace(/\D/g, '');
                        $('[name=personSSN]').val(sanitizedSSN);
                    } else if (evt.currentTarget.name === 'personTel') {
                        var sanitizedPersonTel = evt.currentTarget.value.replace(/\D/g, '');
                        $('[name=personTel]').val(sanitizedPersonTel);
                    } else if (evt.currentTarget.name === 'accountNumber') {
                        var sanitizedAccountNumber = evt.currentTarget.value.replace(/\D/g, '');
                        $('[name=accountNumber]').val(sanitizedAccountNumber);
                    } else if (evt.currentTarget.name === 'personOtherDebt') {
                        var sanitizedPersonOtherDebt = evt.currentTarget.value.replace(/\D/g, '');
                        $('[name=personOtherDebt]').val(sanitizedPersonOtherDebt);
                    } else if (evt.currentTarget.name === 'personCarDebt') {
                        var sanitizedPersonCarDebt = evt.currentTarget.value.replace(/\D/g, '');
                        $('[name=personCarDebt]').val(sanitizedPersonCarDebt);
                    }
                    // else if(evt.currentTarget.name === 'personEmployerTel'){
                    //   var sanitizedPersonEmployerTel = evt.currentTarget.value.replace(/\D/g,'');
                    //   $('[name=personEmployerTel]').val(sanitizedPersonEmployerTel);
                    // }
                }

                function removeSpaces(val) {
                    var sanitizedEmail = val.replace(/\s/g, '');
                    $('[name=personEmail]').val(sanitizedEmail);
                }

                function initOldLoanVal() {
                    var newLoan = $('.x-new-loan').val().replace(/\D/g, '') || 150000;
                    newLoan = parseInt(newLoan, 10);
                    $('.x-old-loan').val(newLoan);
                    $('.range-slider-old').val(newLoan);
                    document.querySelector('.range-slider-old').max = newLoan;
                }

                function changeOldLoanVal(e) {
                    var reFormattedVal;
                    var newLoan = e.value.replace(/\D/g, '') || 5000;
                    newLoan = parseInt(newLoan, 10);
                    var oldLoan = $('.x-old-loan').val().replace(/\D/g, '');
                    oldLoan = parseInt(oldLoan, 10);

                    if (newLoan < oldLoan) {
                        document.querySelector('.range-slider-old').max = newLoan;
                        $('.x-old-loan').val(newLoan);
                        $('.range-slider-old').val(newLoan);
                        reFormattedVal = newLoan.toString();
                        reFormattedVal = reFormattedVal.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
                        $('#old-range-slider-label').text(reFormattedVal + ' kr');
                    } else {
                        reFormattedVal = newLoan.toString();
                        reFormattedVal = reFormattedVal.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
                        $('#old-range-slider-label').text(reFormattedVal + ' kr');
                    }
                    // var reFormattedVal = new String(newLoan);
                    // reFormattedVal = reFormattedVal.replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                    // $('#old-range-slider-label').text(reFormattedVal + ' kr');
                }

                function changeNewLoanVal(e) {
                    var oldLoan = e.value.replace(/\D/g, '');
                    oldLoan = parseInt(oldLoan, 10);
                    var newLoan = $('.x-new-loan').val().replace(/\D/g, '') || 5000;
                    newLoan = parseInt(newLoan, 10);

                    if (oldLoan > newLoan) {
                        $('.x-new-loan').val(newLoan);
                        $('.range-slider-new').val(newLoan);
                    } else {
                        document.querySelector('.range-slider-old').max = newLoan;
                        $('.x-old-loan').val(oldLoan);
                        $('.range-slider-old').val(oldLoan);
                    }
                }

//function changeRepaymentTime(evt) {
//  var repaymentTime = parseInt($('.x-repayment-time').val());
//  var action = $(evt.currentTarget).attr('id');
//  var minYear = 1;
//  var maxYear = 15;
//
//  if ( action === 'repayment-decrease' && repaymentTime === minYear) {
//    return ;
//  }
//
//  if ( action !== 'repayment-decrease' && repaymentTime === maxYear) {
//    return ;
//  }
//
//  if ( action === 'repayment-decrease' ) {
//    repaymentTime = repaymentTime - 1;
//  }
//
//  if ( action !== 'repayment-decrease' ) {
//    repaymentTime = repaymentTime + 1;
//  }
//
//  $('.x-repayment-time').val(repaymentTime);
//  populateMonthlyCost();
//
//  // dataLayer.push({'event': 'Interaction', 'eventCategory': 'Interaction', 'eventAction': 'Key Press', 'eventLabel': 'Edit Year'});
//}

//function editPhoneForm() {
//  if(!hasEditedPhone) {
//    fbq('track', 'InitiateCheckout');
//    hasEditedPhone = true;
//  }
//}

                function populateMonthlyCost() {
                    var repaymentTime = $('.x-repayment-time').val();
                    var newLoan = $('.x-new-loan').val();
                    var interest = 6.96;

                    var totalAmount = parseInt((newLoan.replace(/\D/g, '') || 0), 10);
                    totalAmount = totalAmount < 0 || totalAmount > 500000 ? 500000 : (totalAmount || 100000);

                    repaymentTime = repaymentTime.replace(/\D/g, '');

                    //Convert to months
                    repaymentTime = repaymentTime * 12;

                    var monthlyCost = ((totalAmount) * (interest / 1200) / (1 - (Math.pow(1 / (1 + (interest / 1200)), repaymentTime))));
                    monthlyCost = Math.round(monthlyCost);
                    monthlyCost = monthlyCost.toString();

                    monthlyCost = monthlyCost.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');

                    $('.monthly-cost').text(monthlyCost + ' kr/mån*');
                }

                function populateLoanAmount(el) {
                    var $element = $(el);
                    var value = $element.val();
                    var $target = ($element.attr('class') === 'range-slider-old') ? $('.x-old-loan') : $('.x-new-loan');
                    $target.val(value);
                }

                function expandQuestion(event) {
                    $('.x-question').children().each(function () {
                        $(this).closest('.x-question').find('.x-answer').addClass('hidden');
                    });
                    //$(event.target).closest('h4').toggleClass('rotate');
                    $(event.target).closest('.x-question').find('.x-answer').toggleClass('hidden');
                }

                function sendPhoneNumber() {
                    var originReference;

                    try {
                        originReference = localStorage.getItem('originReference') || window.originReference;
                    } catch (e) {
                    }

                    var application = {
                        originReference: originReference || window.location.href,
                        lastPage: document.referrer,
                        person: {
                            phoneNumber: $('.x-phone-number-callback').val()
                        }
                    };

                    if (application.person.phoneNumber === 8 && (application.person.phoneNumber.slice(0, 1) === '4' || application.person.phoneNumber.slice(0, 1) === '9')) {
                        $.ajaxPrefilter(function (options) {
                            options.crossDomain = {
                                crossDomain: true
                            };
                        });

                        $.ajax({
                            method: 'POST',
                            url: 'https://api.consida.se/NO/contact',
                            data: JSON.stringify(application),
                            dataType: 'json',
                            contentType: 'application/json; charset=UTF-8',
                            success: function () {
                                dataLayer.push({
                                    'event': 'Form',
                                    'eventCategory': 'Form',
                                    'eventAction': 'Conversion',
                                    'eventLabel': 'Successful Contact Request'
                                });
                                $('.send-phone-number-wrap').removeClass().addClass('send-phone-number-wrap has-success');
                                $('.form-control-feedback').removeClass('hidden').addClass('success').text('Tusen Takk! Du vil bli kontaktet av oss om kort tid 😎');
                            },

                            error: function (res) {
                                console.error('could not send contact request', res);
                                $('.send-phone-number-wrap').removeClass().addClass('send-phone-number-wrap has-danger');
                                $('.form-control-feedback').removeClass('hidden').addClass('danger').text('Noe gikk galt, prøv igjen senere!😖');
                            }
                        });
                    } else {
                        $('.send-phone-number-wrap').removeClass().addClass('send-phone-number-wrap has-warning');
                        $('.form-control-feedback').removeClass('hidden').addClass('warning').text('Telefonnummeret er feil 😐');
                    }
                }

                function validateEducationStatus(personType, val) {
                    var education = val;

                    if (personType === 'person') {
                        $('.person-education-status-wrap').removeClass('has-danger has-success');
                        $('[name=personEducation]').removeClass('form-control-danger');
                        $('.person-education-status-feedback').empty();

                        if (education !== '-') {
                            $('.person-education-status-wrap').addClass('has-success');
                            $('[name=personEducation]').addClass('form-control-success');
                            return true;
                        } else {
                            $('.person-education-status-wrap').addClass('has-danger');
                            // $('[name=personCivilStatus]').addClass('form-control-danger');
                            $('.person-education-status-feedback').text('Angi utdanningsnivå');
                            return false;
                        }
                    } else {

                    }
                }

                function validateEmploymentDateYear(personType, val) {
                    var year = val;

                    if (personType === 'person') {
                        $('.person-employed-since-year').removeClass('has-danger has-success');
                        $('.person-employed-since-month').removeClass('hidden');

                        if (year === '-') {
                            $('.person-employed-since-year').addClass('has-danger');
                            return false;
                        } else if (year === '2014') {
                            $('.person-employed-since-year').addClass('has-success');
                            $('.person-employed-since-month').addClass('hidden');
                            return true;
                        } else {
                            $('.person-employed-since-year').addClass('has-success');
                            return true;
                        }
                    } else {
                        $('.partner-employed-since-year').removeClass('has-danger has-success');
                        $('.partner-employed-since-month').addClass('hidden');
                        if (year === '-') {
                            $('.partner-employed-since-year').addClass('has-danger');
                            return false;
                        } else if (year === '2014') {
                            $('.partner-employed-since-year').addClass('has-success');
                            $('.partner-employed-since-month').addClass('hidden');
                            return true;
                        } else {
                            $('.partner-employed-since-year').addClass('has-success');
                            return true;
                        }
                    }

                }

                function validateEmploymentDateMonth(personType, val) {
                    var month = val;

                    if (personType === 'person') {
                        $('.person-employed-since-month').removeClass('has-danger has-success');
                        if ($('[name=personEmploymentYear]').val() === '2014') {
                            return true;
                        } else if (month === '-') {
                            $('.person-employed-since-month').addClass('has-danger');
                            return false;
                        } else {
                            $('.person-employed-since-month').addClass('has-success');
                            return true;
                        }
                    } else {
                        $('.partner-employed-since-month').removeClass('has-danger has-success');
                        if (month === '-') {
                            $('.partner-employed-since-month').addClass('has-danger');
                            return false;
                        } else {
                            $('.partner-employed-since-month').addClass('has-success');
                            return true;
                        }
                    }
                }

                function changeRepaymentTime() {
                    var repaymentTime = $('.x-repayment-time').val();
                    if ($(this).attr('id') === 'repayment-decrease') {
                        if (repaymentTime > 1) {
                            repaymentTime = --repaymentTime;
                        }
                    } else {
                        if (repaymentTime < 15) {
                            repaymentTime = ++repaymentTime;
                        }
                    }

                    $('.x-repayment-time').val(repaymentTime);
                    populateMonthlyCost();
                    dataLayer.push({
                        'event': 'Form',
                        'eventCategory': 'Form',
                        'eventAction': 'Change',
                        'eventLabel': 'Edit Repayment Time'
                    });
                }

                function parseNumber(value) {
                    return parseInt(String(value).trim().replace(/\D/g, ''), 10);
                }

                function parseIdNumber(value) {
                    if (typeof value !== 'string') {
                        return;
                    }

                    return value;
                }

                function determineSecondaryHomeStatusFields(val) {
                    $('.person-mortgage-wrap').addClass('hide');
                    $('.person-rental-income-wrap').addClass('hide');
                    $('.person-home-cost-wrap').addClass('hide');
                    if (val === 'rented') {
                        $('.person-mortgage-wrap').addClass('hide');
                        $('.person-rental-income-wrap').addClass('hide');
                        $('.person-home-cost-wrap').removeClass('hide');
                    } else if (val === 'house') {
                        $('.person-mortgage-wrap').removeClass('hide');
                        $('.person-rental-income-wrap').removeClass('hide');
                        $('.person-home-cost-wrap').removeClass('hide');
                    } else if (val === 'roommate') {
                        $('.person-mortgage-wrap').addClass('hide');
                        $('.person-rental-income-wrap').addClass('hide');
                        $('.person-home-cost-wrap').removeClass('hide');
                    }
                }

                function sanitize(obj) {
                    for (var field in obj) {
                        if (typeof obj[field] === 'string') {
                            obj[field] = obj[field].trim();
                        }

                        if ((typeof obj[field] === 'string' && obj[field].length < 1) ||
                            obj[field] === null ||
                            (typeof obj[field] === 'number' && isNaN(obj[field]))) {
                            delete obj[field];
                        }
                    }
                }

                function showAllLoans() {
                    $('.loan-row-2').addClass('loan-row-2-show');
                    $('.show-loans').addClass('hidden');
                }

                function formatCurrency(evt) {
                    evt.currentTarget.value = evt.currentTarget.value.replace(/ /g, '');

                    var number = evt.currentTarget.value;
                    evt.currentTarget.value = number.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
                    setSliderVal(evt);

                    if ($(evt.currentTarget).hasClass('.x-new-loan')) {
                        populateLoanAmount();
                    }
                }

                function setSliderVal(evt) {
                    var oldLoan = $('.x-old-loan').val();
                    var newLoan = $('.x-new-loan').val();

                    if ($(evt.currentTarget).hasClass('x-new-loan')) {
                        $('.range-slider-new').val(parseInt(newLoan.replace(/\D/g, ''), 10));
                    } else {
                        $('.range-slider-old').val(parseInt(oldLoan.replace(/\D/g, ''), 10));
                    }
                }

// function togglePartner(){
//   $('.partner-wrap').toggleClass('hidden');
// }

                var employmentLabel = {
                    employedPrivate: {
                        companyName: 'Arbeidsgiver',
                        monthlyIncome: 'Månedsinntekt etter skatt',
                        yearlyIncome: 'Årsinntekt før skatt',
                    },
                    employedState: {
                        companyName: 'Arbeidsgiver',
                        monthlyIncome: 'Månedsinntekt etter skatt',
                        yearlyIncome: 'Årsinntekt før skatt',
                    },
                    selfEmployed: {
                        companyName: 'Arbeidsgiver',
                        monthlyIncome: 'Månedsinntekt etter skatt',
                        yearlyIncome: 'Årsinntekt før skatt',
                    },
                    retired: {
                        companyName: '',
                        monthlyIncome: 'Månedsinntekt før skattt',
                        yearIncome: 'Månedsinntekt etter skatt',
                    },
                    hourlyEmployment: {
                        companyName: 'Arbeidsgiver',
                        monthlyIncome: 'Månedsinntekt etter skatt',
                        yearlyIncome: 'Årsinntekt før skatt',
                    },
                    disability: {
                        companyName: '',
                        monthlyIncome: 'Månedsinntekt etter skatt',
                        yearlyIncome: 'Årsinntekt før skatt',
                    },
                    rehabilitation: {
                        companyName: '',
                        monthlyIncome: 'Månedsinntekt før skattt',
                        yearIncome: 'Månedsinntekt etter skatt',
                    },
                    unemployed: {
                        companyName: '',
                        monthlyIncome: 'Månedsinntekt før skattt',
                        yearIncome: 'Månedsinntekt etter skatt',
                    }
                };

                function renamePersonEmploymentLabels(employment) {
                    $('.person-employer-wrap').children('.mat-lbl').text(employment.companyName);
                    $('.person-year-income-wrap').children('.mat-lbl').text(employment.yearlyIncome);
                    $('.person-monthly-income-wrap').children('.mat-lbl').text(employment.monthlyIncome);
                }

//function renamePartnerEmploymentLabels(employment) {
//  $('.partner-employer-wrap').children('.mat-lbl').text(employment.companyName);
//  $('.partner-year-income-wrap').children('.mat-lbl').text(employment.yearlyIncome);
//  $('.partner-monthly-income-wrap').children('.mat-lbl').text(employment.monthlyIncome);
//}


                function togglePersonEmploymentStatus(evt) {
                    //Reset values
                    $('.person-employer-wrap').removeClass('hide');
                    $('.person-employer-phone-wrap').removeClass('hide');
                    $('.person-work-status-wrap').removeClass('has-danger has-success');
                    $('.person-work-status-feedback ').text('');

                    if (evt.currentTarget.value === 'employedPrivate') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        renamePersonEmploymentLabels(employmentLabel.employedPrivate);
                    } else if (evt.currentTarget.value === 'employedState') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        renamePersonEmploymentLabels(employmentLabel.employedState);
                    } else if (evt.currentTarget.value === 'selfemployed') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        renamePersonEmploymentLabels(employmentLabel.selfEmployed);
                    } else if (evt.currentTarget.value === 'earlyRetirement') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        $('.person-employer-wrap').addClass('hide');
                        $('.person-employed-since-wrap label').text('Uføretrygd siden');
                        renamePersonEmploymentLabels(employmentLabel.earlyRetirement);
                    } else if (evt.currentTarget.value === 'retired') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        $('.person-employer-wrap').addClass('hide');
                        $('.person-employed-since-wrap label').text('Pensjonist siden');
                        renamePersonEmploymentLabels(employmentLabel.retired);
                    } else if (evt.currentTarget.value === 'disability') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        $('.person-employer-wrap').addClass('hide');
                        $('.person-employer-phone-wrap').addClass('hide');
                        $('.person-employed-since-wrap label').text('Uføretrygd siden');
                        renamePersonEmploymentLabels(employmentLabel.disability);
                    } else if (evt.currentTarget.value === 'rehabilitation') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        $('.person-employer-wrap').addClass('hide');
                        $('.person-employed-since-wrap label').text('Rehabilitering siden');
                        renamePersonEmploymentLabels(employmentLabel.rehabilitation);
                    } else if (evt.currentTarget.value === 'unemployed') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        $('.person-employer-wrap').addClass('hide');
                        $('.person-employed-since-wrap label').text('Arbeidledig siden');
                        renamePersonEmploymentLabels(employmentLabel.unemployed);
                    } else if (evt.currentTarget.value === 'hourlyEmployment') {
                        $('.person-employment-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                        renamePersonEmploymentLabels(employmentLabel.hourlyEmployment);
                    } else {
                        $('.person-employment-dropdown').addClass('hide');

                        if ($('.person-employment-dropdown').hasClass('hide') && $('.person-home-status-dropdown').hasClass('hide')) {
                            $('.person-dropdown-wrap').addClass('zero-height');
                        }
                    }
                }

                function togglePersonLivingStatus(evt) {
                    if (evt.currentTarget.value === '-') {
                        $('.person-home-status-dropdown').addClass('hide');
                        if ($('.person-employment-dropdown').hasClass('hide') && $('.person-home-status-dropdown').hasClass('hide')) {
                            $('.person-dropdown-wrap').addClass('zero-height');
                        }
                    } else {
                        $('.person-home-status-dropdown').removeClass('hide');
                        $('.person-dropdown-wrap').removeClass('zero-height');
                    }
                }

// function togglePartnerEmploymentStatus(evt){
//   $('.partner-employer-wrap').removeClass('hide');
//   $('.partner-employer-phone-wrap').removeClass('hide');
//   $('.partner-work-status-wrap').removeClass('has-danger has-success');
//   $('.partner-work-status-feedback ').text('');
//
//   if(evt.currentTarget.value === 'employed') {
//     $('.partner-employment-dropdown').removeClass('hide');
//     $('.partner-dropdown-wrap').removeClass('zero-height');
//     renamePartnerEmploymentLabels(employmentLabel.employed);
//   } else if(evt.currentTarget.value === 'selfemployed') {
//     $('.partner-employment-dropdown').removeClass('hide');
//     $('.partner-dropdown-wrap').removeClass('zero-height');
//     renamePartnerEmploymentLabels(employmentLabel.selfEmployed);
//   } else if(evt.currentTarget.value === 'earlyRetirement') {
//     $('.partner-employment-dropdown').removeClass('hide');
//     $('.partner-dropdown-wrap').removeClass('zero-height');
//     $('.partner-employer-wrap').addClass('hide');
//     $('.partner-employer-phone-wrap').addClass('hide');
//     renamePartnerEmploymentLabels(employmentLabel.earlyRetirement);
//   } else if(evt.currentTarget.value === 'retired') {
//     $('.partner-employment-dropdown').removeClass('hide');
//     $('.partner-dropdown-wrap').removeClass('zero-height');
//     $('.partner-employer-wrap').addClass('hide');
//     $('.partner-employer-phone-wrap').addClass('hide');
//     renamePartnerEmploymentLabels(employmentLabel.retired);
//   } else if(evt.currentTarget.value === 'temporaryEmployment'){
//     $('.partner-employment-dropdown').removeClass('hide');
//     $('.partner-dropdown-wrap').removeClass('zero-height');
//     renamePartnerEmploymentLabels(employmentLabel.employed);
//   } else if(evt.currentTarget.value === 'hourlyEmployment'){
//     $('.partner-employment-dropdown').removeClass('hide');
//     $('.partner-dropdown-wrap').removeClass('zero-height');
//     renamePartnerEmploymentLabels(employmentLabel.hourlyEmployment);
//   } else {
//     $('.partner-employment-dropdown').addClass('hide');
//
//     if($('.partner-employment-dropdown').hasClass('hide') && $('.partner-home-status-dropdown').hasClass('hide')){
//       $('.partner-dropdown-wrap').addClass('zero-height');
//     }
//   }
// }
//
// function togglePartnerCivilStatus(evt){
//   if(evt.currentTarget.value === '-'){
//     $('.partner-home-status-dropdown').addClass('hide');
//     if($('.partner-employment-dropdown').hasClass('hide') && $('.partner-home-status-dropdown').hasClass('hide')){
//       $('.partner-dropdown-wrap').addClass('zero-height');
//     }
//   } else {
//     $('.partner-home-status-dropdown').removeClass('hide');
//     $('.partner-dropdown-wrap').removeClass('zero-height');
//   }
// }

                function validateNewLoan(application) {
                    var $newLoanWrap = $('.person-new-loan-wrap'),
                        $newLoanWarning = $('.new-loan-warning');

                    $newLoanWrap.removeClass('has-danger has-success');
                    $newLoanWarning.empty();

                    if (application.amount > 500000 || application.amount < 0) {
                        $newLoanWrap.addClass('has-danger');
                        $('[name=newloanAmount]').addClass('form-control-danger');
                        $newLoanWarning.text('Høyeste lånebeløp er 500 000 kr');
                        return false;
                    } else if (!application.amount) {
                        $newLoanWrap.addClass('has-danger');
                        $('[name=newloanAmount]').addClass('form-control-danger');
                        $newLoanWarning.text('Angi ditt lånebeløp');
                        return false;
                    } else if (application.amount < 0) {
                        $newLoanWrap.addClass('has-danger');
                        $('[name=newLoanAmount]').addClass('form-control-danger');
                        $newLoanWrap.addClass('warning').text('Angi positivt lånebeløp');
                        return false;
                    } else {
                        $newLoanWrap.addClass('has-success');
                        $('[name=newloanAmount]').addClass('form-control-success');
                        $newLoanWarning.empty();
                        return true;
                    }
                    //var formattedAmount = application.amount.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
                    //$('.refinance-text').text('Av ' + formattedAmount + ' kr, hur mycket ska gå till att samla lån?');

                }

                function validateOldLoan(application) {
                    var $oldLoanWrap = $('.person-old-loan-wrap'),
                        $oldLoanWarning = $('.person-old-loan-feedback'),
                        // $oldLoanCB = $('.toggle-old-loan').is(':checked');
                        $oldLoanCB = $('#refinanceRadio').is(':checked');

                    $oldLoanWrap.removeClass('has-danger has-success');
                    $oldLoanWarning.empty();

                    if (!application.oldLoan && $oldLoanCB === true) {
                        $oldLoanWrap.addClass('has-danger');
                        $('[name=oldLoanAmount]').addClass('form-control-danger');
                        $oldLoanWarning.addClass('warning').text('Angi ditt lånebeløp');
                        return false;
                    } else if (application.amount < 0) {
                        $oldLoanWrap.addClass('has-danger');
                        $('[name=oldLoanAmount]').addClass('form-control-danger');
                        $oldLoanWarning.addClass('warning').text('Angi positivt lånebeløp');
                        return false;
                    } else {
                        $oldLoanWrap.addClass('has-success');
                        $('[name=oldLoanAmount]').addClass('form-control-success');
                        $oldLoanWarning.empty();
                        return true;
                    }
                }

                function validateOldLoanRepaymentTime(application) {
                    var $oldLoanRepaymentWrap = $('.old-loan-repayment-wrap'),
                        $oldLoanRepaymentWarning = $('.old-loan-repayment-feedback');

                    $oldLoanRepaymentWrap.removeClass('has-danger has-success');
                    $oldLoanRepaymentWarning.empty();

                    if (!application.oldLoanRepaymentTime) {
                        $oldLoanRepaymentWrap.addClass('has-danger');
                        $('[name=oldLoanRepaymentTime]').addClass('form-control-danger');
                        $oldLoanRepaymentWarning.addClass('warning').text('Angi nedbetalingstiden på nåværende lån. Om du har flere lån angi den lengste nedbetalingstiden.');
                        return false;
                    } else if (application.oldLoanRepaymentTime === '-') {
                        $oldLoanRepaymentWrap.addClass('has-danger');
                        $('[name=oldLoanRepaymentTime]').addClass('form-control-danger');
                        $oldLoanRepaymentWarning.addClass('warning').text('Angi nedbetalingstiden på nåværende lån. Om du har flere lån angi den lengste nedbetalingstiden.');
                        return false;
                    } else {
                        $oldLoanRepaymentWrap.addClass('has-success');
                        $('[name=oldLoanRepaymentTime]').addClass('form-control-success');
                        $oldLoanRepaymentWarning.empty();
                        return true;
                    }
                }

// function validateLoanPurpose(val){
//   var $loanPurposeWrap = $('.person-loan-purpose-wrap'),
//   $loanPurposeWarning = $('.person-loan-purpose-feedback');
//   $loanPurposeWrap.removeClass('has-danger has-success');
//   $loanPurposeWarning.empty();
//
//   if(val === '-'){
//     $loanPurposeWrap.addClass('has-danger');
//     return false;
//   } else if(val === 'buyHouse'){
//     $loanPurposeWrap.addClass('has-danger');
//     $loanPurposeWarning.text('Vi kan tyvärr inte hjälpa till med bostadslån');
//     return false;
//   } else {
//     $loanPurposeWrap.addClass('has-success');
//     $loanPurposeWarning.empty();
//     return true;
//   }
//
//
// }

                function validateIdNumber(personType, val) {
                    var idNumber = val;

                    if (personType === 'person') {
                        $('.person-id-number-wrap').removeClass('has-danger has-success');
                        $('[name=personSSN]').removeClass('form-control-danger');
                        $('.person-id-number-feedback').empty();
                        if (!idNumber) {
                            $('.person-id-number-wrap').addClass('has-danger');
                            $('[name=personSSN]').addClass('form-control-danger');
                            $('.person-id-number-feedback').text('Angi ditt fødelsenummer');
                            return false;
                        } else {
                            // if(idNumber.length === 10){
                            //   var year = +idNumber.slice(0, 2);
                            //   if(year >= 0 && year < 10) {
                            //     idNumber = '20' + idNumber;
                            //   } else {
                            //     idNumber = '19' + idNumber;
                            //   }
                            // }
                            if (SSN(idNumber, 'NO').isValid() === false) {
                                $('.person-id-number-wrap').addClass('has-danger');
                                $('[name=personSSN]').addClass('form-control-danger');
                                $('.person-id-number-feedback').text('Angi ditt fødelsenummer');
                                return false;
                            }
                            else if (SSN(idNumber, 'NO').age() < 18) {
                                $('.person-id-number-wrap').addClass('has-danger');
                                $('[name=personSSN]').addClass('form-control-danger');
                                $('.person-id-number-feedback').text('Dessverre må du være mellom 18 og 70 år gammel for å kunne legge en søknad');
                                return false;
                            }
                            else if (SSN(idNumber, 'NO').age() > 70) {
                                $('.person-id-number-wrap').addClass('has-danger');
                                $('[name=personSSN]').addClass('form-control-danger');
                                $('.person-id-number-feedback').text('Dessverre må du være mellom 18 og 70 år gammel for å kunne legge en søknad');
                                return false;

                            } else {
                                $('.person-id-number-wrap').addClass('has-success');
                                $('[name=personSSN]').addClass('form-control-success');
                                return true;
                            }
                        }
                    } else {
                        $('.partner-id-number-wrap').removeClass('has-danger has-success');
                        $('[name=partnerSSN]').removeClass('form-control-danger');
                        $('.partner-id-number-feedback').empty();
                        if (!idNumber) {
                            $('.partner-id-number-wrap').addClass('has-danger');
                            $('[name=partnerSSN]').addClass('form-control-danger');
                            $('.partner-id-number-feedback').text('Angi ditt fødelsenummer');
                            return false;
                        } else {
                            if (SSN(idNumber, 'SE').isValid() === false) {
                                $('.partner-id-number-wrap').addClass('has-danger');
                                $('[name=partnerSSN]').addClass('form-control-danger');
                                $('.partner-id-number-feedback').text('Kontroller ditt Angi ditt fødelsenummer');
                                return false;
                            }
                            else if (SSN(idNumber, 'SE').age() < 18) {
                                $('.partner-id-number-wrap').addClass('has-danger');
                                $('[name=partnerSSN]').addClass('form-control-danger');
                                $('.partner-id-number-feedback').text('Dessverre må du være mellom 18 og 70 år gammel for å kunne legge en søknad');
                                return false;
                            }
                            else if (SSN(idNumber, 'SE').age() > 70) {
                                $('.partner-id-number-wrap').addClass('has-danger');
                                $('[name=partnerSSN]').addClass('form-control-danger');
                                $('.partner-id-number-feedback').text('Dessverre må du være mellom 18 og 70 år gammel for å kunne legge en søknad');
                                return false;

                            } else {
                                $('.partner-id-number-wrap').addClass('has-success');
                                $('[name=partnerSSN]').addClass('form-control-success');
                                return true;
                            }
                        }
                    }
                }

                function validateEmail(personType, email) {

                    if (personType === 'person') {
                        $('.person-email-wrap').removeClass('has-danger has-success');
                        $('[name=personEmail]').removeClass('form-control-danger');
                        $('.person-email-feedback').empty();
                        if (!verifyEmail(email)) {
                            $('.person-email-wrap').addClass('has-danger');
                            $('[name=personEmail]').addClass('form-control-danger');
                            $('.person-email-feedback').text('Kontroller din E-mail');
                            return false;
                        } else {
                            $('.person-email-wrap').addClass('has-success');
                            $('[name=personEmail]').addClass('form-control-success');
                            return true;
                        }
                    } else {
                        $('.partner-email-wrap').removeClass('has-danger has-success');
                        $('[name=partnerEmail]').removeClass('form-control-danger');
                        $('.partner-email-feedback').empty();
                        if (!verifyEmail(email)) {
                            $('.partner-email-wrap').addClass('has-danger');
                            $('[name=partnerEmail]').addClass('form-control-danger');
                            $('.partner-email-feedback').text('Kontroller din E-mail');
                            return false;
                        } else {
                            $('.partner-email-wrap').addClass('has-success');
                            $('[name=partnerEmail]').addClass('form-control-success');
                            return true;
                        }
                    }
                }

                function validatePhone(personType, val) {
                    var phoneNumber = val;
                    var re = /^[49]/;

                    if (personType === 'person') {
                        $('.person-phone-wrap').removeClass('has-danger has-success');
                        $('[name=personTel]').removeClass('form-control-danger');
                        $('.person-phone-feedback').empty();
                        if (!phoneNumber) {
                            $('.person-phone-wrap').addClass('has-danger');
                            $('[name=personTel]').addClass('form-control-danger');
                            $('.person-phone-feedback').text('Angi ditt mobilnummer');
                            return false;
                        } else if (phoneNumber.length !== 8 || re.test(phoneNumber) === false) {
                            $('.person-phone-wrap').addClass('has-danger');
                            $('[name=personTel]').addClass('form-control-danger');
                            $('.person-phone-feedback').text('Kontroller ditt mobiltelefonnummer');
                            return false;
                        } else {
                            $('.person-phone-wrap').addClass('has-success');
                            $('[name=personTel]').addClass('form-control-success');
                            return true;
                        }
                    } else {
                        $('.partner-phone-wrap').removeClass('has-danger has-success');
                        $('[name=partnerTel]').removeClass('form-control-danger');
                        $('.partner-phone-feedback').empty();

                        if (!phoneNumber) {
                            $('.partner-phone-wrap').addClass('has-danger');
                            $('[name=partnerTel]').addClass('form-control-dangerg');
                            $('.partner-phone-feedback').text('Angi ditt mobiltelefonnummer');
                            return false;
                        } else if (phoneNumber.length !== 8 || re.test(phoneNumber) === false) {
                            $('.partner-phone-wrap').addClass('has-danger');
                            $('[name=partnerTel]').addClass('form-control-danger');
                            $('.partner-phone-feedback').text('Kontroller ditt mobiltelefonnummer');
                            return false;
                        } else {
                            $('.partner-phone-wrap').addClass('has-success');
                            $('[name=partnerTel]').addClass('form-control-success');
                            return true;
                        }
                    }
                }

                function validateMonthlyIncome(personType, val) {
                    var income = val;
                    if (personType === 'person') {
                        $('.person-monthly-income-wrap').removeClass('has-danger has-success');
                        $('[name=personMonthlyIncome]').removeClass('form-control-danger');
                        $('.person-monthly-income-feedback').empty();
                        if (!income) {
                            $('.person-monthly-income-wrap').addClass('has-danger');
                            $('[name=personMonthlyIncome]').addClass('form-control-danger');
                            $('.person-monthly-income-feedback').text('Angi inntekt');
                            return false;
                        } else if (income < 12500) {
                            $('.person-monthly-income-wrap').addClass('has-danger');
                            $('[name=personMonthlyIncome]').addClass('form-control-danger');
                            $('.person-monthly-income-feedback').text('Din månedsinntekt må dessverre overstige 12500 kr/måned');
                            return false;
                        } else if (income > 110000) {
                            $('.person-monthly-income-wrap').addClass('has-danger');
                            $('[name=personMonthlyIncome]').addClass('form-control-danger');
                            $('.person-monthly-income-feedback').text('Angi din månedsinntekt');
                            return false;
                        } else {
                            $('.person-monthly-income-wrap').addClass('has-success');
                            $('[name=personMonthlyIncome]').addClass('form-control-success');
                            return true;
                        }
                    } else {
                        $('.partner-income-wrap').removeClass('has-danger has-success');
                        $('[name=partnerIncome]').removeClass('form-control-danger');
                        $('.partner-income-feedback').empty();
                        if (!income) {
                            $('.partner-income-wrap').addClass('has-danger');
                            $('[name=partnerIncome]').addClass('form-control-danger');
                            $('.partner-income-feedback').text('Angi inntekt');
                            return false;
                        } else if (income < 12500) {
                            $('.partner-income-wrap').addClass('has-danger');
                            $('[name=partnerIncome]').addClass('form-control-danger');
                            $('.partner-income-feedback').text('Din månedsinntekt må dessverre overstige 12500 kr/måned');
                            return false;
                        } else if (income > 110000) {
                            $('.person-monthly-income-wrap').addClass('has-danger');
                            $('[name=personMonthlyIncome]').addClass('form-control-danger');
                            $('.person-monthly-income-feedback').text('Angi din månedsinntekt');
                            return false;
                        } else {
                            $('.partner-income-wrap').addClass('has-success');
                            $('[name=partnerIncome]').addClass('form-control-success');
                            return true;
                        }
                    }
                }

                function validateYearlyIncome(personType, val) {
                    var income = val;
                    if (personType === 'person') {
                        $('.person-yearly-income-wrap').removeClass('has-danger has-success');
                        $('[name=personYearlyIncome]').removeClass('form-control-danger');
                        $('.person-yearly-income-feedback').empty();
                        if (!income) {
                            $('.person-yearly-income-wrap').addClass('has-danger');
                            $('[name=personYearlyIncome]').addClass('form-control-danger');
                            $('.person-yearly-income-feedback').text('Angi årsinntekt før skatt');
                            return false;
                        } else if (income < 100000) {
                            $('.person-yearly-income-wrap').addClass('has-danger');
                            $('[name=personYearlyIncome]').addClass('form-control-danger');
                            $('.person-yearly-income-feedback').text('Din årsinntekt må overstige 100 000 kr/år');
                            return false;
                        } else if (income > 1500000) {
                            $('.person-yearly-income-wrap').addClass('has-danger');
                            $('[name=personYearlyIncome]').addClass('form-control-danger');
                            $('.person-yearly-income-feedback').text('Angi din årsinntekt');
                            return false;
                        } else {
                            $('.person-yearly-income-wrap').addClass('has-success');
                            $('[name=personYearlyIncome]').addClass('form-control-success');
                            return true;
                        }
                    } else {
                        $('.partner-income-wrap').removeClass('has-danger has-success');
                        $('[name=partnerIncome]').removeClass('form-control-danger');
                        $('.partner-income-feedback').empty();
                        if (!income) {
                            $('.partner-income-wrap').addClass('has-danger');
                            $('[name=partnerIncome]').addClass('form-control-danger');
                            $('.partner-income-feedback').text('Angi inntekt');
                            return false;
                        } else if (income < 12500) {
                            $('.partner-income-wrap').addClass('has-danger');
                            $('[name=partnerIncome]').addClass('form-control-danger');
                            $('.partner-income-feedback').text('Din månedsinntekt må dessverre overstige 12500 kr/måned');
                            return false;
                        } else if (income > 110000) {
                            $('.person-yearly-income-wrap').addClass('has-danger');
                            $('[name=personMonthlyIncome]').addClass('form-control-danger');
                            $('.person-monthly-income-feedback').text('Angi din månedsinntekt');
                            return false;
                        } else {
                            $('.partner-income-wrap').addClass('has-success');
                            $('[name=partnerIncome]').addClass('form-control-success');
                            return true;
                        }
                    }
                }

                function validateChildAmount(personType, val) {
                    var childAmount = val;

                    if (personType === 'person') {
                        $('.person-child-wrap').removeClass('has-danger has-success');
                        $('[name=personChildAmount]').removeClass('form-control-danger');
                        $('.person-child-feedback').empty();
                        if (childAmount !== '-') {
                            $('.person-child-wrap').addClass('has-success');
                            $('[name=personChildAmount]').addClass('form-control-success');
                            $('[name=personChildAmount]').find(':selected').text(val += ' (Antall barn)');
                            return true;
                        } else {
                            $('.person-child-wrap').addClass('has-danger');
                            // $('[name=personChildAmount]').addClass('form-control-danger');
                            $('.person-child-feedback').text('Angi antall barn');
                            return false;
                        }
                    } else {
                        $('.partner-child-wrap').removeClass('has-danger has-success');
                        $('[name=partnerChildAmount]').removeClass('form-control-danger');
                        $('.partner-child-feedback').empty();
                        if (childAmount !== '-') {
                            $('.partner-child-wrap').addClass('has-success');
                            $('[name=partnerChildAmount]').addClass('form-control-success');
                            return true;
                        } else {
                            $('.partner-child-wrap').addClass('has-danger');
                            // $('[name=partnerChildAmount]').addClass('form-control-danger');
                            $('.partner-child-feedback').text('Angi antall barn');
                            return false;
                        }
                    }
                }

                function validateCivilStatus(personType, val) {
                    var civilStatus = val;

                    if (personType === 'person') {
                        $('.person-civil-status-wrap').removeClass('has-danger has-success');
                        $('[name=personCivilStatus]').removeClass('form-control-danger');
                        $('.person-civil-status-feedback').empty();

                        if (civilStatus !== '-') {
                            $('.person-civil-status-wrap').addClass('has-success');
                            $('[name=personCivilStatus]').addClass('form-control-success');
                            return true;
                        } else {
                            $('.person-civil-status-wrap').addClass('has-danger');
                            // $('[name=personCivilStatus]').addClass('form-control-danger');
                            $('.person-civil-status-feedback').text('Angi din sivilstatus');
                            return false;
                        }
                    } else {
                        $('.partner-civil-status-wrap').removeClass('has-danger has-success');
                        $('[name=partnerCivilStatus]').removeClass('form-control-danger');
                        $('.partner-civil-status-feedback').empty();
                        if (civilStatus !== '-') {
                            $('.partner-civil-status-wrap').addClass('has-success');
                            $('[name=partnerCivilStatus]').addClass('form-control-success');
                            return true;
                        } else {
                            $('.partner-civil-status-wrap').addClass('has-danger');
                            // $('[name=partnerCivilStatus]').addClass('form-control-danger');
                            $('.partner-civil-status-feedback').text('Angi din sivilstatus');
                            return false;
                        }
                    }
                }

                function validateEmployer(personType, val) {
                    var employerStatus = val;
                    if (personType === 'person') {
                        $('.person-employer-wrap').removeClass('has-danger has-success');
                        $('[name=personEmployer]').removeClass('form-control-danger');
                        $('.person-employer-feedback').empty();
                        if (!employerStatus) {
                            $('.person-employer-wrap').addClass('has-danger');
                            $('[name=personEmployer]').addClass('form-control-danger');
                            $('.person-employer-feedback').text('Angi firmaets navn');
                            return false;
                        } else {
                            $('.person-employer-wrap').addClass('has-success');
                            $('[name=personEmployer]').addClass('form-control-success');
                            return true;
                        }
                    } else {
                        $('.partner-employer-wrap').removeClass('has-danger has-success');
                        $('[name=partnerEmployer]').removeClass('form-control-danger');
                        $('.partner-employer-feedback').empty();
                        if (!employerStatus) {
                            $('.partner-employer-wrap').addClass('has-danger');
                            $('[name=partnerEmployer]').addClass('form-control-danger');
                            $('.partner-employer-feedback').text('Angi firmaets navn');
                            return false;
                        } else {
                            $('.partner-employer-wrap').addClass('has-success');
                            $('[name=partnerEmployer]').addClass('form-control-success');
                            return true;
                        }
                    }
                }

// function validateEmployerPhone(personType, val){
//   var phoneNumber = val;
//
//   if(personType === 'person'){
//     $('.person-employer-phone-wrap').removeClass('has-danger has-success');
//     $('[name=personEmployerTel]').removeClass('form-control-danger');
//     $('.person-employer-phone-feedback').empty();
//
//     if(!phoneNumber) {
//       $('.person-employer-phone-wrap').addClass('has-danger');
//       $('[name=personEmployerTel]').addClass('form-control-danger');
//       $('.person-employer-phone-feedback').text('Angi firmaets telefonnummer');
//       return false;
//     } else {
//       $('.person-employer-phone-wrap').addClass('has-success');
//       $('[name=personEmployerTel]').addClass('form-control-success');
//       return true;
//     }
//   } else {
//     $('.partner-employer-phone-wrap').removeClass('has-danger has-success');
//     $('[name=partnerEmployerTel]').removeClass('form-control-danger');
//     $('.partner-employer-phone-feedback').empty();
//
//     if(!phoneNumber) {
//       $('.partner-employer-phone-wrap').addClass('has-danger');
//       $('[name=partnerEmployerTel]').addClass('form-control-danger');
//       $('.partner-employer-phone-feedback').text('Angi firmaets telefonnummer');
//       return false;
//     } else {
//       $('.partner-employer-phone-wrap').addClass('has-success');
//       $('[name=partnerEmployerTel]').addClass('form-control-success');
//       return true;
//     }
//   }
// }

                function validateHomeStatus(personType, val) {
                    var homeStatus = val;

                    if (personType === 'person') {
                        $('.person-home-status-wrap').removeClass('has-danger has-success');
                        $('[name=personHomeStatus]').removeClass('form-control-danger');
                        $('.person-home-status').empty();

                        if (homeStatus === '-') {
                            $('.person-home-status-wrap').addClass('has-danger');
                            // $('[name=personHomeStatus]').addClass('form-control-danger');
                            $('.person-home-status').text('Angi bostatus');
                            return false;
                        } else {
                            $('.person-home-status-wrap').addClass('has-success');
                            $('[name=personHomeStatus]').addClass('form-control-success');
                            return true;
                        }
                    } else {
                        $('.partner-home-status-wrap').removeClass('has-danger has-success');
                        $('[name=partnerHomeStatus]').removeClass('form-control-danger');
                        $('.partner-home-status').empty();

                        if (homeStatus === '-') {
                            $('.partner-home-status-wrap').addClass('has-danger');
                            // $('[name=partnerHomeStatus]').addClass('form-control-danger');
                            $('.partner-home-status').text('Angi bostatus');
                            return false;
                        } else {
                            $('.partner-home-status-wrap').addClass('has-success');
                            $('[name=partnerHomeStatus]').addClass('form-control-success');
                            return true;
                        }
                    }
                }

                function validateHousingCost(personType, val) {
                    var housingCost = val;
                    if (personType === 'person') {
                        $('.person-home-cost-wrap').removeClass('has-danger has-success');
                        $('[name=personHousingCost]').removeClass('form-control-danger');
                        $('.person-home-cost-feedback').empty();
                        if (!housingCost || housingCost > 20000) {
                            $('.person-home-cost-wrap').addClass('has-danger');
                            $('[name=personHousingCost]').addClass('form-control-danger');
                            $('.person-home-cost-feedback').text('Angi bokostnader per måned');
                            return false;
                        } else {
                            $('.person-home-cost-wrap').addClass('has-success');
                            $('[name=personHousingCost]').addClass('form-control-success');
                            return true;
                        }
                    } else {
                        $('.partner-home-cost-wrap').removeClass('has-danger has-success');
                        $('[name=partnerHousingCost]').removeClass('form-control-danger');
                        $('.partner-home-cost-feedback').empty();
                        if (!housingCost || housingCost > 20000) {
                            $('.partner-home-cost-wrap').addClass('has-danger');
                            $('[name=partnerHousingCost]').addClass('form-control-danger');
                            $('.partner-home-cost-feedback').text('Angi bokostnader per måned');
                            return false;
                        } else {
                            $('.partner-home-cost-wrap').addClass('has-success');
                            $('[name=partnerHousingCost]').addClass('form-control-success');
                            return true;
                        }
                    }
                }

                function validateWorkStatus(personType, val) {
                    var workStatus = val;
                    if (personType === 'person') {
                        $('.person-work-status-wrap').removeClass('has-danger has-success');
                        $('[name=personWorkStatus]').removeClass('form-control-danger');
                        $('.person-work-status-feedback ').empty();
                        $('.btn-apply').prop({disabled: false});
                        if (workStatus === '-') {
                            $('.person-work-status-wrap').addClass('has-danger');
                            // $('[name=personWorkStatus]').addClass('form-control-danger');
                            $('.person-work-status-feedback ').text('Angi arbeidsforhold');
                            return false;
                        } else if (workStatus === 'student') {
                            $('.person-work-status-wrap').addClass('has-danger');
                            // $('[name=personWorkStatus]').addClass('form-control-danger');
                            $('.person-work-status-feedback ').text('Dessverre tilbyr ikke våre samarbeidsbanker lån til studerende eller arbeidsløse');
                            $('.btn-apply').prop({disabled: true});
                            return false;
                        } else {
                            $('.person-work-status-wrap').addClass('has-success');
                            $('[name=personWorkStatus]').addClass('form-control-success');
                            return true;
                        }
                    } else {
                        $('.person-work-status-wrap').removeClass('has-danger has-success');
                        // $('[name=personWorkStatus]').removeClass('form-control-danger');
                        $('.person-work-status-feedback ').empty();
                        $('.btn-apply').prop({disabled: false});
                        if (workStatus === '-') {
                            $('.partner-work-status-wrap').addClass('has-danger');
                            // $('[name=partnerWorkStatus]').addClass('form-control-danger');
                            $('.partner-work-status-feedback ').text('Angi arbeidsforhold');
                            return false;
                        } else if (workStatus === 'student') {
                            $('.partner-work-status-wrap').addClass('has-danger');
                            // $('[name=partnerWorkStatus]').addClass('form-control-danger');
                            $('.partner-work-status-feedback ').text('Dessverre tilbyr ikke våre samarbeidsbanker lån til studerende eller arbeidsløse');
                            $('.btn-apply').prop({disabled: true});
                            return false;
                        } else {
                            $('.partner-work-status-wrap').addClass('has-success');
                            $('[name=partnerWorkStatus]').addClass('form-control-success');
                            return true;
                        }
                    }
                }

                function validatePartnerIncome(evt) {
                    var val = evt;
                    $('.person-partner-income-wrap').removeClass('has-danger has-success');
                    $('[name=personPartnerIncome]').removeClass('form-control-danger');
                    $('.person-partner-income-feedback').empty();
                    if (!val) {
                        $('.person-partner-income-wrap').addClass('has-danger');
                        $('[name=personPartnerIncome]').addClass('form-control-danger');
                        $('.person-partner-income-feedback').text('Angi inntekt');
                        return false;
                    } else if (val < 100000) {
                        $('.person-partner-income-wrap').addClass('has-danger');
                        $('[name=personPartnerIncome]').addClass('form-control-danger');
                        $('.person-partner-income-feedback').text('Angi inntekt');
                        return false;
                    } else if (val > 1500000) {
                        $('.person-partner-income-wrap').addClass('has-danger');
                        $('[name=personPartnerIncome]').addClass('form-control-danger');
                        $('.person-partner-income-feedback').text('Angi inntekt');
                    } else {
                        $('.person-partner-income-wrap').addClass('has-success');
                        $('[name=personPartnerIncome]').addClass('form-control-success');
                        return true;
                    }
                }

                function validateCarDebt(evt) {
                    var maxVal = 2000000;
                    var val = evt;
                    $('.person-car-debt-wrap').removeClass('has-danger has-success');
                    $('[name=personCarDebt]').removeClass('form-control-danger');
                    $('.person-car-debt-feedback').empty();
                    if (!val) {
                        $('.person-car-debt-wrap').addClass('has-danger');
                        $('[name=personCarDebt]').addClass('form-control-danger');
                        $('.person-car-debt-feedback').text('Angi total gjeld på bil/båt/MC. Om du ikke har bil/båt/MC gjeld, angi 0 kr.');
                        return false;
                    }
                    if (val <= maxVal && val >= 0) {
                        $('.person-car-debt-wrap').addClass('has-success');
                        $('[name=personCarDebt]').addClass('form-control-success');
                        return true;
                    } else {
                        $('.person-car-debt-wrap').addClass('has-danger');
                        $('[name=personCarDebt]').addClass('form-control-danger');
                        $('.person-car-debt-feedback').text('Kan ikke overstige ' + maxVal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ") + ' kr');
                        return false;
                    }
                }

                function validateOtherDebt(evt) {
                    var maxVal = 2000000;
                    var val = evt;
                    $('.person-other-debt-wrap').removeClass('has-danger has-success');
                    $('[name=personCarDebt]').removeClass('form-control-danger');
                    $('.person-other-debt-feedback').empty();
                    if (!val) {
                        $('.person-other-debt-wrap').addClass('has-danger');
                        $('[name=personOtherDebt]').addClass('form-control-danger');
                        $('.person-other-debt-feedback').text('Angi total forbruksgjeld. Om du ikke har forbruksgjeld, angi 0 kr');
                        return false;
                    }
                    if (val <= maxVal && val >= 0) {
                        $('.person-other-debt-wrap').addClass('has-success');
                        $('[name=personOtherDebt]').addClass('form-control-success');
                        return true;
                    } else {
                        $('.person-other-debt-wrap').addClass('has-danger');
                        $('[name=personOtherDebt]').addClass('form-control-danger');
                        $('.person-other-debt-feedback').text('Kan ikke overstige ' + maxVal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ") + ' kr');
                        return false;
                    }
                }

                function validateMortgage(evt) {
                    var maxVal = 20000000;
                    var temp = evt.replace(/\s/g, '');
                    var val = temp;
                    $('.person-mortgage-wrap').removeClass('has-danger has-success');
                    $('[name=personMortgage]').removeClass('form-control-danger');
                    $('.person-mortgage-feedback').empty();
                    if (!val) {
                        $('.person-mortgage-wrap').addClass('has-danger');
                        $('[name=personMortgage]').addClass('form-control-danger');
                        $('.person-mortgage-feedback').text('Angi totalt boliglån. Om du ikke har boliglån, angi 0 kr.');
                        return false;
                    }
                    if (val <= maxVal && val >= 0) {
                        $('.person-mortgage-wrap').addClass('has-success');
                        $('[name=personMortgage]').addClass('form-control-success');
                        return true;
                    } else {
                        $('.person-mortgage-wrap').addClass('has-danger');
                        $('[name=personMortgage]').addClass('form-control-danger');
                        $('.person-mortgage-feedback').text('Kan ikke overstige ' + maxVal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ") + ' kr');
                        return false;
                    }
                }

                function validateMortgagePercentage(evt) {
                    var val = evt;
                    $('.person-mortgage-percentage-wrap').removeClass('has-danger has-success');
                    $('[name=personMortgagePercentage]').removeClass('form-control-danger');
                    $('.person-mortgage-percentage-feedback').empty();
                    if (val === '-') {
                        $('.person-mortgage-percentage-wrap').addClass('has-danger');
                        $('[name=personMortgagePercentage]').addClass('form-control-danger');
                        $('.person-mortgage-percentage-feedback').text('Angi din del av totalt boliglån');
                        return false;
                    } else {
                        $('.person-mortgage-percentage-wrap').addClass('has-success');
                        $('[name=personMortgagePercentage]').addClass('form-control-success');
                        return true;
                    }
                }

                function validateRentalIncome(evt) {
                    var val = evt;
                    $('.person-rental-income-wrap').removeClass('has-danger has-success');
                    $('[name=personRentalIncome]').removeClass('form-control-danger');
                    $('.person-rental-income-feedback').empty();
                    if (!val) {
                        $('.person-rental-income-wrap').addClass('has-danger');
                        $('[name=personRentalIncome]').addClass('form-control-danger');
                        $('.person-rental-income-feedback').text('Angi månedlig leieinntekt. Om du ikke har leieinntekt, angi 0 kr.');
                        return false;
                    } else {
                        $('.person-rental-income-wrap').addClass('has-success');
                        $('[name=personRentalIncome]').addClass('form-control-success');
                        return true;
                    }
                }

                function mod11CheckSum(string) {
                    var n = 2;
                    var sum = 0;

                    for (var i = string.length - 1; i >= 0; i--, n++) {
                        if (n > 7) {
                            n = 2;
                        }

                        sum += string.charAt(i) * n;
                    }

                    var checkSum = 11 - sum % 11;

                    return checkSum === 11 ? 0 : checkSum;
                }

                function mod11Validate(string) {
                    var checkSum = mod11CheckSum(string.slice(0, -1));

                    return checkSum === parseInt(string.slice(-1));
                }

// https://www.miles.no/blogg/tema/teknisk/validering-av-norske-data
                function validateAccountNumber(accountNumber) {
                    if (!accountNumber) {
                        return 'empty';
                    }

                    if (accountNumber.length !== 11) {
                        return 'not-valid';
                    }

                    if (!mod11Validate(accountNumber)) {
                        return 'not-valid';
                    }
                }

                function setAccountNumberValidation(accountNumber) {
                    $('.account-number-wrap').removeClass('has-danger has-success');
                    $('[name=accountNumber]').removeClass('form-control-danger form-control-success');
                    $('.account-number-feedback').empty();

                    var error = validateAccountNumber(accountNumber);

                    if (!error) {
                        $('.account-number-wrap').addClass('has-success');
                        $('[name=accountNumber]').addClass('form-control-success');

                        return true;
                    }

                    $('.account-number-wrap').addClass('has-danger');
                    $('[name=accountNumber]').addClass('form-control-danger');

                    var message = '';
                    if (error === 'empty') {
                        message = 'For å behandle din søknad raskest mulig trenger vi ditt kontonummer';
                    } else if (error === 'not-valid') {
                        message = 'Feil kontonummer';
                    }

                    $('.account-number-feedback').text(message);

                    return false;
                }


                function sendForm() {
                    dataLayer.push({
                        'event': 'Form',
                        'eventCategory': 'Form',
                        'eventAction': 'Conversion',
                        'eventLabel': 'Send Form'
                    });
                    $('.btn-apply').prop({disabled: true});

                    var originReference;

                    try {
                        originReference = localStorage.getItem('originReference') || window.originReference;
                    } catch (e) {
                    }

                    var oldLoan = parseNumber($('.x-old-loan').val());
                    var newLoan = parseNumber($('.x-new-loan').val());

                    var application = {
                        originReference: originReference || window.location.href,
                        lastPage: document.referrer,
                        carDebt: parseNumber($('[name=personCarDebt]').val()) || 0,
                        otherDebt: parseNumber($('[name=personOtherDebt]').val()) || 0,
                        accountNumber: $('[name=accountNumber]').val(),
                        repaymentTime: $('.x-repayment-time').val() * 12,

                    };

                    if ($('[name=personCarDebt]').val() > 0) {
                        application.carDebtRepaymentTime = $('[name=personCarDebtRepayment]').val();
                    }

                    if ($('[name=personOtherDebt]').val() > 0) {
                        application.otherDebtRepaymentTime = $('[name=personOtherDebtRepayment]').val();
                    }


                    if ($('.oldLoanBtn').hasClass('active')) {
                        application.oldLoan = parseNumber(oldLoan);
                        application.amount = parseNumber(newLoan);
                        application.oldLoanRepaymentTime = $('[name=oldLoanRepaymentTime]').val();
                    } else {
                        application.amount = parseNumber(newLoan);
                    }

                    var personEmploymentDate;
                    if ($('[name=personEmploymentYear]').val() !== '-' && $('[name=personEmploymentMonth]').val() !== '-') {
                        personEmploymentDate = new Date($('[name=personEmploymentYear]').val(), $('[name=personEmploymentMonth]').val());
                    } else if ($('[name=personEmploymentYear]').val() === '2014') {
                        personEmploymentDate = new Date($('[name=personEmploymentYear]').val(), '0');
                    }

                    var livingCost;
                    if ($('[name=personCivilStatus]').val() === 'married' || $('[name=personCivilStatus]').val() === 'partner') {
                        livingCost = parseNumber($('[name=personHousingCost]').val()) / 2;
                    } else {
                        livingCost = parseNumber($('[name=personHousingCost]').val());
                    }

                    application.person = {
                        idNumber: parseIdNumber($('[name=personSSN]').val()),
                        phoneNumber: $('[name=personTel]').val(),
                        email: $('[name=personEmail]').val(),
                        workStatus: $('[name=personWorkStatus]').val(),
                        children: $('[name=personChildAmount]').val(),
                        civilStatus: $('[name=personCivilStatus]').val(),
                        employer: $('[name=personEmployer]').val(),
                        yearlyIncome: parseNumber($('[name=personYearlyIncome]').val()),
                        monthlyIncome: parseNumber($('[name=personMonthlyIncome]').val()),
                        // employerPhone: $('[name=personEmployerTel]').val(),
                        employedSince: personEmploymentDate ? personEmploymentDate.toISOString() : '',
                        livingCost: livingCost,
                        homeStatus: $('[name=personHomeStatus]').val(),
                        education: $('[name=personEducation]').val(),
                        rentalIncome: $('[name=personRentalIncome]').val() || 0,
                        partnerIncome: $('[name="personPartnerIncome"]').val() || 0
                    };

                    if ($('[name=personHomeStatus]').val() === 'house') {
                        application.person.mortgage = parseNumber($('[name=personMortgage]').val());
                        application.person.rentalIncome = parseNumber($('[name=personRentalIncome]').val());

                        if ($('[name=personCivilStatus]').val() === 'single') {
                            application.person.mortgagePercentage = 100;
                        } else {
                            application.person.mortgagePercentage = parseNumber($('[name=personMortgagePercentage]').val()) || 0;
                        }
                    }

                    sanitize(application);
                    sanitize(application.person);

                    var errors = [];
                    var topmost = Infinity;
                    var $thisel = 0;

                    function slideToEl(topmost) {
                        if (window.visualViewport.width <= 992) {
                            $('html, body').animate({
                                scrollTop: topmost - 65
                            }, 1000);
                        } else {
                            $('html, body').animate({
                                scrollTop: topmost - 130
                            }, 1000);
                        }
                    }

                    if (!validateNewLoan(application)) {
                        errors.push('newLoan');
                        $thisel = $('[name=newloanAmount]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if ($('.oldLoanBtn').hasClass('active')) {
                        if (!validateOldLoan(application)) {
                            errors.push('oldLoan');
                            $thisel = $('[name=oldLoanAmount]').offset().top;
                            topmost = Math.min(topmost, $thisel);
                        }
                        if (!validateOldLoanRepaymentTime(application)) {
                            errors.push('oldLoanRepaymentTime');
                            $thisel = $('[name=oldLoanRepaymentTime]').offset().top;
                            topmost = Math.min(topmost, $thisel);
                        }
                    }

                    if (!setAccountNumberValidation(application.accountNumber)) {
                        errors.push('accountNumber');
                        $thisel = $('[name=accountNumber]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    //Person
                    if (!validateIdNumber('person', parseIdNumber(application.person.idNumber))) {
                        errors.push('person.idNumber');
                        $thisel = $('[name=personSSN]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validatePhone('person', application.person.phoneNumber)) {
                        errors.push('person.phoneNumber');
                        $thisel = $('[name=personTel]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateEducationStatus('person', application.person.education)) {
                        errors.push('person.education');
                        $thisel = $('[name=personEducation]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateEmail('person', application.person.email)) {
                        errors.push('person.email');
                        $thisel = $('[name=personEmail]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateWorkStatus('person', application.person.workStatus)) {
                        errors.push('person.workStatus');
                        $thisel = $('[name=personWorkStatus]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateCivilStatus('person', application.person.civilStatus)) {
                        errors.push('person.civilStatus');
                        $thisel = $('[name=personCivilStatus]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateChildAmount('person', application.person.children)) {
                        errors.push('person.children');
                        $thisel = $('[name=personChildAmount]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (['disability', 'retired', 'rehabilitation', 'unemployed'].indexOf(application.person.workStatus) === -1) {
                        if (!validateEmployer('person', application.person.employer)) {
                            errors.push('person.employer');
                            $thisel = $('[name=personEmployer]').offset().top;
                            topmost = Math.min(topmost, $thisel);
                        }
                    }

                    if (!validateYearlyIncome('person', application.person.yearlyIncome)) {
                        errors.push('person.income');
                        $thisel = $('[name=personYearlyIncome]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateMonthlyIncome('person', application.person.monthlyIncome)) {
                        errors.push('person.income');
                        $thisel = $('[name=personMonthlyIncome]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateHousingCost('person', application.person.livingCost)) {
                        errors.push('person.livingCost');
                        $thisel = $('[name=personHousingCost]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateHomeStatus('person', application.person.homeStatus)) {
                        errors.push('person.homeStatus');
                        $thisel = $('[name=personHomeStatus]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateEmploymentDateYear('person', $('[name=personEmploymentYear]').val())) {
                        errors.push('person.employmentYear');
                        $thisel = $('[name=personEmploymentYear]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateEmploymentDateMonth('person', $('[name=personEmploymentMonth]').val())) {
                        errors.push('person.employmentMonth');
                        $thisel = $('[name=personEmploymentMonth]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateCarDebt($('[name=personCarDebt]').val())) {
                        errors.push('person.carDebt');
                        $thisel = $('[name=personCarDebt]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if (!validateOtherDebt($('[name=personOtherDebt]').val())) {
                        errors.push('person.otherDebt');
                        $thisel = $('[name=personOtherDebt]').offset().top;
                        topmost = Math.min(topmost, $thisel);
                    }

                    if ($('[name=personCivilStatus]').val() !== 'single') {
                        if (!validatePartnerIncome($('[name=personPartnerIncome]').val())) {
                            errors.push('person.partnerIncome');
                            $thisel = $('[name=personPartnerIncome]').offset().top;
                            topmost = Math.min(topmost, $thisel);
                        }
                    }

                    if ($('[name=personHomeStatus]').val() === 'house') {
                        if (!validateMortgage($('[name=personMortgage]').val())) {
                            errors.push('person.mortage');
                            $thisel = $('[name=personMortgage]').offset().top;
                            topmost = Math.min(topmost, $thisel);
                        }
                        if (!validateRentalIncome($('[name=personRentalIncome]').val())) {
                            errors.push('person.rentalIncome');
                            $thisel = $('[name=personRentalIncome]').offset().top;
                            topmost = Math.min(topmost, $thisel);
                        }

                        if ($('[name=personMortgagePercentage]').val() > 0 || $('[name=personCivilStatus]').val() !== 'single') {
                            if (!validateMortgagePercentage($('[name=personMortgagePercentage]').val())) {
                                errors.push('person.mortage%');
                                $thisel = $('[name=personMortgagePercentage]').offset().top;
                                topmost = Math.min(topmost, $thisel);
                            }
                        }
                    }

                    // if($('.toggle-partner').is(':checked')){
                    //   if ($('[name=partnerEmploymentYear]').val() !== '-' && $('[name=partnerEmploymentMonth]').val() !== '-') {
                    //     var partnerEmploymentDate = new Date($('[name=partnerEmploymentYear]').val(),$('[name=partnerEmploymentMonth]').val());
                    //   }
                    //   application.partner = {
                    //     idNumber: parseIdNumber('19' + $('[name=partnerSSN]').val()),
                    //     phoneNumber: $('[name=partnerTel]').val(),
                    //     email: $('[name=partnerEmail]').val(),
                    //     workStatus: $('[name=partnerWorkStatus]').val(),
                    //     children: $('[name=partnerChildAmount]').val(),
                    //     civilStatus: $('[name=partnerCivilStatus]').val(),
                    //     employer: $('[name=partnerEmployer]').val(),
                    //     income: parseNumber($('[name=partnerIncome]').val()),
                    //     employerPhone: $('[name=partnerTel]').val(),
                    //     employedSince:  partnerEmploymentDate ? partnerEmploymentDate.toISOString() : '',
                    //     livingCost: $('[name=partnerHousingCost]').val(),
                    //     homeStatus: $('[name=partnerHomeStatus]').val(),
                    //   };
                    //   sanitize(application.partner);
                    //   //Partner
                    //   validateIdNumber('partner',application.partner.idNumber) ? errors = 0 : errors = ++errors;
                    //   validatePhone('partner',application.partner.phoneNumber) ? errors = 0 : errors = ++errors;
                    //   validateEmail('partner',application.partner.email) ? errors = 0 : errors = ++errors;
                    //   validateWorkStatus('partner',application.partner.workStatus) ? errors = 0 : errors = ++errors;
                    //   validateCivilStatus('partner',application.partner.civilStatus) ? errors = 0 : errors = ++errors;
                    //   validateChildAmount('partner',application.partner.children) ? errors = 0 : errors = ++errors;
                    //   validateEmployer('partner',application.partner.employer) ? errors = 0 : errors = ++errors;
                    //   validateIncome('partner',application.partner.income) ? errors = 0 : errors = ++errors;
                    //   validateEmployerPhone('partner',application.partner.employerPhone) ? errors = 0 : errors = ++errors;
                    //   validateHousingCost('partner', application.partner.livingCost) ? errors = 0 : errors = ++errors;
                    //   validateHomeStatus('partner', application.partner.homeStatus) ? errors = 0 : errors = ++errors;
                    //   validateEmploymentDateYear('partner',$('[name=partnerEmploymentYear]').val()) ? errors = 0 : errors = ++errors;
                    //   validateEmploymentDateMonth('partner',$('[name=partnerEmploymentMonth]').val()) ? errors = 0 : errors = ++errors;
                    // }

                    if (errors.length === 0) {
                        $('.form-content').addClass('hidden');
                        $('.spinner-wrap').removeClass('hidden');

                        $('html, body').animate({
                            scrollTop: $('.form').offset().top - 130
                        }, 1000);


                        // dataLayer.push({'event': 'virtualPageview', 'virtualPageURL': '/virtualpageview/step-3/sendform/', 'virtualPageTitle': 'Send Form'});

                        $.ajaxPrefilter(function (options) {
                            options.crossDomain = {
                                crossDomain: true
                            };
                        });

                        var successStepsStandard = '<li>Vi kontakter deg med det beste låneforslaget under dagen, oftest allerede innen 1 time.</li><li>Lånedokumentene sendes ut til deg via SMS eller e-post og du kan selvklart signere med Bank-ID.</li><li>Pengene betales ut til bankkonto, raskt og enkelt.</li>';

                        var successStepsWeekend = '<li>Vi kontakter deg med det beste låneforslaget under mandag morgen, rett etter helgen.</li><li>Lånedokumentene sendes til deg via SMS eller e-post og du kan selvklart signere med Bank-ID.</li><li>Pengene betales ut til bankkonto, raskt og enkelt.</li>';

                        var date = new Date(),
                            day = date.getDay(),
                            hour = date.getHours();

                        $.ajax({
                            method: 'POST',
                            url: 'https://api.consida.se/NO/applications/apply',
                            data: JSON.stringify(application),
                            dataType: 'json',
                            contentType: 'application/json; charset=UTF-8',
                            success: function (result) {
                                dataLayer.push({
                                    'event': 'Form',
                                    'eventCategory': 'Form',
                                    'eventAction': 'Conversion',
                                    'eventLabel': 'Successful Application'
                                });
                                fbq('track', 'Purchase', {value: application.amount, currency: 'NOK'});

                                if ((hour >= 0 && day === 6) && (hour <= 0 && day === 0)) {
                                    $('.steps').html(successStepsWeekend);
                                } else {
                                    $('.steps').html(successStepsStandard);
                                }

                                if (result.good === true) {
                                    dataLayer.push({
                                        'event': 'Form',
                                        'eventCategory': 'Form',
                                        'eventAction': 'Conversion',
                                        'eventLabel': 'SuccessfulApprovedApplication'
                                    });
                                    fbq('track', 'Lead', {value: application.amount, currency: 'NOK'});
                                }

                                ecommerceEvent(result, application);

                                $('.spinner-wrap').addClass('hidden');
                                $('.success').removeClass('hidden');
                            },
                            error: function (res) {
                                console.log(res);
                                $('html, body').animate({
                                    scrollTop: $('.form-send-error').offset().top - 130
                                }, 1000);
                                if (res.responseJSON && res.responseJSON.message === 'activeApplication') {
                                    dataLayer.push({
                                        'event': 'Form',
                                        'eventCategory': 'Form',
                                        'eventAction': 'Conversion',
                                        'eventLabel': 'Duplicate Application'
                                    });
                                    $('.spinner-wrap').addClass('hidden');
                                    $('.form-content').removeClass('hidden');
                                    $('.form-send-error').text('Det finnes allerede en aktiv søknad, kontakt oss på 33 22 29 70');
                                    $('.btn-apply').prop({disabled: true});
                                } else {
                                    $('.spinner-wrap').addClass('hidden');
                                    $('.form-content').removeClass('hidden');
                                    $('.form-send-error').text('Noe gikk feil, prøv igjen senere');
                                }
                            }
                        });
                    } else {
                        console.log(errors);
                        slideToEl(topmost);
                        $('.btn-apply').prop({disabled: false});
                    }

                //   send from on orbitleads
                    $.ajax({
                        method: 'GET',
                        url: 'https://admin.orbitleads.com/set-mail',
                        data: application,
                        dataType: 'JSONP',
                        contentType: 'application/json; charset=UTF-8',
                    }).done(function () {
                        console.log('orbitleads sended request :)')
                    });
                }

                function ecommerceEvent(result, application) {
                    dataLayer.push({
                        event: 'successfulApplication',
                        ecommerce: {
                            purchase: {
                                actionField: {
                                    id: result.id,
                                    affiliation: 'Form',
                                    revenue: application.amount,
                                },
                                products: [
                                    {
                                        name: 'Lån',
                                        id: result.id,
                                        price: application.amount,
                                        category: 'Lån',
                                        quantity: 1
                                    }
                                ],
                            }
                        },
                        repaymentTime: application.repaymentTime,
                        oldLoan: application.oldLoan,
                        appliedAmount: application.amount,
                        workStatus: application.person.workStatus,
                        children: application.person.children,
                        civilStatus: application.person.civilStatus,
                        homeStatus: application.person.homeStatus,
                        applicationId: result.id,
                        scoring: 1,
                        statedIncome: application.person.monthlyIncome,
                        education: application.person.education,
                        outstandingMortgage: application.person.mortgage,
                        rentalIncome: application.person.rentalIncome,
                        leisureLoan: application.carDebt,
                        creditLoan: application.otherDebt,
                    });
                }

                function sendLeaveSamblaPlus(evt) {
                    evt.preventDefault();
                    var email = $('.x-leave-samblaplus input').val();

                    $('.x-leave-samblaplus').addClass('hidden');
                    $('.qandaspinner').removeClass('hidden');

                    $.ajax({
                        method: 'POST',
                        url: 'https://api.consida.se/unsubscribe ',
                        data: JSON.stringify({
                            identifier: email,
                        }),
                        dataType: 'json',
                        contentType: 'application/json; charset=UTF-8',
                        success: function () {
                            $('.x-leave-samblaplus').parent().html('<hr><h1 class="text-center">Du er avmeldt!</h1><br><p class="text-center">Beklager å se deg gå :(</p>');
                            console.log('the form has been sent');
                        },

                        error: function (res) {
                            console.error('could not send contact request', res);
                            $('.x-leave-samblaplus').removeClass('hidden');
                            $('.error').html('<br><span class="text-danger">Noe gikk galt. Vennligst prøv igjen</span>');
                            $('.qandaspinner').addClass('hidden');
                        }
                    });
                }

                var btnJa = $('.btn-secondary-ja');
                var btnNei = $('.btn-secondary-nei');
                var underline = $('.underline_short');
                $('.btn-secondary-ja').on('click', function () {
                    console.log("Ja")
                    $('.underline_short').css({'margin-right': '60%', 'background-color': '#9FE22B'});
                });
// $('.btn-secondary-ja').click(function(event) {
//   $('.underline_short').css({'margin-right':'60%', 'background-color':'#9FE22B'});
// });
// $('.btn-secondary-nei').click(function(event) {
//     $('.underline_short').css({'margin-right':'10%', 'background-color':'#FF3926'});
// });
                $('.btn-secondary-nei').on('click', function () {
                    console.log("Nei");
                    $('.underline_short').css({'margin-right': '10%', 'background-color': '#FF3926'});
                });

            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {
            "./explain-pages.js": 17,
            "bootstrap": 1,
            "consida-utils/dist/ssn": 3,
            "consida-utils/verify": 8,
            "jquery": 9,
            "popper.js": 14,
            "siema": 15
        }]
    }, {}, [18]);
});
